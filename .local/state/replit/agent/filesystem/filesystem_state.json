{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack web application for a **Seat Allotment System** designed to manage student allocation to districts based on their preferences and available vacancies. The system supports two types of users: Central Admins who manage the overall allocation process and District Admins who can update student preferences within their jurisdiction.\n\nThe application handles the complete lifecycle of seat allocation from data import (student choices and vacancies) to final allocation and export of results. It implements a merit-based allocation algorithm that processes students in order of their merit numbers and allocates them to their highest available choice.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript** using Vite for development and build tooling\n- **Component-based UI** built with shadcn/ui components and Radix UI primitives\n- **Styling** handled by Tailwind CSS with custom design tokens and CSS variables\n- **State Management** using TanStack Query for server state and React hooks for local state\n- **Routing** implemented with Wouter for client-side navigation\n- **Form Handling** using React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Express.js server** with TypeScript support\n- **Session-based authentication** using express-session with PostgreSQL session store\n- **File upload handling** with Multer for processing Excel/CSV files\n- **Service layer pattern** with dedicated services for:\n  - File processing and validation (FileService)\n  - Seat allocation algorithm (AllocationService) \n  - Export functionality (ExportService)\n  - Audit logging (AuditService)\n- **Role-based access control** distinguishing between central_admin and district_admin users\n\n## Data Storage Solutions\n- **PostgreSQL database** using Neon serverless with connection pooling\n- **Drizzle ORM** for type-safe database queries and schema management\n- **Schema-driven development** with shared types between frontend and backend\n- **Migration system** using Drizzle Kit for database schema versioning\n\n## Authentication and Authorization\n- **Session-based authentication** with secure HTTP-only cookies\n- **Password hashing** using bcrypt for secure credential storage\n- **Role-based middleware** protecting routes based on user permissions\n- **Session persistence** using PostgreSQL session store for scalability\n\n## Key Data Models\n- **Users**: Central and district administrators with role-based permissions\n- **Students**: Merit-based records with 10 district choices and allocation status\n- **Vacancies**: District-wise seat availability by stream (Medical, Commerce, NonMedical)\n- **Audit Logs**: Complete activity tracking for compliance and monitoring\n- **File Uploads**: Processing status and validation results for imported data\n\n## Allocation Algorithm\n- **Merit-based processing** sorting students by merit number (ascending = higher merit first)\n- **Sequential choice evaluation** checking choices 1-10 until a match is found\n- **Real-time vacancy tracking** decrementing available seats upon allocation\n- **Stream-specific allocation** matching student streams to district vacancies\n- **Comprehensive result tracking** with allocation status and assignment details\n\n# External Dependencies\n\n## Database Services\n- **Neon PostgreSQL** serverless database with WebSocket support for real-time connections\n- **Connection pooling** using @neondatabase/serverless for efficient database access\n\n## UI Component Libraries\n- **Radix UI** comprehensive set of accessible, unstyled UI primitives\n- **shadcn/ui** pre-built component library built on top of Radix UI\n- **Lucide React** icon library for consistent iconography\n\n## File Processing\n- **Multer** for handling multipart/form-data file uploads\n- **XLSX library** for parsing Excel files and CSV processing\n- **File validation** with size limits and type checking\n\n## Development Tools\n- **Vite** for fast development and optimized production builds\n- **TypeScript** for type safety across the entire application\n- **ESBuild** for server-side bundling in production\n- **Tailwind CSS** for utility-first styling with custom design system\n\n## Authentication & Security\n- **express-session** for server-side session management\n- **connect-pg-simple** for PostgreSQL session storage\n- **bcrypt** for secure password hashing\n- **CORS handling** and security middleware\n\n## Data Validation\n- **Zod** for runtime type validation and schema definition\n- **React Hook Form resolvers** for form validation integration\n- **Shared validation schemas** between client and server\n\n## Export Functionality\n- **PDFKit** for generating PDF reports of allocation results\n- **CSV generation** for spreadsheet-compatible data export\n- **Custom export services** with formatted output","size_bytes":4874},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Use postgres-js instead of neon for better compatibility\nconst sql = postgres(process.env.DATABASE_URL, {\n  ssl: process.env.NODE_ENV === 'production' ? 'require' : 'prefer',\n  max: 10, // Connection pool size\n});\n\nexport const db = drizzle(sql, { schema });","size_bytes":521},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertStudentSchema, insertVacancySchema, insertStudentsEntranceResultSchema, USER_ROLES } from \"@shared/schema\";\nimport { FileService } from \"./services/fileService\";\nimport { AllocationService } from \"./services/allocationService\";\nimport { ExportService } from \"./services/exportService\";\nimport { AuditService } from \"./services/auditService\";\n\nconst upload = multer({ \n  dest: 'uploads/',\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n});\n\n// Helper function to check if student preferences are complete\nfunction isPreferencesComplete(student: any): boolean {\n  if (!student.stream || !student.stream.trim()) return false;\n  \n  const choices = [\n    student.choice1, student.choice2, student.choice3, student.choice4, student.choice5,\n    student.choice6, student.choice7, student.choice8, student.choice9, student.choice10\n  ];\n  \n  return choices.every(choice => choice && choice.trim());\n}\n\n// District name normalization helper\nfunction normalizeDistrict(district: string): string {\n  // Normalize SAS Nagar variations to match across frontend/backend\n  const normalized = district.trim();\n  if (normalized === 'SAS Nagar' || normalized === 'S.A.S. Nagar' || normalized === 'SAS Nagar (Mohali)' || normalized === 'Mohali') {\n    return 'SAS Nagar'; // Use consistent name from schema\n  }\n  return normalized;\n}\n\nfunction getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'seat-allotment-secret-key',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development to avoid SSL issues\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nconst isAuthenticated = async (req: any, res: any, next: any) => {\n  if (req.session && req.session.userId) {\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n    if (user.isBlocked) {\n      return res.status(403).json({ message: \"Account has been blocked\" });\n    }\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};\n\nconst isCentralAdmin = async (req: any, res: any, next: any) => {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const user = await storage.getUser(req.session.userId);\n  if (!user || user.role !== 'central_admin') {\n    return res.status(403).json({ message: \"Forbidden - Central Admin access required\" });\n  }\n  \n  if (user.isBlocked) {\n    return res.status(403).json({ message: \"Account has been blocked\" });\n  }\n  \n  req.user = user;\n  return next();\n};\n\nconst isDistrictAdmin = async (req: any, res: any, next: any) => {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const user = await storage.getUser(req.session.userId);\n  if (!user || !['central_admin', 'district_admin'].includes(user.role)) {\n    return res.status(403).json({ message: \"Forbidden - Admin access required\" });\n  }\n  \n  if (user.isBlocked) {\n    return res.status(403).json({ message: \"Account has been blocked\" });\n  }\n  \n  req.user = user;\n  return next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  const fileService = new FileService(storage);\n  const allocationService = new AllocationService(storage);\n  const exportService = new ExportService(storage);\n  const auditService = new AuditService(storage);\n\n  // Auth routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      // Normalize input - trim whitespace and lowercase for username matching\n      const normalizedUsername = username.trim().toLowerCase();\n      \n      // Try to find user by username first, then by email\n      let user = await storage.getUserByUsername(normalizedUsername);\n      if (!user) {\n        // Try finding by email (case-insensitive)\n        user = await storage.getUserByEmail(normalizedUsername);\n      }\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      \n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      (req.session as any).userId = user.id;\n      \n      await auditService.log(user.id, 'user_login', 'auth', user.id, {\n        username: user.username,\n        role: user.role,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          role: user.role, \n          district: user.district,\n          firstName: user.firstName,\n          lastName: user.lastName,\n        } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ \n        id: user.id, \n        username: user.username, \n        role: user.role, \n        district: user.district,\n        firstName: user.firstName,\n        lastName: user.lastName,\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // User management (Central Admin only)\n  app.get('/api/users', isCentralAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/users', isCentralAdmin, async (req: any, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      await auditService.log(req.user.id, 'user_create', 'users', user.id, {\n        username: user.username,\n        role: user.role,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({ \n        id: user.id, \n        username: user.username, \n        role: user.role, \n        district: user.district,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        email: user.email\n      });\n    } catch (error) {\n      console.error(\"Create user error:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  // Update user route\n  app.put('/api/users/:id', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // Security: Prevent password updates through this route\n      // Use dedicated password change/reset routes instead\n      if (updateData.password !== undefined) {\n        return res.status(400).json({ \n          message: \"Password updates are not allowed through this route. Use the dedicated password change or reset endpoints.\" \n        });\n      }\n      \n      const user = await storage.updateUser(id, updateData);\n      \n      await auditService.log(req.user.id, 'user_update', 'users', id, {\n        username: user.username,\n        role: user.role,\n        updates: updateData,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Delete user route\n  app.delete('/api/users/:id', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      await storage.deleteUser(id);\n      \n      await auditService.log(req.user.id, 'user_delete', 'users', id, {\n        username: user.username,\n        role: user.role,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete user error:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Block user route\n  app.put('/api/users/:id/block', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role === 'central_admin') {\n        return res.status(400).json({ message: \"Cannot block central admin\" });\n      }\n      \n      const updatedUser = await storage.updateUser(id, { isBlocked: true });\n      \n      await auditService.log(req.user.id, 'user_block', 'users', id, {\n        username: user.username,\n        role: user.role,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({ \n        id: updatedUser.id, \n        username: updatedUser.username, \n        role: updatedUser.role, \n        district: updatedUser.district,\n        firstName: updatedUser.firstName,\n        lastName: updatedUser.lastName,\n        isBlocked: updatedUser.isBlocked,\n        email: updatedUser.email\n      });\n    } catch (error) {\n      console.error(\"Block user error:\", error);\n      res.status(500).json({ message: \"Failed to block user\" });\n    }\n  });\n\n  // Unblock user route\n  app.put('/api/users/:id/unblock', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const updatedUser = await storage.updateUser(id, { isBlocked: false });\n      \n      await auditService.log(req.user.id, 'user_unblock', 'users', id, {\n        username: user.username,\n        role: user.role,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({ \n        id: updatedUser.id, \n        username: updatedUser.username, \n        role: updatedUser.role, \n        district: updatedUser.district,\n        firstName: updatedUser.firstName,\n        lastName: updatedUser.lastName,\n        isBlocked: updatedUser.isBlocked,\n        email: updatedUser.email\n      });\n    } catch (error) {\n      console.error(\"Unblock user error:\", error);\n      res.status(500).json({ message: \"Failed to unblock user\" });\n    }\n  });\n\n  // CSV User import route\n  app.post('/api/users/import', isCentralAdmin, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const XLSX = await import('xlsx');\n      const workbook = XLSX.readFile(req.file.path);\n      const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      const csvData = XLSX.utils.sheet_to_json(worksheet);\n\n      const defaultPassword = req.body.defaultPassword || 'Punjab@2024';\n      const hashedPassword = await bcrypt.hash(defaultPassword, 10);\n\n      let importedCount = 0;\n      let skippedCount = 0;\n      const errors: string[] = [];\n\n      for (const row of csvData) {\n        const userData = row as any;\n        try {\n          // Check if user already exists\n          const existingUser = await storage.getUserByUsername(userData.username);\n          if (existingUser) {\n            skippedCount++;\n            continue;\n          }\n\n          // Validate required fields\n          if (!userData.username || !userData.role) {\n            errors.push(`Row missing required fields: username, role`);\n            continue;\n          }\n\n          // Create user\n          const newUser = {\n            username: userData.username,\n            email: userData.email || null,\n            password: hashedPassword,\n            role: userData.role as 'central_admin' | 'district_admin',\n            district: userData.district || null,\n            firstName: userData.firstName || '',\n            lastName: userData.lastName || '',\n            isBlocked: false,\n          };\n\n          await storage.createUser(newUser);\n          importedCount++;\n        } catch (error) {\n          errors.push(`Error importing user ${userData?.username || 'unknown'}: ${error}`);\n        }\n      }\n\n      await auditService.log(req.user.id, 'csv_user_import', 'users', 'bulk_import', {\n        importedCount,\n        skippedCount,\n        filename: req.file.originalname,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({\n        success: true,\n        importedCount,\n        skippedCount,\n        errors,\n        defaultPassword,\n      });\n    } catch (error) {\n      console.error(\"CSV import error:\", error);\n      res.status(500).json({ message: \"Failed to import users from CSV\" });\n    }\n  });\n\n  // Password change route\n  app.put('/api/auth/change-password', isAuthenticated, async (req: any, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current password and new password required\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify current password\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n      \n      // Update password\n      await storage.updateUser(user.id, { password: hashedNewPassword });\n\n      await auditService.log(req.session.userId, 'password_change', 'auth', user.id, {\n        username: user.username,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Change password error:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Password reset route for central admin to reset district admin passwords\n  app.put('/api/users/:id/reset-password', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { newPassword } = req.body;\n      \n      if (!newPassword) {\n        return res.status(400).json({ message: \"New password is required\" });\n      }\n\n      if (newPassword.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters long\" });\n      }\n\n      const targetUser = await storage.getUser(id);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Ensure only district admins can have their passwords reset by central admin\n      if (targetUser.role !== 'district_admin') {\n        return res.status(403).json({ message: \"Password reset is only allowed for district administrators\" });\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n      \n      // Update password\n      await storage.updateUser(id, { password: hashedNewPassword });\n\n      await auditService.log(req.session.userId, 'admin_password_reset', 'users', id, {\n        targetUsername: targetUser.username,\n        targetRole: targetUser.role,\n        targetDistrict: targetUser.district,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({ message: \"Password reset successfully\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  // File upload routes\n  app.post('/api/files/upload/students', isCentralAdmin, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const result = await fileService.processStudentFile(req.file, req.user.id);\n      \n      await auditService.log(req.user.id, 'file_upload', 'files', result.id, {\n        filename: result.originalName,\n        type: 'student_choices',\n        status: result.status,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Upload students file error:\", error);\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  app.post('/api/files/upload/vacancies', isCentralAdmin, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const result = await fileService.processVacancyFile(req.file, req.user.id);\n      \n      await auditService.log(req.user.id, 'file_upload', 'files', result.id, {\n        filename: result.originalName,\n        type: 'vacancies',\n        status: result.status,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Upload vacancies file error:\", error);\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  app.post('/api/files/upload/entrance-results', isCentralAdmin, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const result = await fileService.processEntranceResultsFile(req.file, req.user.id);\n      \n      await auditService.log(req.user.id, 'file_upload', 'files', result.id, {\n        filename: result.originalName,\n        type: 'entrance_results',\n        status: result.status,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Upload entrance results file error:\", error);\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  app.get('/api/files/template/entrance-results', isCentralAdmin, async (req: any, res) => {\n    try {\n      const csvContent = fileService.generateEntranceResultsTemplate();\n      \n      await auditService.log(req.user.id, 'template_download', 'files', 'entrance_results_template', {\n        type: 'entrance_results',\n      }, req.ip, req.get('User-Agent'));\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=entrance_results_template.csv');\n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Download entrance results template error:\", error);\n      res.status(500).json({ message: \"Failed to download template\" });\n    }\n  });\n\n  app.get('/api/files/template/student-choices', isCentralAdmin, async (req: any, res) => {\n    try {\n      const csvContent = fileService.generateStudentChoicesTemplate();\n      \n      await auditService.log(req.user.id, 'template_download', 'files', 'student_choices_template', {\n        type: 'student_choices',\n      }, req.ip, req.get('User-Agent'));\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=student_choices_template.csv');\n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Download student choices template error:\", error);\n      res.status(500).json({ message: \"Failed to download template\" });\n    }\n  });\n\n  app.get('/api/files/template/vacancies', isCentralAdmin, async (req: any, res) => {\n    try {\n      const csvContent = fileService.generateVacanciesTemplate();\n      \n      await auditService.log(req.user.id, 'template_download', 'files', 'vacancies_template', {\n        type: 'vacancies',\n      }, req.ip, req.get('User-Agent'));\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=vacancies_template.csv');\n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Download vacancies template error:\", error);\n      res.status(500).json({ message: \"Failed to download template\" });\n    }\n  });\n\n  app.get('/api/files', isAuthenticated, async (req, res) => {\n    try {\n      const files = await storage.getFileUploads(50);\n      res.json(files);\n    } catch (error) {\n      console.error(\"Get files error:\", error);\n      res.status(500).json({ message: \"Failed to fetch files\" });\n    }\n  });\n\n  // Students routes\n  app.get('/api/students', isAuthenticated, async (req: any, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n      const allocated = req.query.allocated === 'true';\n      const user = await storage.getUser(req.session.userId);\n      \n      if (allocated) {\n        // For the reports page - return all students\n        const students = await storage.getStudents(10000, 0);\n        return res.json(students);\n      }\n      \n      let students, total;\n      \n      // Show all students for student preference management\n      // This allows both central and district admins to see the full picture\n      students = await storage.getStudents(limit, offset);\n      total = await storage.getStudentsCount();\n      \n      // Map database fields to frontend expected fields\n      const mappedStudents = students.map(student => ({\n        ...student,\n        applicationNumber: student.appNo, // Map appNo to applicationNumber\n      }));\n      res.json({ students: mappedStudents, total });\n    } catch (error) {\n      console.error(\"Get students error:\", error);\n      res.status(500).json({ message: \"Failed to fetch students\" });\n    }\n  });\n\n  app.get('/api/students/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const student = await storage.getStudent(id);\n      \n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      \n      res.json(student);\n    } catch (error) {\n      console.error(\"Get student error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/students/:meritNumber', isAuthenticated, async (req, res) => {\n    try {\n      const meritNumberParam = req.params.meritNumber;\n      \n      // Validate that merit number is a valid number\n      if (!meritNumberParam || meritNumberParam === '[object Object]' || isNaN(Number(meritNumberParam))) {\n        return res.status(400).json({ message: \"Invalid merit number provided\" });\n      }\n      \n      const meritNumber = parseInt(meritNumberParam);\n      const student = await storage.getStudentByMeritNumber(meritNumber);\n      \n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      \n      res.json(student);\n    } catch (error) {\n      console.error(\"Get student error:\", error);\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  app.post('/api/students', isDistrictAdmin, async (req: any, res) => {\n    try {\n      // Extract the required fields from the request body\n      const { appNo, meritNumber, name, stream, gender, category } = req.body;\n      \n      // Validate required fields\n      if (!appNo || !meritNumber || !name || !stream) {\n        return res.status(400).json({ \n          message: \"Missing required fields: appNo, meritNumber, name, stream\" \n        });\n      }\n\n      // For new students created from student-preference-management, we need to get gender and category\n      // from the entrance results if not provided\n      let studentData = { appNo, meritNumber, name, stream, gender, category };\n      \n      if (!gender || !category) {\n        // Try to find the student in entrance results to get gender and category\n        const entranceResult = await storage.getStudentsEntranceResultByMeritNumber(meritNumber);\n        if (entranceResult) {\n          studentData.gender = entranceResult.gender;\n          studentData.category = entranceResult.category;\n        } else {\n          return res.status(400).json({ \n            message: \"Gender and category are required when not found in entrance results\" \n          });\n        }\n      }\n\n      const student = await storage.createStudent(studentData);\n      \n      await auditService.log(req.user.id, 'student_create', 'students', student.id, {\n        studentData,\n        userDistrict: req.user.district,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(student);\n    } catch (error) {\n      console.error(\"Create student error:\", error);\n      res.status(500).json({ message: \"Failed to create student\" });\n    }\n  });\n\n  // Exclusive lock for editing student preferences\n  app.post('/api/students/:id/lock-for-edit', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.session.userId;\n      \n      // First get the student to validate business rules\n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Business Rule 1: Student must be assigned to central admin\n      if (student.counselingDistrict !== 'Mohali' || student.districtAdmin !== 'Central_admin') {\n        return res.status(403).json({ \n          message: \"Student is not currently assigned to central admin and cannot be locked for editing\" \n        });\n      }\n\n      // Business Rule 2: Student must have complete preferences\n      if (!isPreferencesComplete(student)) {\n        return res.status(403).json({ \n          message: \"Student preferences are incomplete. Only students with complete preferences can be locked for editing\" \n        });\n      }\n      \n      const result = await storage.lockStudentForEdit(id, userId);\n      \n      if (!result.success) {\n        return res.status(409).json({ message: result.message });\n      }\n      \n      await auditService.log(userId, 'student_lock_for_edit', 'students', id, {\n        studentName: result.student?.name,\n        appNo: result.student?.appNo\n      }, req.ip, req.get('User-Agent'));\n      \n      res.json(result.student);\n    } catch (error) {\n      console.error(\"Lock student for edit error:\", error);\n      res.status(500).json({ message: \"Failed to lock student for editing\" });\n    }\n  });\n\n  app.put('/api/students/:id/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const preferences = req.body;\n      const user = await storage.getUser(req.session.userId);\n      \n      // Check if user can edit this student (exclusive lock check)\n      const canEdit = await storage.canEditStudent(id, req.session.userId);\n      if (!canEdit) {\n        return res.status(409).json({ \n          message: \"This student is currently being edited by another admin. Please try again later.\" \n        });\n      }\n      \n      // Validate deadline hasn't passed\n      const deadline = await storage.getSetting('allocation_deadline');\n      if (deadline && new Date() > new Date(deadline.value)) {\n        return res.status(403).json({ message: \"Deadline has passed. Cannot modify preferences.\" });\n      }\n\n      // Check for district conflicts if setting counseling district\n      if (preferences.counselingDistrict) {\n        const conflict = await storage.checkStudentDistrictConflict(id, preferences.counselingDistrict);\n        if (conflict.hasConflict) {\n          return res.status(409).json({ \n            message: `Student is already selected by ${conflict.currentDistrict} district. Cannot select the same student in multiple districts.`,\n            currentDistrict: conflict.currentDistrict\n          });\n        }\n      }\n\n      // Set district admin info if not already set\n      if (user?.role === 'district_admin' && user.district) {\n        preferences.counselingDistrict = user.district;\n        preferences.districtAdmin = user.username;\n      }\n      \n      // Set central admin info when central admin edits preferences\n      if (user?.role === 'central_admin') {\n        preferences.counselingDistrict = 'Mohali';\n        preferences.districtAdmin = 'Central_admin';\n      }\n\n      const student = await storage.updateStudent(id, preferences);\n      \n      await auditService.log(req.session.userId, 'student_preferences_update', 'students', id, {\n        preferences,\n        userDistrict: user?.district,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(student);\n    } catch (error) {\n      console.error(\"Update student preferences error:\", error);\n      res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  // Student lock/unlock route\n  app.put('/api/students/:id/lock', isDistrictAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { isLocked } = req.body;\n      \n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Validate that all preferences including stream are set before locking\n      if (isLocked) {\n        if (!student.stream) {\n          return res.status(400).json({ \n            message: \"Cannot lock student: Student stream must be set before locking\" \n          });\n        }\n\n        const hasAllChoices = student.choice1 && student.choice2 && student.choice3 && \n                             student.choice4 && student.choice5 && student.choice6 &&\n                             student.choice7 && student.choice8 && student.choice9 && student.choice10;\n        \n        if (!hasAllChoices) {\n          return res.status(400).json({ \n            message: \"Cannot lock student: All 10 district preferences must be set before locking\" \n          });\n        }\n      }\n\n      const updatedStudent = isLocked \n        ? await storage.lockStudent(id, req.session.userId)\n        : await storage.unlockStudent(id);\n      \n      await auditService.log(req.user.id, 'student_lock_status_change', 'students', id, {\n        isLocked,\n        studentName: student.name,\n        appNo: student.appNo,\n        userDistrict: req.user.district,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Update student lock status error:\", error);\n      res.status(500).json({ message: \"Failed to update lock status\" });\n    }\n  });\n\n  // Central admin override preferences route\n  app.put('/api/students/:id/preferences/override', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { preferences, reason } = req.body;\n      \n      const student = await storage.updateStudent(id, preferences);\n      \n      await auditService.log(req.session.userId, 'central_admin_override', 'students', id, {\n        preferences,\n        reason,\n        overriddenBy: req.session.userId,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(student);\n    } catch (error) {\n      console.error(\"Central admin override error:\", error);\n      res.status(500).json({ message: \"Failed to override preferences\" });\n    }\n  });\n\n  // Student release route\n  app.put('/api/students/:id/release', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(req.session.userId);\n      \n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Check if student is locked - locked students cannot be released\n      if (student.isLocked) {\n        return res.status(403).json({ message: \"Cannot release locked student\" });\n      }\n\n      // Central admin can release any student, district admin can only release from their own district\n      if (user?.role === 'district_admin' && student.counselingDistrict !== user.district) {\n        return res.status(403).json({ message: \"Can only release students from your district\" });\n      }\n      \n      const updatedStudent = await storage.releaseStudentFromDistrict(id);\n      \n      await auditService.log(req.session.userId, 'student_release', 'students', id, {\n        releasedBy: req.session.userId,\n        studentName: student.name,\n        meritNumber: student.meritNumber,\n        fromDistrict: student.counselingDistrict\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Student release error:\", error);\n      res.status(500).json({ message: \"Failed to release student\" });\n    }\n  });\n\n  // Release assignment endpoint - specifically for central admin to unset district assignment\n  app.post('/api/students/:id/release-assignment', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(req.session.userId);\n      \n      // Only central admin can use this endpoint\n      if (user?.role !== 'central_admin') {\n        return res.status(403).json({ message: \"Only central admin can release assignments\" });\n      }\n      \n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Verify student is currently assigned to central admin\n      if (student.counselingDistrict !== 'Mohali' || student.districtAdmin !== 'Central_admin') {\n        return res.status(400).json({ \n          message: \"Student is not currently assigned to central admin\" \n        });\n      }\n\n      // Check if student is locked - locked students cannot be released\n      if (student.lockedBy && student.lockedBy !== req.session.userId) {\n        return res.status(409).json({ \n          message: \"Student is locked by another admin. Cannot release assignment.\" \n        });\n      }\n      \n      const updatedStudent = await storage.releaseAssignment(id);\n      \n      await auditService.log(req.session.userId, 'assignment_release', 'students', id, {\n        releasedBy: req.session.userId,\n        studentName: student.name,\n        meritNumber: student.meritNumber,\n        previousDistrict: student.counselingDistrict,\n        previousDistrictAdmin: student.districtAdmin\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Release assignment error:\", error);\n      res.status(500).json({ message: \"Failed to release assignment\" });\n    }\n  });\n\n  // Lock student for editing\n  app.post('/api/students/:id/lock', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(req.session.userId);\n      \n      // Only central admin can lock students\n      if (user?.role !== 'central_admin') {\n        return res.status(403).json({ message: \"Only central admin can lock students\" });\n      }\n      \n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Check if student is already locked\n      if (student.lockedBy && student.lockedBy !== req.session.userId) {\n        return res.status(409).json({ \n          message: \"Student is already locked by another admin\" \n        });\n      }\n      \n      const updatedStudent = await storage.updateStudent(id, {\n        lockedBy: req.session.userId\n      });\n      \n      await auditService.log(req.session.userId, 'student_lock', 'students', id, {\n        lockedBy: req.session.userId,\n        studentName: student.name,\n        meritNumber: student.meritNumber\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Student lock error:\", error);\n      res.status(500).json({ message: \"Failed to lock student\" });\n    }\n  });\n\n  // Unlock student\n  app.post('/api/students/:id/unlock', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(req.session.userId);\n      \n      // Only central admin can unlock students\n      if (user?.role !== 'central_admin') {\n        return res.status(403).json({ message: \"Only central admin can unlock students\" });\n      }\n      \n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Check if student is locked by current user or is unlocked\n      if (student.lockedBy && student.lockedBy !== req.session.userId) {\n        return res.status(403).json({ \n          message: \"Student is locked by another admin\" \n        });\n      }\n      \n      const updatedStudent = await storage.updateStudent(id, {\n        lockedBy: null\n      });\n      \n      await auditService.log(req.session.userId, 'student_unlock', 'students', id, {\n        unlockedBy: req.session.userId,\n        studentName: student.name,\n        meritNumber: student.meritNumber\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Student unlock error:\", error);\n      res.status(500).json({ message: \"Failed to unlock student\" });\n    }\n  });\n\n  // Finalize allocation process\n  app.post('/api/allocation/finalize', isCentralAdmin, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      \n      // Check if already finalized\n      const settings = await storage.getSettings();\n      const finalizedSetting = settings.find(s => s.key === 'allocation_finalized');\n      \n      if (finalizedSetting && finalizedSetting.value === 'true') {\n        return res.status(400).json({ \n          message: \"Allocation process has already been finalized\" \n        });\n      }\n      \n      const currentTime = new Date().toISOString();\n      \n      // Set allocation as finalized\n      await storage.setSetting({\n        key: 'allocation_finalized',\n        value: 'true'\n      });\n      await storage.setSetting({\n        key: 'allocation_finalized_at',\n        value: currentTime\n      });\n      await storage.setSetting({\n        key: 'allocation_finalized_by',\n        value: req.session.userId\n      });\n\n      // Automatically finalize SAS Nagar (Mohali) district when allocation is finalized\n      // SAS Nagar is managed directly by central admin\n      try {\n        const sasNagarStatus = await storage.getDistrictStatus('SAS Nagar');\n        if (!sasNagarStatus?.isFinalized) {\n          await storage.finalizeDistrict('SAS Nagar', req.session.userId);\n          \n          await auditService.log(req.session.userId, 'district_finalized', 'district', 'SAS Nagar', {\n            reason: 'Auto-finalized during allocation finalization',\n            finalizedBy: req.session.userId,\n            finalizedAt: currentTime\n          }, req.ip, req.get('User-Agent'));\n        }\n      } catch (error) {\n        console.warn('Warning: Could not auto-finalize SAS Nagar district during allocation finalization:', error);\n        // Continue with allocation finalization even if SAS Nagar finalization fails\n      }\n      \n      await auditService.log(req.session.userId, 'allocation_finalize', 'allocation', 'system', {\n        finalizedBy: req.session.userId,\n        finalizedAt: currentTime\n      }, req.ip, req.get('User-Agent'));\n\n      res.json({ \n        message: \"Allocation process finalized successfully\",\n        finalizedAt: currentTime,\n        finalizedBy: user?.username\n      });\n    } catch (error) {\n      console.error(\"Allocation finalize error:\", error);\n      res.status(500).json({ message: \"Failed to finalize allocation\" });\n    }\n  });\n\n  // Fetch student endpoint\n  app.put('/api/students/:id/fetch', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      let { counselingDistrict, districtAdmin } = req.body;\n      const user = await storage.getUser(req.session.userId);\n      \n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Check if student is already assigned to a district (skip if released)\n      if (student.counselingDistrict && !student.isReleased) {\n        return res.status(400).json({ message: \"Student is already assigned to a district\" });\n      }\n\n      // For central admin, default to SAS Nagar district if not specified\n      if (user?.role === 'central_admin') {\n        counselingDistrict = counselingDistrict || 'SAS Nagar';\n        districtAdmin = districtAdmin || user.id;\n      }\n\n      // District admin can only fetch to their own district\n      if (user?.role === 'district_admin' && counselingDistrict !== user.district) {\n        return res.status(403).json({ message: \"Can only fetch students to your district\" });\n      }\n      \n      const updatedStudent = await storage.fetchStudentToDistrict(id, counselingDistrict, districtAdmin);\n      \n      await auditService.log(req.session.userId, 'student_fetch', 'students', id, {\n        fetchedBy: req.session.userId,\n        studentName: student.name,\n        meritNumber: student.meritNumber,\n        toDistrict: counselingDistrict,\n        districtAdmin: districtAdmin\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Student fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  // File validation routes (validate without saving to database)\n  app.post('/api/files/validate/students', isCentralAdmin, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const result = await fileService.validateStudentFile(req.file);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Validate students file error:\", error);\n      res.status(500).json({ message: \"Failed to validate file\" });\n    }\n  });\n\n  app.post('/api/files/validate/vacancies', isCentralAdmin, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const result = await fileService.validateVacancyFile(req.file);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Validate vacancies file error:\", error);\n      res.status(500).json({ message: \"Failed to validate file\" });\n    }\n  });\n\n  app.post('/api/files/validate/entrance-results', isCentralAdmin, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const result = await fileService.validateEntranceResultsFile(req.file);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Validate entrance results file error:\", error);\n      res.status(500).json({ message: \"Failed to validate file\" });\n    }\n  });\n\n  // Students entrance results routes\n  app.get('/api/students-entrance-results', isDistrictAdmin, async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n      \n      const results = await storage.getStudentsEntranceResults(limit, offset);\n      const total = await storage.getStudentsEntranceResultsCount();\n      \n      res.json({ students: results, total });\n    } catch (error) {\n      console.error(\"Get students entrance results error:\", error);\n      res.status(500).json({ message: \"Failed to fetch entrance results\" });\n    }\n  });\n\n  app.get('/api/students-entrance-results/search', isDistrictAdmin, async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      \n      if (!query || query.trim().length < 2) {\n        return res.json([]);\n      }\n      \n      const results = await storage.searchStudentsEntranceResults(query.trim());\n      res.json(results);\n    } catch (error) {\n      console.error(\"Search students entrance results error:\", error);\n      res.status(500).json({ message: \"Failed to search entrance results\" });\n    }\n  });\n\n  app.post('/api/students-entrance-results', isCentralAdmin, async (req: any, res) => {\n    try {\n      const resultData = insertStudentsEntranceResultSchema.parse(req.body);\n      const result = await storage.createStudentsEntranceResult(resultData);\n      \n      await auditService.log(req.user.id, 'entrance_result_create', 'entrance_results', result.id, {\n        meritNo: result.meritNo,\n        studentName: result.studentName,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Create entrance result error:\", error);\n      res.status(500).json({ message: \"Failed to create entrance result\" });\n    }\n  });\n\n  // Update entrance result route\n  app.put('/api/students-entrance-results/:id', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { stream } = req.body;\n      \n      const existingResult = await storage.getStudentsEntranceResult(id);\n      if (!existingResult) {\n        return res.status(404).json({ message: \"Entrance result not found\" });\n      }\n\n      const updatedResult = await storage.updateStudentsEntranceResult(id, { stream });\n      \n      await auditService.log(req.user.id, 'entrance_result_update', 'entrance_results', id, {\n        field: 'stream',\n        oldValue: existingResult.stream,\n        newValue: stream,\n        studentName: existingResult.studentName,\n        meritNo: existingResult.meritNo,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedResult);\n    } catch (error) {\n      console.error(\"Update entrance result error:\", error);\n      res.status(500).json({ message: \"Failed to update entrance result\" });\n    }\n  });\n\n  app.put('/api/students-entrance-results/:entranceResultId/preferences', isDistrictAdmin, async (req: any, res) => {\n    try {\n      const { entranceResultId } = req.params;\n      const { studentId, preferences } = req.body;\n      \n      // Validate deadline hasn't passed\n      const deadline = await storage.getSetting('allocation_deadline');\n      if (deadline && new Date() > new Date(deadline.value)) {\n        return res.status(403).json({ message: \"Deadline has passed. Cannot modify preferences.\" });\n      }\n\n      // Add counseling district and district admin info\n      const preferencesWithDistrict = {\n        ...preferences,\n        counselingDistrict: req.user.district,\n        districtAdmin: `${req.user.firstName} ${req.user.lastName}`.trim(),\n      };\n\n      const student = await storage.updateStudentPreferences(studentId, preferencesWithDistrict);\n      \n      await auditService.log(req.user.id, 'student_preferences_set', 'students', studentId, {\n        entranceResultId,\n        preferences: preferencesWithDistrict,\n        userDistrict: req.user.district,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(student);\n    } catch (error) {\n      console.error(\"Update student preferences from entrance result error:\", error);\n      res.status(500).json({ message: \"Failed to update student preferences\" });\n    }\n  });\n\n  // Create student from entrance result with preferences\n  app.post('/api/students/from-entrance-result', isDistrictAdmin, async (req: any, res) => {\n    try {\n      const { entranceStudentId, preferences, stream, counselingDistrict, districtAdmin } = req.body;\n      \n      // Validate deadline hasn't passed\n      const deadline = await storage.getSetting('allocation_deadline');\n      if (deadline && new Date() > new Date(deadline.value)) {\n        return res.status(403).json({ message: \"Deadline has passed. Cannot create new students.\" });\n      }\n\n      // Find the entrance result record\n      const entranceResult = await storage.getStudentsEntranceResult(entranceStudentId);\n      if (!entranceResult) {\n        return res.status(404).json({ message: \"Entrance result not found\" });\n      }\n\n      // Check if student already exists\n      const existingStudent = await storage.getStudentByMeritNumber(entranceResult.meritNo);\n      if (existingStudent) {\n        return res.status(400).json({ \n          message: \"Student already exists in the system\",\n          studentId: existingStudent.id\n        });\n      }\n\n      // Create student from entrance result\n      const newStudent = await storage.createStudent({\n        appNo: entranceResult.applicationNo,\n        meritNumber: entranceResult.meritNo,\n        name: entranceResult.studentName,\n        stream: stream || entranceResult.stream,\n        gender: entranceResult.gender,\n        category: entranceResult.category,\n        counselingDistrict: req.user.district,\n        districtAdmin: `${req.user.firstName} ${req.user.lastName}`.trim(),\n        ...preferences\n      });\n\n      await auditService.log(req.user.id, 'student_create_from_entrance', 'students', newStudent.id, {\n        entranceStudentId,\n        preferences,\n        userDistrict: req.user.district,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(newStudent);\n    } catch (error) {\n      console.error(\"Create student from entrance result error:\", error);\n      res.status(500).json({ message: \"Failed to create student from entrance result\" });\n    }\n  });\n\n  // Vacancies routes\n  app.get('/api/vacancies', isAuthenticated, async (req, res) => {\n    try {\n      const vacancies = await storage.getVacancies();\n      res.json(vacancies);\n    } catch (error) {\n      console.error(\"Get vacancies error:\", error);\n      res.status(500).json({ message: \"Failed to fetch vacancies\" });\n    }\n  });\n\n  // Allocation routes\n  app.post('/api/allocation/run', isCentralAdmin, async (req: any, res) => {\n    try {\n      // Check if allocation has already been run\n      const allocationRun = await storage.getSetting('allocation_completed');\n      if (allocationRun && allocationRun.value === 'true') {\n        return res.status(400).json({ message: \"Allocation has already been completed\" });\n      }\n\n      // Check if all districts with eligible students are finalized\n      const allDistrictStatuses = await storage.getAllDistrictStatuses();\n      const studentsData = await storage.getStudents(10000, 0);\n      \n      // Get list of districts that have students with district admin assignments and preferences\n      const districtsWithEligibleStudents = new Set<string>();\n      studentsData.forEach((student) => {\n        if (student.districtAdmin && student.choice1 && student.counselingDistrict) {\n          districtsWithEligibleStudents.add(student.counselingDistrict);\n        }\n      });\n\n      // Check if all districts with eligible students are finalized\n      const unfinalizedDistricts: string[] = [];\n      districtsWithEligibleStudents.forEach(district => {\n        const normalizedDistrict = normalizeDistrict(district);\n        const districtStatus = allDistrictStatuses.find(status => normalizeDistrict(status.district) === normalizedDistrict);\n        if (!districtStatus || !districtStatus.isFinalized) {\n          unfinalizedDistricts.push(district);\n        }\n      });\n\n      if (unfinalizedDistricts.length > 0) {\n        return res.status(400).json({ \n          message: `Cannot run allocation: ${unfinalizedDistricts.length} districts with eligible students are not finalized. All districts must finalize their data before allocation can be run.`,\n          unfinalizedDistricts,\n          totalDistricts: districtsWithEligibleStudents.size\n        });\n      }\n\n      const result = await allocationService.runAllocation();\n      \n      await storage.setSetting({\n        key: 'allocation_completed',\n        value: 'true',\n        description: 'Indicates if the final allocation has been run'\n      });\n\n      await auditService.log(req.user.id, 'allocation_run', 'allocation', 'system', {\n        result,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Run allocation error:\", error);\n      res.status(500).json({ message: \"Failed to run allocation\" });\n    }\n  });\n\n  app.get('/api/allocation/status', isAuthenticated, async (req, res) => {\n    try {\n      const allocationCompleted = await storage.getSetting('allocation_completed');\n      const deadline = await storage.getSetting('allocation_deadline');\n      \n      res.json({\n        completed: allocationCompleted?.value === 'true',\n        deadline: deadline?.value,\n      });\n    } catch (error) {\n      console.error(\"Get allocation status error:\", error);\n      res.status(500).json({ message: \"Failed to fetch allocation status\" });\n    }\n  });\n\n  app.get('/api/allocation/stats', isAuthenticated, async (req, res) => {\n    try {\n      // Get total students from entrance results (all students)\n      const totalEntranceResults = await storage.getStudentsEntranceResultsCount();\n      \n      // Get students with allocation data (only those with preferences set)\n      const students = await storage.getStudents(10000, 0);\n      const allottedStudents = students.filter(s => s.allocationStatus === 'allotted');\n      const notAllottedStudents = students.filter(s => s.allocationStatus === 'not_allotted');\n      const pendingStudents = students.filter(s => s.allocationStatus === 'pending');\n      \n      // Calculate students without preferences (in entrance results but not in students table)\n      const studentsWithoutPreferences = totalEntranceResults - students.length;\n      \n      // Group allotted students by district\n      const allocationsByDistrict: Record<string, number> = {};\n      allottedStudents.forEach(student => {\n        if (student.allottedDistrict) {\n          allocationsByDistrict[student.allottedDistrict] = (allocationsByDistrict[student.allottedDistrict] || 0) + 1;\n        }\n      });\n\n      res.json({\n        totalStudents: totalEntranceResults, // Total from entrance results\n        allottedStudents: allottedStudents.length,\n        notAllottedStudents: notAllottedStudents.length,\n        pendingStudents: pendingStudents.length,\n        studentsWithoutPreferences: studentsWithoutPreferences,\n        studentsWithPreferences: students.length,\n        allocationsByDistrict,\n      });\n    } catch (error) {\n      console.error(\"Get allocation stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch allocation stats\" });\n    }\n  });\n\n  // Export routes\n  app.get('/api/export/csv', isCentralAdmin, async (req: any, res) => {\n    try {\n      const csvData = await exportService.exportResultsAsCSV();\n      \n      await auditService.log(req.user.id, 'export_csv', 'export', 'results', {\n        format: 'csv',\n      }, req.ip, req.get('User-Agent'));\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=allocation_results.csv');\n      res.send(csvData);\n    } catch (error) {\n      console.error(\"Export CSV error:\", error);\n      res.status(500).json({ message: \"Failed to export CSV\" });\n    }\n  });\n\n  // Export remaining vacancies as CSV\n  app.get('/api/export/vacancies/csv', isCentralAdmin, async (req: any, res) => {\n    try {\n      const csvData = await exportService.exportVacanciesAsCSV();\n      \n      await auditService.log(req.user.id, 'export_vacancies_csv', 'export', 'vacancies', {\n        format: 'csv',\n      }, req.ip, req.get('User-Agent'));\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=remaining_vacancies.csv');\n      res.send(csvData);\n    } catch (error) {\n      console.error(\"Export vacancies CSV error:\", error);\n      res.status(500).json({ message: \"Failed to export vacancies CSV\" });\n    }\n  });\n\n  // Export remaining vacancies as PDF\n  app.get('/api/export/vacancies/pdf', isCentralAdmin, async (req: any, res) => {\n    try {\n      const pdfBuffer = await exportService.exportVacanciesAsPDF();\n      \n      await auditService.log(req.user.id, 'export_vacancies_pdf', 'export', 'vacancies', {\n        format: 'pdf',\n      }, req.ip, req.get('User-Agent'));\n\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', 'attachment; filename=remaining_vacancies.pdf');\n      res.send(pdfBuffer);\n    } catch (error) {\n      console.error(\"Export vacancies PDF error:\", error);\n      res.status(500).json({ message: \"Failed to export vacancies PDF\" });\n    }\n  });\n\n  app.get('/api/export/pdf', isCentralAdmin, async (req: any, res) => {\n    try {\n      const pdfBuffer = await exportService.exportResultsAsPDF();\n      \n      await auditService.log(req.user.id, 'export_pdf', 'export', 'results', {\n        format: 'pdf',\n      }, req.ip, req.get('User-Agent'));\n\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', 'attachment; filename=allocation_results.pdf');\n      res.send(pdfBuffer);\n    } catch (error) {\n      console.error(\"Export PDF error:\", error);\n      res.status(500).json({ message: \"Failed to export PDF\" });\n    }\n  });\n\n  // District status routes\n  app.get('/api/district-status', isDistrictAdmin, async (req: any, res) => {\n    try {\n      const user = req.user;\n      \n      if (user.role === 'central_admin') {\n        // Central admin can see all district statuses\n        let statuses = await storage.getAllDistrictStatuses();\n        \n        // Get all students to identify districts with eligible students\n        const studentsData = await storage.getStudents(10000, 0);\n        \n        // Get list of districts that have students with district admin assignments and preferences\n        const districtsWithEligibleStudents = new Set<string>();\n        studentsData.forEach((student) => {\n          if (student.districtAdmin && student.choice1 && student.counselingDistrict) {\n            districtsWithEligibleStudents.add(student.counselingDistrict);\n          }\n        });\n\n        // Create status records for districts that have eligible students but no status record\n        const existingDistricts = new Set(statuses.map(status => status.district));\n        const missingDistricts = Array.from(districtsWithEligibleStudents).filter(district => \n          !existingDistricts.has(district)\n        );\n\n        // Create default status records for missing districts\n        for (const district of missingDistricts) {\n          await storage.createOrUpdateDistrictStatus({\n            district,\n            isFinalized: false,\n            totalStudents: 0,\n            lockedStudents: 0,\n            studentsWithChoices: 0\n          });\n        }\n\n        // Fetch updated statuses if we created any\n        if (missingDistricts.length > 0) {\n          statuses = await storage.getAllDistrictStatuses();\n        }\n        \n        res.json(statuses);\n      } else if (user.role === 'district_admin') {\n        // District admin can only see their own district status\n        const status = await storage.getDistrictStatus(user.district);\n        res.json(status ? [status] : []);\n      } else {\n        res.status(403).json({ message: \"Forbidden\" });\n      }\n    } catch (error) {\n      console.error(\"Get district statuses error:\", error);\n      res.status(500).json({ message: \"Failed to fetch district statuses\" });\n    }\n  });\n\n  app.get('/api/district-status/:district', isAuthenticated, async (req, res) => {\n    try {\n      const { district } = req.params;\n      const status = await storage.getDistrictStatus(district);\n      res.json(status || { district, isFinalized: false, totalStudents: 0, lockedStudents: 0, studentsWithChoices: 0 });\n    } catch (error) {\n      console.error(\"Get district status error:\", error);\n      res.status(500).json({ message: \"Failed to fetch district status\" });\n    }\n  });\n\n  app.post('/api/district-status/:district/finalize', isDistrictAdmin, async (req: any, res) => {\n    try {\n      const { district } = req.params;\n      const user = await storage.getUser(req.session.userId);\n      \n      // Permission check: District admins can only finalize their own district\n      // Central admin can finalize SAS Nagar/Mohali district (which they manage directly)\n      if (user?.role === 'district_admin' && normalizeDistrict(user.district || '') !== normalizeDistrict(district)) {\n        return res.status(403).json({ message: \"Can only finalize your own district\" });\n      }\n      \n      // Central admin can only finalize SAS Nagar/Mohali district\n      if (user?.role === 'central_admin' && normalizeDistrict(district) !== 'SAS Nagar') {\n        return res.status(403).json({ message: \"Central admin can only finalize SAS Nagar district\" });\n      }\n\n      // Check if all eligible students in district are locked\n      const districtStudents = await storage.getStudentsByDistrict(district);\n      \n      // Only consider students that belong to this district AND have district admin assigned AND have preference data for finalization\n      const eligibleStudents = districtStudents.students.filter(s => \n        s.counselingDistrict === district && s.districtAdmin && s.choice1 // Must belong to district, have district admin and at least first choice\n      );\n      \n      const unlockedEligibleStudents = eligibleStudents.filter(s => !s.isLocked);\n      \n      if (unlockedEligibleStudents.length > 0) {\n        return res.status(400).json({ \n          message: `Cannot finalize district: ${unlockedEligibleStudents.length} eligible students are not locked. All students with district admin assignments and preferences must be locked before finalization.`,\n          unlockedCount: unlockedEligibleStudents.length,\n          eligibleTotal: eligibleStudents.length\n        });\n      }\n\n      const status = await storage.finalizeDistrict(district, req.session.userId);\n      \n      await auditService.log(req.session.userId, 'district_finalized', 'district', district, {\n        totalStudents: districtStudents.total,\n        lockedStudents: districtStudents.students.length\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(status);\n    } catch (error) {\n      console.error(\"Finalize district error:\", error);\n      res.status(500).json({ message: \"Failed to finalize district\" });\n    }\n  });\n\n  // Student locking routes\n  app.put('/api/students/:id/lock', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { isLocked } = req.body;\n      const user = await storage.getUser(req.session.userId);\n      \n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // District admin can only lock/unlock students in their district\n      if (user?.role === 'district_admin' && student.counselingDistrict !== user.district) {\n        return res.status(403).json({ message: \"Can only lock/unlock students in your district\" });\n      }\n\n      // Only central admin can unlock students - district admin can only lock\n      if (!isLocked && user?.role === 'district_admin') {\n        return res.status(403).json({ message: \"Only central admin can unlock students\" });\n      }\n\n      // Business rule validation: Students with no district admin and no preference data cannot be locked\n      if (isLocked && !student.districtAdmin && !student.choice1) {\n        return res.status(400).json({ \n          message: \"Cannot lock student: Student has no district admin assigned and no preference data. Only students with district admin assignments and preferences can be locked.\" \n        });\n      }\n\n      const updatedStudent = isLocked \n        ? await storage.lockStudent(id, req.session.userId)\n        : await storage.unlockStudent(id);\n      \n      await auditService.log(req.session.userId, \n        isLocked ? 'student_locked' : 'student_unlocked', \n        'student', id, {\n          studentName: student.name,\n          meritNumber: student.meritNumber,\n          district: student.counselingDistrict\n        }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Lock/unlock student error:\", error);\n      res.status(500).json({ message: \"Failed to update student lock status\" });\n    }\n  });\n\n  // Unlock student after editing (release exclusive lock)\n  app.post('/api/students/:id/unlock-edit', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.session.userId;\n      \n      // Check if this user has the lock\n      const canEdit = await storage.canEditStudent(id, userId);\n      if (!canEdit) {\n        return res.status(403).json({ \n          message: \"You don't have edit permissions for this student\" \n        });\n      }\n      \n      const updatedStudent = await storage.unlockStudent(id);\n      \n      await auditService.log(userId, 'student_unlock_edit', 'students', id, {\n        studentName: updatedStudent.name,\n        appNo: updatedStudent.appNo\n      }, req.ip, req.get('User-Agent'));\n      \n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Unlock student edit error:\", error);\n      res.status(500).json({ message: \"Failed to unlock student\" });\n    }\n  });\n\n  app.put('/api/students/:id/release', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(req.session.userId);\n      \n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // District admin can only release students from their district\n      if (user?.role === 'district_admin' && student.counselingDistrict !== user.district) {\n        return res.status(403).json({ message: \"Can only release students from your district\" });\n      }\n\n      const updatedStudent = await storage.releaseStudentFromDistrict(id);\n      \n      await auditService.log(req.session.userId, 'student_released', 'student', id, {\n        studentName: student.name,\n        meritNumber: student.meritNumber,\n        fromDistrict: student.counselingDistrict\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Release student error:\", error);\n      res.status(500).json({ message: \"Failed to release student\" });\n    }\n  });\n\n  // Unlock request routes\n  app.post('/api/unlock-requests', isDistrictAdmin, async (req: any, res) => {\n    try {\n      const { studentId, reason } = req.body;\n      const user = await storage.getUser(req.session.userId);\n      \n      if (!studentId || !reason) {\n        return res.status(400).json({ message: \"Student ID and reason are required\" });\n      }\n\n      const student = await storage.getStudent(studentId);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // District admin can only request unlock for students in their district\n      if (user?.role === 'district_admin' && student.counselingDistrict !== user.district) {\n        return res.status(403).json({ message: \"Can only request unlock for students in your district\" });\n      }\n\n      const unlockRequest = await storage.createUnlockRequest({\n        studentId,\n        requestedBy: req.session.userId,\n        reason,\n        status: 'pending'\n      });\n\n      await auditService.log(req.session.userId, 'unlock_request_created', 'unlock_request', unlockRequest.id, {\n        studentName: student.name,\n        meritNumber: student.meritNumber,\n        reason\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(unlockRequest);\n    } catch (error) {\n      console.error(\"Create unlock request error:\", error);\n      res.status(500).json({ message: \"Failed to create unlock request\" });\n    }\n  });\n\n  app.get('/api/unlock-requests', isCentralAdmin, async (req, res) => {\n    try {\n      const requests = await storage.getUnlockRequests();\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Get unlock requests error:\", error);\n      res.status(500).json({ message: \"Failed to fetch unlock requests\" });\n    }\n  });\n\n  app.put('/api/unlock-requests/:id/approve', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { reviewComments } = req.body;\n\n      const unlockRequest = await storage.updateUnlockRequest(id, {\n        status: 'approved',\n        reviewedBy: req.session.userId,\n        reviewedAt: new Date(),\n        reviewComments\n      });\n\n      // If approved, unlock the student\n      if (unlockRequest.studentId) {\n        await storage.unlockStudent(unlockRequest.studentId);\n      }\n\n      await auditService.log(req.session.userId, 'unlock_request_approved', 'unlock_request', id, {\n        reviewComments\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(unlockRequest);\n    } catch (error) {\n      console.error(\"Approve unlock request error:\", error);\n      res.status(500).json({ message: \"Failed to approve unlock request\" });\n    }\n  });\n\n  app.put('/api/unlock-requests/:id/reject', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { reviewComments } = req.body;\n\n      const unlockRequest = await storage.updateUnlockRequest(id, {\n        status: 'rejected',\n        reviewedBy: req.session.userId,\n        reviewedAt: new Date(),\n        reviewComments\n      });\n\n      await auditService.log(req.session.userId, 'unlock_request_rejected', 'unlock_request', id, {\n        reviewComments\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(unlockRequest);\n    } catch (error) {\n      console.error(\"Reject unlock request error:\", error);\n      res.status(500).json({ message: \"Failed to reject unlock request\" });\n    }\n  });\n\n  // Combined respond endpoint for unlock requests (approve or reject)\n  app.put('/api/unlock-requests/:id/respond', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { action, reviewComments } = req.body;\n\n      if (!action || !['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ message: \"Invalid action. Must be 'approve' or 'reject'\" });\n      }\n\n      const unlockRequest = await storage.updateUnlockRequest(id, {\n        status: action === 'approve' ? 'approved' : 'rejected',\n        reviewedBy: req.session.userId,\n        reviewedAt: new Date(),\n        reviewComments\n      });\n\n      // If approved, unlock the student\n      if (action === 'approve' && unlockRequest.studentId) {\n        await storage.unlockStudent(unlockRequest.studentId);\n      }\n\n      await auditService.log(req.session.userId, `unlock_request_${action}d`, 'unlock_request', id, {\n        reviewComments\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(unlockRequest);\n    } catch (error) {\n      console.error(\"Respond to unlock request error:\", error);\n      res.status(500).json({ message: \"Failed to process unlock request\" });\n    }\n  });\n\n  // Auto-load entrance exam students for district\n  app.post('/api/district/:district/auto-load-students', isDistrictAdmin, async (req: any, res) => {\n    try {\n      const { district } = req.params;\n      const user = await storage.getUser(req.session.userId);\n      \n      // Check if the district admin has access to this district\n      if (user?.role === 'district_admin' && user?.district !== district) {\n        return res.status(403).json({ message: \"You can only load students for your own district\" });\n      }\n      \n      const result = await storage.autoLoadEntranceStudents(district);\n      \n      await auditService.log(req.session.userId, 'students_auto_loaded', 'students', 'bulk', {\n        district,\n        loaded: result.loaded,\n        skipped: result.skipped\n      }, req.ip, req.get('User-Agent'));\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Auto-load students error:\", error);\n      res.status(500).json({ message: \"Failed to auto-load students\" });\n    }\n  });\n\n  // Get students by district for district admins\n  app.get('/api/district/:district/students', isAuthenticated, async (req: any, res) => {\n    try {\n      const { district } = req.params;\n      const user = await storage.getUser(req.session.userId);\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n      \n      // District admin can only view students in their district\n      if (user?.role === 'district_admin' && user.district !== district) {\n        return res.status(403).json({ message: \"Can only view students in your district\" });\n      }\n\n      const result = await storage.getStudentsByDistrict(district, limit, offset);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Get district students error:\", error);\n      res.status(500).json({ message: \"Failed to fetch district students\" });\n    }\n  });\n\n  // Audit logs routes\n  app.get('/api/audit-logs', isCentralAdmin, async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n      const logs = await storage.getAuditLogs(limit, offset);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Get audit logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get dashboard stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Settings routes\n  app.get('/api/settings', isAuthenticated, async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Get settings error:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post('/api/settings', isCentralAdmin, async (req: any, res) => {\n    try {\n      const { key, value, description } = req.body;\n      const setting = await storage.setSetting({ key, value, description });\n      \n      await auditService.log(req.user.id, 'setting_update', 'settings', setting.id, {\n        key,\n        value,\n      }, req.ip, req.get('User-Agent'));\n\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Set setting error:\", error);\n      res.status(500).json({ message: \"Failed to update setting\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":75741},"server/storage.ts":{"content":"import {\n  users,\n  students,\n  studentsEntranceResult,\n  vacancies,\n  settings,\n  auditLogs,\n  fileUploads,\n  districtStatus,\n  unlockRequests,\n  type User,\n  type InsertUser,\n  type Student,\n  type InsertStudent,\n  type StudentsEntranceResult,\n  type InsertStudentsEntranceResult,\n  type Vacancy,\n  type InsertVacancy,\n  type Setting,\n  type InsertSetting,\n  type AuditLog,\n  type InsertAuditLog,\n  type FileUpload,\n  type InsertFileUpload,\n  type DistrictStatus,\n  type InsertDistrictStatus,\n  type UnlockRequest,\n  type InsertUnlockRequest,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, asc, sql, or, ilike } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n\n  // Student operations\n  getStudents(limit?: number, offset?: number): Promise<Student[]>;\n  getStudent(id: string): Promise<Student | undefined>;\n  getStudentByMeritNumber(meritNumber: number): Promise<Student | undefined>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student>;\n  bulkCreateStudents(students: InsertStudent[]): Promise<Student[]>;\n  deleteAllStudents(): Promise<void>;\n  getStudentsCount(): Promise<number>;\n  getStudentsByStatus(status: string): Promise<Student[]>;\n\n  // Students entrance result operations\n  getStudentsEntranceResults(limit?: number, offset?: number): Promise<StudentsEntranceResult[]>;\n  getStudentsEntranceResult(id: string): Promise<StudentsEntranceResult | undefined>;\n  getStudentsEntranceResultByMeritNumber(meritNumber: number): Promise<StudentsEntranceResult | undefined>;\n  getStudentsEntranceResultsCount(): Promise<number>;\n  searchStudentsEntranceResults(query: string): Promise<StudentsEntranceResult[]>;\n  createStudentsEntranceResult(result: InsertStudentsEntranceResult): Promise<StudentsEntranceResult>;\n  bulkCreateStudentsEntranceResults(results: InsertStudentsEntranceResult[]): Promise<StudentsEntranceResult[]>;\n  updateStudentPreferences(studentId: string, preferences: {\n    choice1?: string; choice2?: string; choice3?: string; choice4?: string; choice5?: string;\n    choice6?: string; choice7?: string; choice8?: string; choice9?: string; choice10?: string;\n    counselingDistrict?: string; districtAdmin?: string;\n  }): Promise<Student>;\n  checkStudentDistrictConflict(studentId: string, newDistrict: string): Promise<{hasConflict: boolean, currentDistrict?: string}>;\n  releaseAssignment(studentId: string): Promise<Student>;\n\n  // Vacancy operations\n  getVacancies(): Promise<Vacancy[]>;\n  getVacancyByDistrict(district: string): Promise<Vacancy | undefined>;\n  createVacancy(vacancy: InsertVacancy): Promise<Vacancy>;\n  updateVacancy(id: string, vacancy: Partial<InsertVacancy>): Promise<Vacancy>;\n  bulkUpsertVacancies(vacancies: InsertVacancy[]): Promise<Vacancy[]>;\n  deleteAllVacancies(): Promise<void>;\n\n  // Settings operations\n  getSetting(key: string): Promise<Setting | undefined>;\n  setSetting(setting: InsertSetting): Promise<Setting>;\n  getSettings(): Promise<Setting[]>;\n\n  // Audit log operations\n  createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(limit?: number, offset?: number): Promise<AuditLog[]>;\n  getAuditLogsByUser(userId: string, limit?: number): Promise<AuditLog[]>;\n\n  // File upload operations\n  createFileUpload(fileUpload: InsertFileUpload): Promise<FileUpload>;\n  getFileUploads(limit?: number): Promise<FileUpload[]>;\n  updateFileUpload(id: string, fileUpload: Partial<InsertFileUpload>): Promise<FileUpload>;\n  getFileUploadsByType(type: string): Promise<FileUpload[]>;\n\n  // District status operations\n  getDistrictStatus(district: string): Promise<DistrictStatus | undefined>;\n  getAllDistrictStatuses(): Promise<DistrictStatus[]>;\n  createOrUpdateDistrictStatus(status: InsertDistrictStatus): Promise<DistrictStatus>;\n  finalizeDistrict(district: string, userId: string): Promise<DistrictStatus>;\n\n  // Student locking operations\n  lockStudent(studentId: string, userId: string): Promise<Student>;\n  unlockStudent(studentId: string): Promise<Student>;\n  canEditStudent(studentId: string, userId: string): Promise<boolean>;\n  lockStudentForEdit(studentId: string, userId: string): Promise<{ success: boolean; message: string; student?: Student }>;\n  getStudentsByDistrict(district: string, limit?: number, offset?: number): Promise<{students: Student[], total: number}>;\n  autoLoadEntranceStudents(district: string): Promise<{ loaded: number; skipped: number }>;\n  releaseStudentFromDistrict(studentId: string): Promise<Student>;\n  fetchStudentToDistrict(studentId: string, counselingDistrict: string, districtAdmin: string): Promise<Student>;\n\n  // Unlock request operations\n  createUnlockRequest(request: InsertUnlockRequest): Promise<UnlockRequest>;\n  getUnlockRequests(): Promise<UnlockRequest[]>;\n  getUnlockRequestsByDistrict(district: string): Promise<UnlockRequest[]>;\n  updateUnlockRequest(id: string, updates: Partial<UnlockRequest>): Promise<UnlockRequest>;\n  getPendingUnlockRequests(): Promise<UnlockRequest[]>;\n\n  // Statistics\n  getDashboardStats(): Promise<{\n    totalStudents: number;\n    totalVacancies: number;\n    pendingAllocations: number;\n    completionRate: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username.toLowerCase()));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return db.select().from(users).orderBy(asc(users.username));\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, updatedAt: new Date() })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, insertUser: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...insertUser, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Student operations\n  async getStudents(limit = 50, offset = 0): Promise<Student[]> {\n    return db.select().from(students)\n      .orderBy(asc(students.meritNumber))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getStudent(id: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.id, id));\n    return student;\n  }\n\n  async getStudentByMeritNumber(meritNumber: number): Promise<Student | undefined> {\n    const [student] = await db.select().from(students)\n      .where(eq(students.meritNumber, meritNumber));\n    return student;\n  }\n\n  async createStudent(student: InsertStudent): Promise<Student> {\n    const [created] = await db\n      .insert(students)\n      .values({ ...student, updatedAt: new Date() })\n      .returning();\n    return created;\n  }\n\n  async updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student> {\n    const [updated] = await db\n      .update(students)\n      .set({ ...student, updatedAt: new Date() })\n      .where(eq(students.id, id))\n      .returning();\n    return updated;\n  }\n\n  async bulkCreateStudents(studentsList: InsertStudent[]): Promise<Student[]> {\n    return db\n      .insert(students)\n      .values(studentsList.map(s => ({ ...s, updatedAt: new Date() })))\n      .returning();\n  }\n\n  async deleteAllStudents(): Promise<void> {\n    await db.delete(students);\n  }\n\n  async getStudentsCount(): Promise<number> {\n    const [result] = await db.select({ count: sql<number>`count(*)` }).from(students);\n    return result.count;\n  }\n\n  async getStudentsByStatus(status: string): Promise<Student[]> {\n    return db.select().from(students)\n      .where(eq(students.allocationStatus, status))\n      .orderBy(asc(students.meritNumber));\n  }\n\n  // Students entrance result operations\n  async getStudentsEntranceResults(limit = 50, offset = 0): Promise<StudentsEntranceResult[]> {\n    return db.select().from(studentsEntranceResult)\n      .orderBy(asc(studentsEntranceResult.meritNo))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getStudentsEntranceResult(id: string): Promise<StudentsEntranceResult | undefined> {\n    const [result] = await db.select().from(studentsEntranceResult).where(eq(studentsEntranceResult.id, id));\n    return result;\n  }\n\n  async getStudentsEntranceResultByMeritNumber(meritNumber: number): Promise<StudentsEntranceResult | undefined> {\n    const [result] = await db.select().from(studentsEntranceResult).where(eq(studentsEntranceResult.meritNo, meritNumber));\n    return result;\n  }\n\n  async getStudentsEntranceResultsCount(): Promise<number> {\n    const [result] = await db.select({ count: sql<number>`count(*)` }).from(studentsEntranceResult);\n    return result.count;\n  }\n\n  async searchStudentsEntranceResults(query: string): Promise<StudentsEntranceResult[]> {\n    return db.select().from(studentsEntranceResult)\n      .where(\n        or(\n          ilike(studentsEntranceResult.studentName, `%${query}%`),\n          ilike(studentsEntranceResult.applicationNo, `%${query}%`),\n          ilike(studentsEntranceResult.rollNo, `%${query}%`),\n          sql`${studentsEntranceResult.meritNo}::text ILIKE ${'%' + query + '%'}`\n        )\n      )\n      .orderBy(asc(studentsEntranceResult.meritNo))\n      .limit(20);\n  }\n\n  async createStudentsEntranceResult(result: InsertStudentsEntranceResult): Promise<StudentsEntranceResult> {\n    const [created] = await db\n      .insert(studentsEntranceResult)\n      .values({ ...result, updatedAt: new Date() })\n      .returning();\n    return created;\n  }\n\n  async bulkCreateStudentsEntranceResults(results: InsertStudentsEntranceResult[]): Promise<StudentsEntranceResult[]> {\n    return db\n      .insert(studentsEntranceResult)\n      .values(results.map(r => ({ ...r, updatedAt: new Date() })))\n      .returning();\n  }\n\n  async updateStudentsEntranceResult(id: string, updateData: Partial<InsertStudentsEntranceResult>): Promise<StudentsEntranceResult> {\n    const [updated] = await db\n      .update(studentsEntranceResult)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(studentsEntranceResult.id, id))\n      .returning();\n    return updated;\n  }\n\n  async updateStudentPreferences(studentId: string, preferences: {\n    choice1?: string; choice2?: string; choice3?: string; choice4?: string; choice5?: string;\n    choice6?: string; choice7?: string; choice8?: string; choice9?: string; choice10?: string;\n    counselingDistrict?: string; districtAdmin?: string;\n  }): Promise<Student> {\n    const [updated] = await db\n      .update(students)\n      .set({ ...preferences, updatedAt: new Date() })\n      .where(eq(students.id, studentId))\n      .returning();\n    return updated;\n  }\n\n  async releaseAssignment(studentId: string): Promise<Student> {\n    const [updated] = await db\n      .update(students)\n      .set({ \n        counselingDistrict: null, \n        districtAdmin: null,\n        updatedAt: new Date() \n      })\n      .where(eq(students.id, studentId))\n      .returning();\n    return updated;\n  }\n\n  // Vacancy operations\n  async getVacancies(): Promise<Vacancy[]> {\n    return db.select().from(vacancies).orderBy(asc(vacancies.district));\n  }\n\n  async getVacancyByDistrict(district: string): Promise<Vacancy | undefined> {\n    const [vacancy] = await db.select().from(vacancies)\n      .where(eq(vacancies.district, district));\n    return vacancy;\n  }\n\n  async createVacancy(vacancy: InsertVacancy): Promise<Vacancy> {\n    const [created] = await db\n      .insert(vacancies)\n      .values({ ...vacancy, updatedAt: new Date() })\n      .returning();\n    return created;\n  }\n\n  async updateVacancy(id: string, vacancy: Partial<InsertVacancy>): Promise<Vacancy> {\n    const [updated] = await db\n      .update(vacancies)\n      .set({ ...vacancy, updatedAt: new Date() })\n      .where(eq(vacancies.id, id))\n      .returning();\n    return updated;\n  }\n\n  async bulkUpsertVacancies(vacanciesList: InsertVacancy[]): Promise<Vacancy[]> {\n    const results = [];\n    for (const vacancy of vacanciesList) {\n      const [result] = await db\n        .insert(vacancies)\n        .values({ ...vacancy, updatedAt: new Date() })\n        .onConflictDoUpdate({\n          target: [vacancies.district, vacancies.stream, vacancies.gender, vacancies.category],\n          set: { \n            totalSeats: vacancy.totalSeats,\n            availableSeats: vacancy.availableSeats,\n            updatedAt: new Date(),\n          },\n        })\n        .returning();\n      results.push(result);\n    }\n    return results;\n  }\n\n  async deleteAllVacancies(): Promise<void> {\n    await db.delete(vacancies);\n  }\n\n  // Settings operations\n  async getSetting(key: string): Promise<Setting | undefined> {\n    const [setting] = await db.select().from(settings)\n      .where(eq(settings.key, key));\n    return setting;\n  }\n\n  async setSetting(setting: InsertSetting): Promise<Setting> {\n    const [result] = await db\n      .insert(settings)\n      .values({ ...setting, updatedAt: new Date() })\n      .onConflictDoUpdate({\n        target: settings.key,\n        set: {\n          value: setting.value,\n          description: setting.description,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  async getSettings(): Promise<Setting[]> {\n    return db.select().from(settings).orderBy(asc(settings.key));\n  }\n\n  // Audit log operations\n  async createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog> {\n    const [created] = await db\n      .insert(auditLogs)\n      .values(auditLog)\n      .returning();\n    return created;\n  }\n\n  async getAuditLogs(limit = 50, offset = 0): Promise<AuditLog[]> {\n    return db.select().from(auditLogs)\n      .orderBy(desc(auditLogs.timestamp))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getAuditLogsByUser(userId: string, limit = 50): Promise<AuditLog[]> {\n    return db.select().from(auditLogs)\n      .where(eq(auditLogs.userId, userId))\n      .orderBy(desc(auditLogs.timestamp))\n      .limit(limit);\n  }\n\n  // File upload operations\n  async createFileUpload(fileUpload: InsertFileUpload): Promise<FileUpload> {\n    const [created] = await db\n      .insert(fileUploads)\n      .values(fileUpload)\n      .returning();\n    return created;\n  }\n\n  async getFileUploads(limit = 50): Promise<FileUpload[]> {\n    return db.select().from(fileUploads)\n      .orderBy(desc(fileUploads.createdAt))\n      .limit(limit);\n  }\n\n  async updateFileUpload(id: string, fileUpload: Partial<InsertFileUpload>): Promise<FileUpload> {\n    const [updated] = await db\n      .update(fileUploads)\n      .set(fileUpload)\n      .where(eq(fileUploads.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getFileUploadsByType(type: string): Promise<FileUpload[]> {\n    return db.select().from(fileUploads)\n      .where(eq(fileUploads.type, type))\n      .orderBy(desc(fileUploads.createdAt));\n  }\n\n  // Statistics\n  async getDashboardStats(): Promise<{\n    totalStudents: number;\n    totalVacancies: number;\n    pendingAllocations: number;\n    completionRate: number;\n  }> {\n    // Get total students from entrance results (all students who took the entrance exam)\n    const [entranceResultsCount] = await db.select({ count: sql<number>`count(*)` }).from(studentsEntranceResult);\n    \n    // Get allocation status counts from students table (only those with preferences set)\n    const [studentsWithPreferencesCount] = await db.select({ count: sql<number>`count(*)` }).from(students);\n    const [pendingCount] = await db.select({ count: sql<number>`count(*)` })\n      .from(students)\n      .where(eq(students.allocationStatus, 'pending'));\n    const [allottedCount] = await db.select({ count: sql<number>`count(*)` })\n      .from(students)\n      .where(eq(students.allocationStatus, 'allotted'));\n    const [notAllottedCount] = await db.select({ count: sql<number>`count(*)` })\n      .from(students)\n      .where(eq(students.allocationStatus, 'not_allotted'));\n\n    const vacancyResults = await db.select({\n      total: sql<number>`sum(total_seats)`\n    }).from(vacancies);\n\n    const totalVacancies = vacancyResults[0]?.total || 0;\n    const totalStudents = entranceResultsCount.count; // Use entrance results count\n    // Pending allocations = students without preferences + students with pending status\n    const studentsWithoutPreferences = totalStudents - studentsWithPreferencesCount.count;\n    const pendingAllocations = studentsWithoutPreferences + pendingCount.count;\n    const completionRate = totalStudents > 0 ? (allottedCount.count / totalStudents) * 100 : 0;\n\n    return {\n      totalStudents, // Total from entrance results\n      totalVacancies,\n      pendingAllocations, // Students without preferences + pending students\n      completionRate: Math.round(completionRate * 10) / 10,\n    };\n  }\n\n  // District status operations\n  async getDistrictStatus(district: string): Promise<DistrictStatus | undefined> {\n    const [status] = await db.select().from(districtStatus).where(eq(districtStatus.district, district));\n    return status;\n  }\n\n  async getAllDistrictStatuses(): Promise<DistrictStatus[]> {\n    return db.select().from(districtStatus).orderBy(asc(districtStatus.district));\n  }\n\n  async createOrUpdateDistrictStatus(status: InsertDistrictStatus): Promise<DistrictStatus> {\n    const existing = await this.getDistrictStatus(status.district);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(districtStatus)\n        .set({ ...status, updatedAt: new Date() })\n        .where(eq(districtStatus.district, status.district))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(districtStatus)\n        .values({ ...status, updatedAt: new Date() })\n        .returning();\n      return created;\n    }\n  }\n\n  async finalizeDistrict(district: string, userId: string): Promise<DistrictStatus> {\n    // Get current district student stats for the status record\n    const districtStudents = await this.getStudentsByDistrict(district);\n    \n    // Only consider students that belong to this district AND have district admin assigned AND have preference data\n    const eligibleStudents = districtStudents.students.filter(s => \n      s.counselingDistrict === district && s.districtAdmin && s.choice1 // Must belong to district, have district admin and at least first choice\n    );\n    \n    const lockedEligibleStudents = eligibleStudents.filter(s => s.isLocked).length;\n    const studentsWithChoices = districtStudents.students.filter(s => s.choice1).length;\n\n    // Create or update district status with finalization\n    const statusData: InsertDistrictStatus = {\n      district,\n      isFinalized: true,\n      totalStudents: eligibleStudents.length, // Only count eligible students\n      lockedStudents: lockedEligibleStudents,\n      studentsWithChoices,\n      finalizedBy: userId,\n      finalizedAt: new Date(),\n    };\n\n    return await this.createOrUpdateDistrictStatus(statusData);\n  }\n\n  // Student locking operations\n  async lockStudent(studentId: string, userId: string): Promise<Student> {\n    const [updated] = await db\n      .update(students)\n      .set({ \n        isLocked: true, \n        lockedBy: userId, \n        lockedAt: new Date(),\n        updatedAt: new Date() \n      })\n      .where(eq(students.id, studentId))\n      .returning();\n    return updated;\n  }\n\n  async unlockStudent(studentId: string): Promise<Student> {\n    const [updated] = await db\n      .update(students)\n      .set({ \n        isLocked: false, \n        lockedBy: null, \n        lockedAt: null,\n        updatedAt: new Date() \n      })\n      .where(eq(students.id, studentId))\n      .returning();\n    return updated;\n  }\n\n  // Check if a user can edit a specific student (exclusive lock system)\n  async canEditStudent(studentId: string, userId: string): Promise<boolean> {\n    const [student] = await db.select().from(students).where(eq(students.id, studentId));\n    if (!student) return false;\n    \n    // Student can be edited if:\n    // 1. Not locked by anyone (lockedBy is null)\n    // 2. OR locked by the same user requesting to edit\n    return !student.lockedBy || student.lockedBy === userId;\n  }\n\n  // Attempt to lock a student for exclusive editing\n  async lockStudentForEdit(studentId: string, userId: string): Promise<{ success: boolean; message: string; student?: Student }> {\n    const [student] = await db.select().from(students).where(eq(students.id, studentId));\n    if (!student) {\n      return { success: false, message: \"Student not found\" };\n    }\n\n    // Check if student is already locked by another user\n    if (student.lockedBy && student.lockedBy !== userId) {\n      const [lockingUser] = await db.select({ username: users.username })\n        .from(users)\n        .where(eq(users.id, student.lockedBy));\n      \n      return { \n        success: false, \n        message: `Student is currently being edited by ${lockingUser?.username || 'another admin'}. Please try again later.` \n      };\n    }\n\n    // Lock the student for this user\n    const [updated] = await db\n      .update(students)\n      .set({ \n        isLocked: true, \n        lockedBy: userId, \n        lockedAt: new Date(),\n        updatedAt: new Date() \n      })\n      .where(eq(students.id, studentId))\n      .returning();\n\n    return { success: true, message: \"Student locked for editing\", student: updated };\n  }\n\n  async getStudentsByDistrict(district: string, limit = 50, offset = 0): Promise<{students: Student[], total: number}> {\n    // District admins can see:\n    // 1. Students assigned to their district (counselingDistrict = district)\n    // 2. Students not assigned to any district (counselingDistrict is null)\n    // 3. Students that are not released (isReleased = false)\n    const studentsResult = await db.select().from(students)\n      .where(and(\n        or(\n          eq(students.counselingDistrict, district),\n          sql`${students.counselingDistrict} IS NULL`\n        ),\n        eq(students.isReleased, false)\n      ))\n      .orderBy(asc(students.meritNumber))\n      .limit(limit)\n      .offset(offset);\n    \n    const [countResult] = await db.select({ count: sql<number>`count(*)` })\n      .from(students)\n      .where(and(\n        or(\n          eq(students.counselingDistrict, district),\n          sql`${students.counselingDistrict} IS NULL`\n        ),\n        eq(students.isReleased, false)\n      ));\n    \n    return {\n      students: studentsResult,\n      total: countResult.count\n    };\n  }\n\n  async autoLoadEntranceStudents(district: string): Promise<{ loaded: number; skipped: number }> {\n    // Get all entrance exam results\n    const entranceResults = await db.select().from(studentsEntranceResult)\n      .orderBy(asc(studentsEntranceResult.meritNo));\n\n    // Check which students already exist in the preference table\n    const existingStudents = await db.select({ appNo: students.appNo })\n      .from(students);\n    const existingAppNos = new Set(existingStudents.map(s => s.appNo));\n\n    // Filter out students that already exist\n    const newStudents = entranceResults.filter(result => !existingAppNos.has(result.applicationNo));\n\n    if (newStudents.length === 0) {\n      return { loaded: 0, skipped: entranceResults.length };\n    }\n\n    // Convert entrance results to student preference records\n    const studentsToInsert = newStudents.map(result => ({\n      appNo: result.applicationNo,\n      meritNumber: result.meritNo,\n      rollNo: result.rollNo,\n      name: result.studentName,\n      marks: result.marks,\n      gender: result.gender,\n      category: result.category,\n      stream: result.stream || 'NonMedical', // Default to NonMedical if not specified\n      counselingDistrict: district,\n      choice1: '',\n      choice2: '',\n      choice3: '',\n      choice4: '',\n      choice5: '',\n      choice6: '',\n      choice7: '',\n      choice8: '',\n      choice9: '',\n      choice10: '',\n      isLocked: false,\n      isReleased: false,\n      allocationStatus: 'pending',\n    }));\n\n    // Insert the new student records\n    const inserted = await db.insert(students)\n      .values(studentsToInsert)\n      .returning();\n\n    return { \n      loaded: inserted.length, \n      skipped: entranceResults.length - newStudents.length \n    };\n  }\n\n  async releaseStudentFromDistrict(studentId: string): Promise<Student> {\n    const [updated] = await db\n      .update(students)\n      .set({\n        counselingDistrict: null,\n        districtAdmin: null,\n        isLocked: false,\n        lockedBy: null,\n        lockedAt: null,\n        isReleased: false, // Set to false so student appears in other district admin's lists\n        updatedAt: new Date()\n      })\n      .where(eq(students.id, studentId))\n      .returning();\n    return updated;\n  }\n\n  async fetchStudentToDistrict(studentId: string, counselingDistrict: string, districtAdmin: string): Promise<Student> {\n    const [updated] = await db\n      .update(students)\n      .set({\n        counselingDistrict: counselingDistrict,\n        districtAdmin: districtAdmin,\n        isReleased: false,\n        stream: sql`COALESCE(${students.stream}, 'Non-Medical')`, // Set default stream to Non-Medical if null\n        updatedAt: new Date()\n      })\n      .where(eq(students.id, studentId))\n      .returning();\n    return updated;\n  }\n\n  async checkStudentDistrictConflict(studentId: string, newDistrict: string): Promise<{hasConflict: boolean, currentDistrict?: string}> {\n    const student = await this.getStudent(studentId);\n    \n    if (!student) {\n      return { hasConflict: false };\n    }\n\n    // Check if student is already allotted to a district\n    if (student.allottedDistrict) {\n      return { \n        hasConflict: true, \n        currentDistrict: student.allottedDistrict \n      };\n    }\n\n    // Check if student is already selected by another district (and not released)\n    if (student.counselingDistrict && student.counselingDistrict !== newDistrict && !student.isReleased) {\n      return { \n        hasConflict: true, \n        currentDistrict: student.counselingDistrict \n      };\n    }\n\n    return { hasConflict: false };\n  }\n\n  // Unlock request operations\n  async createUnlockRequest(request: InsertUnlockRequest): Promise<UnlockRequest> {\n    const [created] = await db.insert(unlockRequests).values(request).returning();\n    return created;\n  }\n\n  async getUnlockRequests(): Promise<UnlockRequest[]> {\n    return db.select().from(unlockRequests).orderBy(desc(unlockRequests.createdAt));\n  }\n\n  async getUnlockRequestsByDistrict(district: string): Promise<UnlockRequest[]> {\n    return db.select({\n      id: unlockRequests.id,\n      studentId: unlockRequests.studentId,\n      requestedBy: unlockRequests.requestedBy,\n      reason: unlockRequests.reason,\n      status: unlockRequests.status,\n      reviewedBy: unlockRequests.reviewedBy,\n      reviewedAt: unlockRequests.reviewedAt,\n      reviewComments: unlockRequests.reviewComments,\n      createdAt: unlockRequests.createdAt,\n      updatedAt: unlockRequests.updatedAt,\n    }).from(unlockRequests)\n      .innerJoin(students, eq(unlockRequests.studentId, students.id))\n      .where(eq(students.counselingDistrict, district))\n      .orderBy(desc(unlockRequests.createdAt));\n  }\n\n  async updateUnlockRequest(id: string, updates: Partial<UnlockRequest>): Promise<UnlockRequest> {\n    const [updated] = await db\n      .update(unlockRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(unlockRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getPendingUnlockRequests(): Promise<UnlockRequest[]> {\n    return db.select().from(unlockRequests)\n      .where(eq(unlockRequests.status, 'pending'))\n      .orderBy(desc(unlockRequests.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":28537},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    host: \"0.0.0.0\",\n    port: 5000,\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2300},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table for authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").notNull().unique(),\n  email: varchar(\"email\"),\n  password: text(\"password\").notNull(),\n  role: varchar(\"role\").notNull(), // 'central_admin' | 'district_admin'\n  district: varchar(\"district\"), // null for central_admin\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  credentials: jsonb(\"credentials\"), // Store credentials data from credentials.json\n  isBlocked: boolean(\"is_blocked\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Students entrance results table\nexport const studentsEntranceResult = pgTable(\"students_entrance_result\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  meritNo: integer(\"merit_no\").notNull().unique(),\n  applicationNo: varchar(\"application_no\").notNull().unique(),\n  rollNo: varchar(\"roll_no\").notNull().unique(),\n  studentName: varchar(\"student_name\").notNull(),\n  marks: integer(\"marks\").notNull(),\n  gender: varchar(\"gender\").notNull(), // 'Male' | 'Female' | 'Other'\n  category: varchar(\"category\").notNull(), // 'Open' | 'WHH' | 'Disabled' | 'Private'\n  stream: varchar(\"stream\"), // 'Medical' | 'Commerce' | 'NonMedical' - optional field\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appNo: varchar(\"app_no\").notNull().unique(), // Application number as first data column\n  meritNumber: integer(\"merit_number\").notNull().unique(),\n  name: varchar(\"name\").notNull(),\n  gender: varchar(\"gender\").notNull(), // 'Male' | 'Female' | 'Other'\n  category: varchar(\"category\").notNull(), // 'Open' | 'WHH' | 'Disabled' | 'Private'\n  stream: varchar(\"stream\").notNull(), // 'Medical' | 'Commerce' | 'NonMedical'\n  choice1: varchar(\"choice1\"),\n  choice2: varchar(\"choice2\"),\n  choice3: varchar(\"choice3\"),\n  choice4: varchar(\"choice4\"),\n  choice5: varchar(\"choice5\"),\n  choice6: varchar(\"choice6\"),\n  choice7: varchar(\"choice7\"),\n  choice8: varchar(\"choice8\"),\n  choice9: varchar(\"choice9\"),\n  choice10: varchar(\"choice10\"),\n  counselingDistrict: varchar(\"counseling_district\"), // District where counseling was done\n  districtAdmin: varchar(\"district_admin\"), // Name of the district admin who set preferences\n  allottedDistrict: varchar(\"allotted_district\"),\n  allottedStream: varchar(\"allotted_stream\"),\n  allocationStatus: varchar(\"allocation_status\").default('pending'), // 'pending' | 'allotted' | 'not_allotted'\n  isLocked: boolean(\"is_locked\").default(false), // Whether preferences are locked for editing\n  lockedBy: varchar(\"locked_by\"), // User ID of the admin who has exclusive edit lock\n  lockedAt: timestamp(\"locked_at\"), // When the student was locked for editing\n  isReleased: boolean(\"is_released\").default(false), // Whether student is released from district\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Vacancies table\nexport const vacancies = pgTable(\"vacancies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  district: varchar(\"district\").notNull(),\n  stream: varchar(\"stream\").notNull(), // 'Medical' | 'Commerce' | 'NonMedical'\n  gender: varchar(\"gender\").notNull(), // 'Male' | 'Female' | 'Other'\n  category: varchar(\"category\").notNull(), // 'Open' | 'WHH' | 'Disabled' | 'Private'\n  totalSeats: integer(\"total_seats\").default(0),\n  availableSeats: integer(\"available_seats\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  unique().on(table.district, table.stream, table.gender, table.category)\n]);\n\n// District status table for tracking finalization\nexport const districtStatus = pgTable(\"district_status\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  district: varchar(\"district\").notNull().unique(),\n  isFinalized: boolean(\"is_finalized\").default(false),\n  totalStudents: integer(\"total_students\").default(0),\n  lockedStudents: integer(\"locked_students\").default(0),\n  studentsWithChoices: integer(\"students_with_choices\").default(0),\n  finalizedBy: varchar(\"finalized_by\").references(() => users.id),\n  finalizedAt: timestamp(\"finalized_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Settings table for system configuration\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Audit logs table for compliance tracking\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  action: varchar(\"action\").notNull(),\n  resource: varchar(\"resource\").notNull(),\n  resourceId: varchar(\"resource_id\"),\n  details: jsonb(\"details\"),\n  ipAddress: varchar(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// File uploads table\nexport const fileUploads = pgTable(\"file_uploads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: varchar(\"filename\").notNull(),\n  originalName: varchar(\"original_name\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  type: varchar(\"type\").notNull(), // 'student_choices' | 'vacancies'\n  status: varchar(\"status\").default('uploaded'), // 'uploaded' | 'validated' | 'processed' | 'failed'\n  validationResults: jsonb(\"validation_results\"),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Unlock requests table for district admin unlock requests\nexport const unlockRequests = pgTable(\"unlock_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  requestedBy: varchar(\"requested_by\").references(() => users.id).notNull(),\n  reason: text(\"reason\").notNull(),\n  status: varchar(\"status\").default('pending'), // 'pending' | 'approved' | 'rejected'\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewComments: text(\"review_comments\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  auditLogs: many(auditLogs),\n  fileUploads: many(fileUploads),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [auditLogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const fileUploadsRelations = relations(fileUploads, ({ one }) => ({\n  uploadedByUser: one(users, {\n    fields: [fileUploads.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const districtStatusRelations = relations(districtStatus, ({ one }) => ({\n  finalizedByUser: one(users, {\n    fields: [districtStatus.finalizedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentsEntranceResultSchema = createInsertSchema(studentsEntranceResult).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertVacancySchema = createInsertSchema(vacancies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSettingSchema = createInsertSchema(settings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertFileUploadSchema = createInsertSchema(fileUploads).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUnlockRequestSchema = createInsertSchema(unlockRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDistrictStatusSchema = createInsertSchema(districtStatus).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type StudentsEntranceResult = typeof studentsEntranceResult.$inferSelect;\nexport type InsertStudentsEntranceResult = z.infer<typeof insertStudentsEntranceResultSchema>;\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type Vacancy = typeof vacancies.$inferSelect;\nexport type InsertVacancy = z.infer<typeof insertVacancySchema>;\nexport type Setting = typeof settings.$inferSelect;\nexport type InsertSetting = z.infer<typeof insertSettingSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type FileUpload = typeof fileUploads.$inferSelect;\nexport type InsertFileUpload = z.infer<typeof insertFileUploadSchema>;\nexport type UnlockRequest = typeof unlockRequests.$inferSelect;\nexport type InsertUnlockRequest = z.infer<typeof insertUnlockRequestSchema>;\nexport type DistrictStatus = typeof districtStatus.$inferSelect;\nexport type InsertDistrictStatus = z.infer<typeof insertDistrictStatusSchema>;\n\n// Constants - All 23 districts of Punjab (Counseling Districts)\nexport const DISTRICTS = [\n  'Amritsar',\n  'Barnala', \n  'Bathinda',\n  'Faridkot',\n  'Fatehgarh Sahib',\n  'Fazilka',\n  'Ferozepur',\n  'Gurdaspur',\n  'Hoshiarpur',\n  'Jalandhar',\n  'Kapurthala',\n  'Ludhiana',\n  'Mansa',\n  'Moga',\n  'Muktsar',\n  'Nawanshahr',\n  'Pathankot',\n  'Patiala',\n  'Rupnagar',\n  'SAS Nagar',\n  'Sangrur',\n  'Tarn Taran',\n  'Talwara'\n] as const;\n\n// School Districts - Only 10 districts have schools\nexport const SCHOOL_DISTRICTS = [\n  'Amritsar',\n  'Bathinda', \n  'Ferozepur',\n  'Gurdaspur',\n  'Jalandhar',\n  'Ludhiana',\n  'Patiala',\n  'Pathankot',\n  'SAS Nagar',\n  'Sangrur'\n] as const;\n\n// Counseling Districts - All 23 districts with district admins\nexport const COUNSELING_DISTRICTS = DISTRICTS;\n\nexport const STREAMS = ['Medical', 'Commerce', 'NonMedical'] as const;\nexport const GENDERS = ['Male', 'Female', 'Other'] as const;\nexport const CATEGORIES = ['Open', 'WHH', 'Disabled', 'Private'] as const;\nexport const USER_ROLES = ['central_admin', 'district_admin'] as const;\n\n// Gender-specific categories\nexport const FEMALE_CATEGORIES = ['WHH', 'Private', 'Disabled', 'Open'] as const;\nexport const MALE_CATEGORIES = ['Private', 'Open', 'Disabled'] as const;\n\n// Helper function to get categories based on gender\nexport function getCategoriesForGender(gender: string): readonly string[] {\n  if (gender === 'Female') {\n    return FEMALE_CATEGORIES;\n  }\n  return MALE_CATEGORIES;\n}\n","size_bytes":11942},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport FileManagement from \"@/pages/file-management\";\nimport Students from \"@/pages/students\";\nimport Vacancies from \"@/pages/vacancies\";\nimport Allocation from \"@/pages/allocation\";\nimport ExportResults from \"@/pages/export-results\";\nimport AuditLog from \"@/pages/audit-log\";\nimport DistrictAdmin from \"@/pages/district-admin\";\nimport DistrictAdminList from \"@/pages/district-admin-list\";\nimport StudentDetails from \"@/pages/student-details\";\nimport Reports from \"@/pages/reports\";\nimport ManageDistrictAdmins from \"@/pages/manage-district-admins\";\nimport StudentPreferenceManagement from \"@/pages/student-preference-management\";\nimport Profile from \"@/pages/profile\";\nimport Notifications from \"@/pages/notifications\";\nimport DistrictAnalysis from \"@/pages/district-analysis\";\nimport MainLayout from \"@/components/layout/main-layout\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Login />;\n  }\n\n  return (\n    <MainLayout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/file-management\" component={FileManagement} />\n        <Route path=\"/students\" component={Students} />\n        <Route path=\"/vacancies\" component={Vacancies} />\n        <Route path=\"/allocation\" component={Allocation} />\n        <Route path=\"/export-results\" component={ExportResults} />\n        <Route path=\"/reports\" component={Reports} />\n        <Route path=\"/audit-log\" component={AuditLog} />\n        <Route path=\"/district-admin\" component={DistrictAdmin} />\n        <Route path=\"/district-admin-list\" component={DistrictAdminList} />\n        <Route path=\"/manage-district-admins\" component={ManageDistrictAdmins} />\n        <Route path=\"/student-preference-management\" component={StudentPreferenceManagement} />\n        <Route path=\"/notifications\" component={Notifications} />\n        <Route path=\"/district-analysis\" component={DistrictAnalysis} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/student/:id\" component={StudentDetails} />\n        <Route component={NotFound} />\n      </Switch>\n    </MainLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3005},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/allocationService.ts":{"content":"import { IStorage } from '../storage';\nimport { Student, Vacancy, StudentsEntranceResult } from '@shared/schema';\n\nexport class AllocationService {\n  constructor(private storage: IStorage) {}\n\n  async runAllocation(): Promise<{\n    totalStudents: number;\n    allottedStudents: number;\n    notAllottedStudents: number;\n    allocationsByDistrict: Record<string, number>;\n  }> {\n    // Get all students with preferences and their entrance results\n    const students = await this.storage.getStudents(10000, 0);\n    const entranceResults = await this.storage.getStudentsEntranceResults(10000, 0);\n    const vacancies = await this.storage.getVacancies();\n\n    // Create vacancy map for district->stream->gender->category tracking\n    // Key format: \"district|stream|gender|category\"\n    const vacancyMap = new Map<string, number>();\n\n    // Initialize vacancy map with current vacancies\n    vacancies.forEach(vacancy => {\n      const key = `${vacancy.district}|${vacancy.stream}|${vacancy.gender}|${vacancy.category}`;\n      vacancyMap.set(key, vacancy.availableSeats || 0);\n    });\n\n    // Create entrance result map for easy lookup by application number\n    const entranceResultMap = new Map<string, StudentsEntranceResult>();\n    entranceResults.forEach(result => {\n      if (result.applicationNo) {\n        entranceResultMap.set(result.applicationNo, result);\n      }\n    });\n\n    // Filter students who have preferences and valid entrance results, then sort by merit number (ascending = better rank)\n    const eligibleStudents = students\n      .filter(student => {\n        // Must have app number and at least one choice\n        if (!student.appNo || !student.choice1) return false;\n        \n        // Must have corresponding entrance result\n        const entranceResult = entranceResultMap.get(student.appNo);\n        return !!entranceResult;\n      })\n      .sort((a, b) => a.meritNumber - b.meritNumber); // Lower merit number = better rank\n\n    const allocationsByDistrict: Record<string, number> = {};\n    let allottedCount = 0;\n    let notAllottedCount = 0;\n\n    // Process students in merit order (best to worst)\n    for (const student of eligibleStudents) {\n      const entranceResult = entranceResultMap.get(student.appNo);\n      if (!entranceResult) continue;\n\n      let allocated = false;\n\n      // Check each choice from 1 to 10\n      for (let i = 1; i <= 10; i++) {\n        const choice = (student as any)[`choice${i}`];\n        if (!choice) continue;\n\n        // STRICT MATCHING: Create vacancy key using exact gender and category combination\n        // Student can ONLY be allocated if there's a seat available for their exact:\n        // - District (choice), Stream (preference), Gender, and Category combination\n        const vacancyKey = `${choice}|${student.stream}|${entranceResult.gender}|${entranceResult.category}`;\n        const availableSeats = vacancyMap.get(vacancyKey);\n        \n        // STRICT CONSTRAINT: Only allocate if exact gender/category/stream/district combination has seats\n        // No fallback to other categories or genders - student gets NO ALLOCATION if their \n        // specific category is full, even if other categories have seats\n        if (availableSeats && availableSeats > 0) {\n          // Allocate the seat with strict constraints satisfied\n          await this.storage.updateStudent(student.id, {\n            allottedDistrict: choice,\n            allottedStream: student.stream,\n            allocationStatus: 'allotted',\n          });\n\n          // Reduce vacancy count for this exact combination\n          vacancyMap.set(vacancyKey, availableSeats - 1);\n          \n          // Update statistics\n          allottedCount++;\n          allocationsByDistrict[choice] = (allocationsByDistrict[choice] || 0) + 1;\n          allocated = true;\n          break;\n        }\n        // If no seats available for exact gender/category combination, continue to next choice\n        // No cross-category or cross-gender allocation allowed\n      }\n\n      if (!allocated) {\n        // Mark as not allotted\n        await this.storage.updateStudent(student.id, {\n          allocationStatus: 'not_allotted',\n        });\n        notAllottedCount++;\n      }\n    }\n\n    return {\n      totalStudents: eligibleStudents.length,\n      allottedStudents: allottedCount,\n      notAllottedStudents: notAllottedCount,\n      allocationsByDistrict,\n    };\n  }\n\n\n}","size_bytes":4385},"server/services/auditService.ts":{"content":"import { IStorage } from '../storage';\nimport { InsertAuditLog } from '@shared/schema';\n\nexport class AuditService {\n  constructor(private storage: IStorage) {}\n\n  async log(\n    userId: string,\n    action: string,\n    resource: string,\n    resourceId: string,\n    details?: any,\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<void> {\n    const auditLog: InsertAuditLog = {\n      userId,\n      action,\n      resource,\n      resourceId,\n      details,\n      ipAddress,\n      userAgent,\n    };\n\n    await this.storage.createAuditLog(auditLog);\n  }\n}\n","size_bytes":561},"server/services/exportService.ts":{"content":"import { IStorage } from '../storage';\nimport PDFDocument from 'pdfkit';\n\nexport class ExportService {\n  constructor(private storage: IStorage) {}\n\n  async exportResultsAsCSV(): Promise<string> {\n    const students = await this.storage.getStudents(10000, 0); // Get all students\n    \n    const headers = [\n      'Merit Number',\n      'Application Number', \n      'Name',\n      'Stream',\n      'Choice 1', 'Choice 2', 'Choice 3', 'Choice 4', 'Choice 5',\n      'Choice 6', 'Choice 7', 'Choice 8', 'Choice 9', 'Choice 10',\n      'Allotted District',\n      'Allotted Stream',\n      'Status'\n    ];\n\n    const rows = students.map(student => [\n      student.meritNumber,\n      student.appNo || '',\n      student.name,\n      student.stream,\n      student.choice1 || '',\n      student.choice2 || '',\n      student.choice3 || '',\n      student.choice4 || '',\n      student.choice5 || '',\n      student.choice6 || '',\n      student.choice7 || '',\n      student.choice8 || '',\n      student.choice9 || '',\n      student.choice10 || '',\n      student.allottedDistrict || '',\n      student.allottedStream || '',\n      student.allocationStatus || 'pending'\n    ]);\n\n    const csvContent = [\n      headers.join(','),\n      ...rows.map(row => row.map(cell => `\"${cell}\"`).join(','))\n    ].join('\\n');\n\n    return csvContent;\n  }\n\n  async exportResultsAsPDF(): Promise<Buffer> {\n    const students = await this.storage.getStudents(10000, 0); // Get all students\n    const stats = await this.storage.getDashboardStats();\n    const vacancies = await this.storage.getVacancies();\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Create PDF in landscape mode for better readability\n        const doc = new PDFDocument({ size: 'A4', layout: 'landscape', margin: 50 });\n        const buffers: Buffer[] = [];\n\n        doc.on('data', buffers.push.bind(buffers));\n        doc.on('end', () => {\n          const pdfData = Buffer.concat(buffers);\n          resolve(pdfData);\n        });\n\n        // PAGE 1: SUMMARY DASHBOARD\n        this.generateSummaryPage(doc, students, stats, vacancies);\n        \n        // PAGE 2+: DETAILED STUDENT RECORDS\n        this.generateDetailedStudentRecords(doc, students);\n\n        doc.end();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private generateSummaryPage(doc: any, students: any[], stats: any, vacancies: any[]) {\n    const currentDate = new Date().toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long', \n      day: 'numeric'\n    });\n\n    // Header\n    doc.fontSize(24).fillColor('#2563eb').text('Punjab Seat Allotment System', { align: 'center' });\n    doc.fontSize(18).fillColor('#64748b').text('Summary Dashboard Report', { align: 'center' });\n    doc.moveDown();\n    doc.fontSize(12).fillColor('#374151').text(`Report Generated: ${currentDate}`, { align: 'center' });\n    doc.moveDown(2);\n\n    // Statistics Cards\n    const allottedStudents = students.filter(s => s.allocationStatus === 'allotted');\n    const notAllottedStudents = students.filter(s => s.allocationStatus === 'not_allotted');\n    \n    this.drawStatsCard(doc, 50, 150, 'Total Candidates', students.length.toString(), '#3b82f6');\n    this.drawStatsCard(doc, 200, 150, 'Students Allotted', allottedStudents.length.toString(), '#10b981');\n    this.drawStatsCard(doc, 350, 150, 'Students Not Allotted', notAllottedStudents.length.toString(), '#ef4444');\n    this.drawStatsCard(doc, 500, 150, 'Total Vacancies', stats.totalVacancies.toString(), '#8b5cf6');\n    this.drawStatsCard(doc, 650, 150, 'Completion Rate', `${Math.round((allottedStudents.length / students.length) * 100)}%`, '#f59e0b');\n\n    // District-wise allocation table\n    doc.moveDown(8);\n    doc.fontSize(16).fillColor('#1f2937').text('District-wise Allocation Summary', { align: 'center' });\n    doc.moveDown();\n    \n    this.generateDistrictTable(doc, students, vacancies);\n  }\n\n  private drawStatsCard(doc: any, x: number, y: number, title: string, value: string, color: string) {\n    // Card background\n    doc.rect(x, y, 120, 80).fillAndStroke('#f8fafc', '#e2e8f0');\n    \n    // Title\n    doc.fontSize(10).fillColor('#64748b').text(title, x + 10, y + 15, { width: 100, align: 'center' });\n    \n    // Value\n    doc.fontSize(20).fillColor(color).text(value, x + 10, y + 35, { width: 100, align: 'center' });\n  }\n\n  private generateDistrictTable(doc: any, students: any[], vacancies: any[]) {\n    // Group students by allotted district\n    const districtAllocations: { [key: string]: number } = {};\n    students.filter(s => s.allottedDistrict).forEach(student => {\n      if (student.allottedDistrict) {\n        districtAllocations[student.allottedDistrict] = (districtAllocations[student.allottedDistrict] || 0) + 1;\n      }\n    });\n\n    // Table headers\n    const startY = 320;\n    const colWidth = 120;\n    const rowHeight = 25;\n    \n    doc.fontSize(10).fillColor('#374151');\n    \n    // Header row\n    doc.rect(50, startY, colWidth * 6, rowHeight).fillAndStroke('#f1f5f9', '#d1d5db');\n    doc.text('District', 55, startY + 8);\n    doc.text('Students Allocated', 55 + colWidth, startY + 8);\n    doc.text('Medical Vacancies', 55 + colWidth * 2, startY + 8);\n    doc.text('Commerce Vacancies', 55 + colWidth * 3, startY + 8);\n    doc.text('Non-Medical Vacancies', 55 + colWidth * 4, startY + 8);\n    doc.text('Remaining Capacity', 55 + colWidth * 5, startY + 8);\n\n    // Data rows\n    let currentY = startY + rowHeight;\n    vacancies.forEach((vacancy, index) => {\n      const allocated = districtAllocations[vacancy.district] || 0;\n      const totalCapacity = (vacancy.medicalVacancies || 0) + (vacancy.commerceVacancies || 0) + (vacancy.nonMedicalVacancies || 0);\n      const remaining = totalCapacity - allocated;\n      \n      // Alternate row colors\n      if (index % 2 === 0) {\n        doc.rect(50, currentY, colWidth * 6, rowHeight).fillAndStroke('#fafafa', '#e5e7eb');\n      }\n      \n      doc.fillColor('#374151');\n      doc.text(vacancy.district, 55, currentY + 8);\n      doc.text(allocated.toString(), 55 + colWidth, currentY + 8);\n      doc.text((vacancy.medicalVacancies || 0).toString(), 55 + colWidth * 2, currentY + 8);\n      doc.text((vacancy.commerceVacancies || 0).toString(), 55 + colWidth * 3, currentY + 8);\n      doc.text((vacancy.nonMedicalVacancies || 0).toString(), 55 + colWidth * 4, currentY + 8);\n      doc.fillColor(remaining > 0 ? '#10b981' : '#ef4444');\n      doc.text(remaining.toString(), 55 + colWidth * 5, currentY + 8);\n      \n      currentY += rowHeight;\n    });\n  }\n\n  private generateDetailedStudentRecords(doc: any, students: any[]) {\n    doc.addPage();\n    \n    // Header for detailed records\n    doc.fontSize(18).fillColor('#1f2937').text('Detailed Student Records', { align: 'center' });\n    doc.moveDown();\n    \n    // Sort students by merit number\n    const sortedStudents = students.sort((a, b) => a.meritNumber - b.meritNumber);\n    \n    // Table setup\n    const pageHeight = doc.page.height;\n    const startY = 120;\n    const rowHeight = 20;\n    const colWidths = [60, 120, 80, 80, 200, 120, 80, 80]; // Merit, Name, App No, Stream, Preferences, Allotted District, Allotted Stream, Status\n    let currentY = startY;\n    \n    // Headers\n    this.drawTableHeader(doc, currentY, colWidths);\n    currentY += rowHeight;\n    \n    sortedStudents.forEach((student, index) => {\n      // Check if we need a new page\n      if (currentY > pageHeight - 100) {\n        doc.addPage();\n        currentY = 50;\n        this.drawTableHeader(doc, currentY, colWidths);\n        currentY += rowHeight;\n      }\n      \n      this.drawStudentRow(doc, student, currentY, colWidths, index);\n      currentY += rowHeight;\n    });\n  }\n\n  private drawTableHeader(doc: any, y: number, colWidths: number[]) {\n    const headers = ['Merit No', 'Name', 'App No', 'Stream', 'Preferences (1-10)', 'Allotted District', 'Allotted Stream', 'Status'];\n    let x = 50;\n    \n    doc.fontSize(9).fillColor('#374151');\n    \n    headers.forEach((header, i) => {\n      doc.rect(x, y, colWidths[i], 20).fillAndStroke('#f1f5f9', '#d1d5db');\n      doc.text(header, x + 5, y + 6, { width: colWidths[i] - 10, align: 'left' });\n      x += colWidths[i];\n    });\n  }\n\n  private drawStudentRow(doc: any, student: any, y: number, colWidths: number[], index: number) {\n    let x = 50;\n    \n    // Alternate row colors\n    if (index % 2 === 0) {\n      doc.rect(x, y, colWidths.reduce((sum, width) => sum + width, 0), 20).fillAndStroke('#fafafa', '#e5e7eb');\n    }\n    \n    doc.fontSize(8).fillColor('#374151');\n    \n    // Merit Number\n    doc.text(student.meritNumber.toString(), x + 5, y + 6, { width: colWidths[0] - 10 });\n    x += colWidths[0];\n    \n    // Name\n    doc.text(student.name, x + 5, y + 6, { width: colWidths[1] - 10 });\n    x += colWidths[1];\n    \n    // App Number\n    doc.text(student.appNo || '', x + 5, y + 6, { width: colWidths[2] - 10 });\n    x += colWidths[2];\n    \n    // Stream\n    doc.text(student.stream, x + 5, y + 6, { width: colWidths[3] - 10 });\n    x += colWidths[3];\n    \n    // Preferences (abbreviated)\n    const preferences = [student.choice1, student.choice2, student.choice3, student.choice4, student.choice5,\n                        student.choice6, student.choice7, student.choice8, student.choice9, student.choice10]\n                       .filter(Boolean).join(', ');\n    doc.text(preferences || 'No preferences', x + 5, y + 6, { width: colWidths[4] - 10 });\n    x += colWidths[4];\n    \n    // Allotted District\n    doc.text(student.allottedDistrict || '-', x + 5, y + 6, { width: colWidths[5] - 10 });\n    x += colWidths[5];\n    \n    // Allotted Stream\n    doc.text(student.allottedStream || '-', x + 5, y + 6, { width: colWidths[6] - 10 });\n    x += colWidths[6];\n    \n    // Status with color coding\n    const status = student.allocationStatus || 'pending';\n    const statusColor = status === 'allotted' ? '#10b981' : status === 'not_allotted' ? '#ef4444' : '#f59e0b';\n    doc.fillColor(statusColor);\n    doc.text(status.charAt(0).toUpperCase() + status.slice(1), x + 5, y + 6, { width: colWidths[7] - 10 });\n  }\n\n  async exportVacanciesAsCSV(): Promise<string> {\n    const vacancies = await this.storage.getVacancies();\n    const students = await this.storage.getStudents(10000, 0);\n    \n    // Calculate remaining vacancies by district\n    const districtAllocations: { [key: string]: { [key: string]: number } } = {};\n    students.filter(s => s.allottedDistrict && s.allottedStream).forEach(student => {\n      if (student.allottedDistrict && student.allottedStream) {\n        if (!districtAllocations[student.allottedDistrict]) {\n          districtAllocations[student.allottedDistrict] = { Medical: 0, Commerce: 0, NonMedical: 0 };\n        }\n        districtAllocations[student.allottedDistrict][student.allottedStream]++;\n      }\n    });\n\n    const headers = [\n      'District',\n      'Medical Vacancies',\n      'Medical Allocated', \n      'Medical Remaining',\n      'Commerce Vacancies',\n      'Commerce Allocated',\n      'Commerce Remaining', \n      'Non-Medical Vacancies',\n      'Non-Medical Allocated',\n      'Non-Medical Remaining',\n      'Total Vacancies',\n      'Total Allocated',\n      'Total Remaining'\n    ];\n\n    const rows = vacancies.map(vacancy => {\n      const allocated = districtAllocations[vacancy.district] || { Medical: 0, Commerce: 0, NonMedical: 0 };\n      const medicalRemaining = (vacancy.medicalVacancies || 0) - allocated.Medical;\n      const commerceRemaining = (vacancy.commerceVacancies || 0) - allocated.Commerce;\n      const nonMedicalRemaining = (vacancy.nonMedicalVacancies || 0) - allocated.NonMedical;\n      const totalVacancies = (vacancy.medicalVacancies || 0) + (vacancy.commerceVacancies || 0) + (vacancy.nonMedicalVacancies || 0);\n      const totalAllocated = allocated.Medical + allocated.Commerce + allocated.NonMedical;\n      const totalRemaining = totalVacancies - totalAllocated;\n      \n      return [\n        vacancy.district,\n        vacancy.medicalVacancies || 0,\n        allocated.Medical,\n        medicalRemaining,\n        vacancy.commerceVacancies || 0, \n        allocated.Commerce,\n        commerceRemaining,\n        vacancy.nonMedicalVacancies || 0,\n        allocated.NonMedical,\n        nonMedicalRemaining,\n        totalVacancies,\n        totalAllocated,\n        totalRemaining\n      ];\n    });\n\n    const csvContent = [\n      headers.join(','),\n      ...rows.map(row => row.map(cell => `\"${cell}\"`).join(','))\n    ].join('\\n');\n\n    return csvContent;\n  }\n\n  async exportVacanciesAsPDF(): Promise<Buffer> {\n    const vacancies = await this.storage.getVacancies();\n    const students = await this.storage.getStudents(10000, 0);\n    \n    return new Promise((resolve, reject) => {\n      try {\n        const doc = new PDFDocument({ size: 'A4', layout: 'landscape', margin: 50 });\n        const buffers: Buffer[] = [];\n\n        doc.on('data', buffers.push.bind(buffers));\n        doc.on('end', () => {\n          const pdfData = Buffer.concat(buffers);\n          resolve(pdfData);\n        });\n\n        // Header\n        const currentDate = new Date().toLocaleDateString('en-IN', {\n          year: 'numeric',\n          month: 'long', \n          day: 'numeric'\n        });\n        \n        doc.fontSize(24).fillColor('#2563eb').text('Punjab Seat Allotment System', { align: 'center' });\n        doc.fontSize(18).fillColor('#64748b').text('Remaining Vacancies Report', { align: 'center' });\n        doc.moveDown();\n        doc.fontSize(12).fillColor('#374151').text(`Report Generated: ${currentDate}`, { align: 'center' });\n        doc.moveDown(2);\n\n        // Calculate allocations\n        const districtAllocations: { [key: string]: { [key: string]: number } } = {};\n        students.filter(s => s.allottedDistrict && s.allottedStream).forEach(student => {\n          if (student.allottedDistrict && student.allottedStream) {\n            if (!districtAllocations[student.allottedDistrict]) {\n              districtAllocations[student.allottedDistrict] = { Medical: 0, Commerce: 0, NonMedical: 0 };\n            }\n            districtAllocations[student.allottedDistrict][student.allottedStream]++;\n          }\n        });\n\n        // Table headers\n        const startY = 150;\n        const colWidths = [80, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60];\n        const rowHeight = 25;\n        let currentY = startY;\n        \n        // Header row\n        doc.fontSize(8).fillColor('#374151');\n        const headers = ['District', 'Med Vac', 'Med Alloc', 'Med Rem', 'Com Vac', 'Com Alloc', 'Com Rem', 'NM Vac', 'NM Alloc', 'NM Rem', 'Total Vac', 'Total Alloc', 'Total Rem'];\n        let x = 50;\n        headers.forEach((header, i) => {\n          doc.rect(x, currentY, colWidths[i], rowHeight).fillAndStroke('#f1f5f9', '#d1d5db');\n          doc.text(header, x + 5, currentY + 8, { width: colWidths[i] - 10, align: 'center' });\n          x += colWidths[i];\n        });\n        currentY += rowHeight;\n\n        // Data rows\n        vacancies.forEach((vacancy, index) => {\n          const allocated = districtAllocations[vacancy.district] || { Medical: 0, Commerce: 0, NonMedical: 0 };\n          const medicalRemaining = (vacancy.medicalVacancies || 0) - allocated.Medical;\n          const commerceRemaining = (vacancy.commerceVacancies || 0) - allocated.Commerce;\n          const nonMedicalRemaining = (vacancy.nonMedicalVacancies || 0) - allocated.NonMedical;\n          const totalVacancies = (vacancy.medicalVacancies || 0) + (vacancy.commerceVacancies || 0) + (vacancy.nonMedicalVacancies || 0);\n          const totalAllocated = allocated.Medical + allocated.Commerce + allocated.NonMedical;\n          const totalRemaining = totalVacancies - totalAllocated;\n          \n          // Alternate row colors\n          if (index % 2 === 0) {\n            x = 50;\n            doc.rect(x, currentY, colWidths.reduce((sum, width) => sum + width, 0), rowHeight).fillAndStroke('#fafafa', '#e5e7eb');\n          }\n          \n          x = 50;\n          const rowData = [\n            vacancy.district,\n            vacancy.medicalVacancies || 0,\n            allocated.Medical,\n            medicalRemaining,\n            vacancy.commerceVacancies || 0,\n            allocated.Commerce,\n            commerceRemaining,\n            vacancy.nonMedicalVacancies || 0,\n            allocated.NonMedical,\n            nonMedicalRemaining,\n            totalVacancies,\n            totalAllocated,\n            totalRemaining\n          ];\n          \n          rowData.forEach((data, i) => {\n            doc.fillColor('#374151');\n            doc.text((data || 0).toString(), x + 5, currentY + 8, { width: colWidths[i] - 10, align: 'center' });\n            x += colWidths[i];\n          });\n          \n          currentY += rowHeight;\n        });\n\n        doc.end();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async exportFlowDiagramAsPDF(): Promise<Buffer> {\n    const districtStatuses = await this.storage.getAllDistrictStatuses();\n    const settings = await this.storage.getSettings();\n    const allocationFinalized = settings.find(s => s.key === 'allocation_finalized')?.value === 'true';\n    const allocationCompleted = settings.find(s => s.key === 'allocation_completed')?.value === 'true';\n\n    return new Promise((resolve, reject) => {\n      try {\n        const doc = new PDFDocument({ size: 'A4', layout: 'portrait', margin: 50 });\n        const buffers: Buffer[] = [];\n\n        doc.on('data', buffers.push.bind(buffers));\n        doc.on('end', () => {\n          const pdfData = Buffer.concat(buffers);\n          resolve(pdfData);\n        });\n\n        this.generateFlowDiagram(doc, districtStatuses, allocationFinalized, allocationCompleted);\n\n        doc.end();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private generateFlowDiagram(doc: any, districtStatuses: any[], allocationFinalized: boolean, allocationCompleted: boolean) {\n    const currentDate = new Date().toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long', \n      day: 'numeric'\n    });\n\n    // Header\n    doc.fontSize(24).fillColor('#2563eb').text('Punjab Seat Allotment System', { align: 'center' });\n    doc.fontSize(18).fillColor('#64748b').text('Allocation Process Flow Diagram', { align: 'center' });\n    doc.moveDown();\n    doc.fontSize(12).fillColor('#374151').text(`Generated: ${currentDate}`, { align: 'center' });\n    doc.moveDown(2);\n\n    // Flow Diagram Steps\n    const steps = [\n      {\n        title: \"1. Data Upload & Validation\",\n        description: \"Upload student choices, entrance results, and vacancy data\",\n        status: \"complete\",\n        color: \"#10b981\"\n      },\n      {\n        title: \"2. District Admin Assignment\",\n        description: \"Students assigned to counseling districts with district admins\",\n        status: \"complete\", \n        color: \"#10b981\"\n      },\n      {\n        title: \"3. Student Preference Setting\",\n        description: \"District admins set student preferences (10 choices per student)\",\n        status: \"complete\",\n        color: \"#10b981\"\n      },\n      {\n        title: \"4. Student Locking\",\n        description: \"District admins lock students when preferences are finalized\",\n        status: \"complete\",\n        color: \"#10b981\"\n      },\n      {\n        title: \"5. District Finalization\",\n        description: `Districts finalize their data (${districtStatuses.filter(d => d.isFinalized).length}/${districtStatuses.length} completed)`,\n        status: districtStatuses.length > 0 && districtStatuses.every(d => d.isFinalized) ? \"complete\" : \"in_progress\",\n        color: districtStatuses.length > 0 && districtStatuses.every(d => d.isFinalized) ? \"#10b981\" : \"#f59e0b\"\n      },\n      {\n        title: \"6. Central Allocation Finalization\",\n        description: \"Central admin finalizes allocation process (locks all data)\",\n        status: allocationFinalized ? \"complete\" : \"pending\",\n        color: allocationFinalized ? \"#10b981\" : \"#6b7280\"\n      },\n      {\n        title: \"7. Run Allocation Algorithm\", \n        description: \"Merit-based seat allocation using student preferences\",\n        status: allocationCompleted ? \"complete\" : allocationFinalized ? \"ready\" : \"pending\",\n        color: allocationCompleted ? \"#10b981\" : allocationFinalized ? \"#3b82f6\" : \"#6b7280\"\n      },\n      {\n        title: \"8. Results Export\",\n        description: \"Generate and export allocation results (PDF/CSV)\",\n        status: allocationCompleted ? \"ready\" : \"pending\",\n        color: allocationCompleted ? \"#3b82f6\" : \"#6b7280\"\n      }\n    ];\n\n    let currentY = 180;\n    const stepHeight = 80;\n    const boxWidth = 400;\n    const boxHeight = 60;\n    const centerX = (doc.page.width - boxWidth) / 2;\n\n    steps.forEach((step, index) => {\n      // Draw step box\n      doc.rect(centerX, currentY, boxWidth, boxHeight).fillAndStroke(step.color, '#d1d5db');\n      \n      // Step title\n      doc.fontSize(14).fillColor('#ffffff').text(step.title, centerX + 20, currentY + 10, { width: boxWidth - 40 });\n      \n      // Step description  \n      doc.fontSize(10).fillColor('#ffffff').text(step.description, centerX + 20, currentY + 30, { width: boxWidth - 40 });\n      \n      // Status badge\n      const badgeText = step.status.toUpperCase();\n      const badgeWidth = 80;\n      const badgeX = centerX + boxWidth - badgeWidth - 10;\n      doc.rect(badgeX, currentY + 45, badgeWidth, 12).fillAndStroke('#ffffff', '#ffffff');\n      doc.fontSize(8).fillColor(step.color).text(badgeText, badgeX + 5, currentY + 47);\n\n      // Draw arrow to next step (except for last step)\n      if (index < steps.length - 1) {\n        const arrowStartY = currentY + boxHeight;\n        const arrowEndY = currentY + stepHeight;\n        const arrowX = centerX + boxWidth / 2;\n        \n        // Arrow line\n        doc.moveTo(arrowX, arrowStartY).lineTo(arrowX, arrowEndY - 10).stroke('#6b7280');\n        \n        // Arrow head\n        doc.moveTo(arrowX - 5, arrowEndY - 15)\n           .lineTo(arrowX, arrowEndY - 5)\n           .lineTo(arrowX + 5, arrowEndY - 15)\n           .stroke('#6b7280');\n      }\n\n      currentY += stepHeight;\n    });\n\n    // Add summary section\n    currentY += 30;\n    doc.fontSize(16).fillColor('#1f2937').text('Process Summary', { align: 'center' });\n    doc.moveDown();\n\n    const summary = [\n      `Total Districts: ${districtStatuses.length}`,\n      `Finalized Districts: ${districtStatuses.filter(d => d.isFinalized).length}`,\n      `Allocation Finalized: ${allocationFinalized ? 'Yes' : 'No'}`,\n      `Allocation Completed: ${allocationCompleted ? 'Yes' : 'No'}`\n    ];\n\n    summary.forEach(item => {\n      doc.fontSize(12).fillColor('#374151').text(`• ${item}`, { align: 'center' });\n    });\n  }\n}\n","size_bytes":22659},"server/services/fileService.ts":{"content":"import XLSX from 'xlsx';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { IStorage } from '../storage';\nimport { InsertStudent, InsertVacancy, InsertStudentsEntranceResult, DISTRICTS, STREAMS } from '@shared/schema';\n\nexport class FileService {\n  constructor(private storage: IStorage) {}\n\n  async processStudentFile(file: Express.Multer.File, uploadedBy: string) {\n    const fileUpload = await this.storage.createFileUpload({\n      filename: file.filename,\n      originalName: file.originalname,\n      mimeType: file.mimetype,\n      size: file.size,\n      type: 'student_choices',\n      status: 'uploaded',\n      uploadedBy,\n    });\n\n    try {\n      const students = await this.parseStudentFile(file);\n      const validationResults = this.validateStudents(students);\n\n      if (validationResults.errors.length > 0) {\n        await this.storage.updateFileUpload(fileUpload.id, {\n          status: 'failed',\n          validationResults,\n        });\n        return { ...fileUpload, status: 'failed', validationResults };\n      }\n\n      // Clear existing students and insert new ones\n      await this.storage.deleteAllStudents();\n      await this.storage.bulkCreateStudents(students);\n\n      await this.storage.updateFileUpload(fileUpload.id, {\n        status: 'processed',\n        validationResults: { \n          errors: [], \n          processed: students.length,\n          message: `Successfully processed ${students.length} student records` \n        },\n      });\n\n      return { \n        ...fileUpload, \n        status: 'processed', \n        validationResults: { \n          errors: [], \n          processed: students.length,\n          message: `Successfully processed ${students.length} student records` \n        } \n      };\n    } catch (error) {\n      await this.storage.updateFileUpload(fileUpload.id, {\n        status: 'failed',\n        validationResults: { \n          errors: [error instanceof Error ? error.message : 'Unknown error'],\n          processed: 0 \n        },\n      });\n      throw error;\n    } finally {\n      // Clean up uploaded file\n      fs.unlinkSync(file.path);\n    }\n  }\n\n  async processVacancyFile(file: Express.Multer.File, uploadedBy: string) {\n    const fileUpload = await this.storage.createFileUpload({\n      filename: file.filename,\n      originalName: file.originalname,\n      mimeType: file.mimetype,\n      size: file.size,\n      type: 'vacancies',\n      status: 'uploaded',\n      uploadedBy,\n    });\n\n    try {\n      const vacancies = await this.parseVacancyFile(file);\n      const validationResults = this.validateVacancies(vacancies);\n\n      if (validationResults.errors.length > 0) {\n        await this.storage.updateFileUpload(fileUpload.id, {\n          status: 'failed',\n          validationResults,\n        });\n        return { ...fileUpload, status: 'failed', validationResults };\n      }\n\n      // Clear existing vacancies and insert new ones\n      await this.storage.deleteAllVacancies();\n      await this.storage.bulkUpsertVacancies(vacancies);\n\n      await this.storage.updateFileUpload(fileUpload.id, {\n        status: 'processed',\n        validationResults: { \n          errors: [], \n          processed: vacancies.length,\n          message: `Successfully processed ${vacancies.length} vacancy records` \n        },\n      });\n\n      return { \n        ...fileUpload, \n        status: 'processed', \n        validationResults: { \n          errors: [], \n          processed: vacancies.length,\n          message: `Successfully processed ${vacancies.length} vacancy records` \n        } \n      };\n    } catch (error) {\n      await this.storage.updateFileUpload(fileUpload.id, {\n        status: 'failed',\n        validationResults: { \n          errors: [error instanceof Error ? error.message : 'Unknown error'],\n          processed: 0 \n        },\n      });\n      throw error;\n    } finally {\n      // Clean up uploaded file\n      fs.unlinkSync(file.path);\n    }\n  }\n\n  async processEntranceResultsFile(file: Express.Multer.File, uploadedBy: string) {\n    const fileUpload = await this.storage.createFileUpload({\n      filename: file.filename,\n      originalName: file.originalname,\n      mimeType: file.mimetype,\n      size: file.size,\n      type: 'entrance_results',\n      status: 'uploaded',\n      uploadedBy,\n    });\n\n    try {\n      const entranceResults = await this.parseEntranceResultsFile(file);\n      const validationResults = this.validateEntranceResults(entranceResults);\n\n      if (validationResults.errors.length > 0) {\n        await this.storage.updateFileUpload(fileUpload.id, {\n          status: 'failed',\n          validationResults,\n        });\n        return { ...fileUpload, status: 'failed', validationResults };\n      }\n\n      // Insert entrance results (don't clear existing ones, allow additions)\n      await this.storage.bulkCreateStudentsEntranceResults(entranceResults);\n\n      // Auto-create student records from entrance results with common fields\n      const studentsToCreate: InsertStudent[] = [];\n      \n      for (const result of entranceResults) {\n        // Check if student already exists\n        const existingStudent = await this.storage.getStudentByMeritNumber(result.meritNo);\n        \n        if (!existingStudent) {\n          studentsToCreate.push({\n            appNo: result.applicationNo,\n            meritNumber: result.meritNo,\n            name: result.studentName,\n            gender: result.gender,\n            category: result.category,\n            stream: result.stream || '',\n            choice1: null,\n            choice2: null,\n            choice3: null,\n            choice4: null,\n            choice5: null,\n            choice6: null,\n            choice7: null,\n            choice8: null,\n            choice9: null,\n            choice10: null,\n            allocationStatus: 'pending',\n          });\n        }\n      }\n\n      // Insert the new student records\n      if (studentsToCreate.length > 0) {\n        await this.storage.bulkCreateStudents(studentsToCreate);\n      }\n\n      await this.storage.updateFileUpload(fileUpload.id, {\n        status: 'processed',\n        validationResults: { \n          errors: [], \n          processed: entranceResults.length,\n          message: `Successfully processed ${entranceResults.length} entrance result records and auto-created ${studentsToCreate.length} student records` \n        },\n      });\n\n      return { \n        ...fileUpload, \n        status: 'processed', \n        validationResults: { \n          errors: [], \n          processed: entranceResults.length,\n          message: `Successfully processed ${entranceResults.length} entrance result records` \n        } \n      };\n    } catch (error) {\n      await this.storage.updateFileUpload(fileUpload.id, {\n        status: 'failed',\n        validationResults: { \n          errors: [error instanceof Error ? error.message : 'Unknown error'],\n          processed: 0 \n        },\n      });\n      throw error;\n    } finally {\n      // Clean up uploaded file\n      fs.unlinkSync(file.path);\n    }\n  }\n\n  generateEntranceResultsTemplate(): string {\n    const headers = [\n      'Merit No',\n      'Application No', \n      'Roll No',\n      'Student Name',\n      'Marks',\n      'Gender',\n      'Category',\n      'Stream'\n    ];\n\n    const sampleRows = [\n      ['1001', 'APP2024001', 'ROLL001', 'Sample Student 1', '485', 'Male', 'Open', 'Medical'],\n      ['1002', 'APP2024002', 'ROLL002', 'Sample Student 2', '480', 'Female', 'WHH', 'Commerce'],\n      ['1003', 'APP2024003', 'ROLL003', 'Sample Student 3', '475', 'Male', 'Disabled', 'NonMedical']\n    ];\n\n    const csvContent = [\n      headers.join(','),\n      ...sampleRows.map(row => row.join(','))\n    ].join('\\n');\n\n    return csvContent;\n  }\n\n  generateStudentChoicesTemplate(): string {\n    const headers = [\n      'App No',\n      'Merit Number',\n      'Name',\n      'Gender',\n      'Category',\n      'Stream',\n      'Choice 1',\n      'Choice 2',\n      'Choice 3',\n      'Choice 4',\n      'Choice 5',\n      'Choice 6',\n      'Choice 7',\n      'Choice 8',\n      'Choice 9',\n      'Choice 10'\n    ];\n\n    const sampleRows = [\n      ['APP2024001', '1001', 'Sample Student 1', 'Male', 'Open', 'Medical', 'Amritsar', 'Ludhiana', 'Jalandhar', '', '', '', '', '', '', ''],\n      ['APP2024002', '1002', 'Sample Student 2', 'Female', 'WHH', 'Commerce', 'Patiala', 'Bathinda', 'Moga', 'Barnala', '', '', '', '', '', ''],\n      ['APP2024003', '1003', 'Sample Student 3', 'Male', 'Disabled', 'NonMedical', 'Gurdaspur', 'Pathankot', 'Hoshiarpur', 'Jalandhar', 'Kapurthala', '', '', '', '', '']\n    ];\n\n    const csvContent = [\n      headers.join(','),\n      ...sampleRows.map(row => row.join(','))\n    ].join('\\n');\n\n    return csvContent;\n  }\n\n  generateVacanciesTemplate(): string {\n    const headers = [\n      'District',\n      'Stream',\n      'Gender',\n      'Category',\n      'Total Seats',\n      'Available Seats'\n    ];\n\n    const sampleRows = [\n      ['Amritsar', 'Medical', 'Male', 'Open', '50', '50'],\n      ['Amritsar', 'Medical', 'Male', 'Disabled', '5', '5'],\n      ['Amritsar', 'Medical', 'Male', 'Private', '20', '20'],\n      ['Amritsar', 'Medical', 'Female', 'Open', '40', '40'],\n      ['Amritsar', 'Medical', 'Female', 'WHH', '15', '15'],\n      ['Amritsar', 'Medical', 'Female', 'Disabled', '5', '5'],\n      ['Amritsar', 'Medical', 'Female', 'Private', '25', '25'],\n      ['Amritsar', 'Commerce', 'Male', 'Open', '60', '60'],\n      ['Amritsar', 'Commerce', 'Female', 'WHH', '20', '20']\n    ];\n\n    const csvContent = [\n      headers.join(','),\n      ...sampleRows.map(row => row.join(','))\n    ].join('\\n');\n\n    return csvContent;\n  }\n\n  private async parseEntranceResultsFile(file: Express.Multer.File): Promise<InsertStudentsEntranceResult[]> {\n    const workbook = XLSX.readFile(file.path);\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n    const data = XLSX.utils.sheet_to_json(worksheet);\n\n    return data.map((row: any) => ({\n      meritNo: parseInt(row['Merit No'] || row.MeritNo || row.merit_no || row.meritNumber || row.merit_number) || 0,\n      applicationNo: String(row['Application No'] || row.ApplicationNo || row.application_no || row.app_no || row.AppNo || ''),\n      rollNo: String(row['Roll No'] || row.RollNo || row.roll_no || row.rollNumber || row.roll_number || ''),\n      studentName: String(row['Student Name'] || row.StudentName || row.student_name || row.Name || row.name || ''),\n      marks: parseInt(row.Marks || row.marks || row.Score || row.score || row.TotalMarks || row.total_marks) || 0,\n      gender: String(row.Gender || row.gender || row.Sex || row.sex || ''),\n      category: String(row.Category || row.category || row.Quota || row.quota || ''),\n      stream: String(row.Stream || row.stream || ''),\n    }));\n  }\n\n  private async parseStudentFile(file: Express.Multer.File): Promise<InsertStudent[]> {\n    const workbook = XLSX.readFile(file.path);\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n    const data = XLSX.utils.sheet_to_json(worksheet);\n\n    return data.map((row: any) => ({\n      appNo: String(row['App No'] || row.AppNo || row.app_no || row.ApplicationNumber || row.application_number || row['Application Number'] || ''),\n      meritNumber: parseInt(row.MeritNo || row.MeritNumber || row.merit_number || row['Merit Number']) || 0,\n      name: String(row.Name || row.name || row['Student Name'] || ''),\n      gender: String(row.Gender || row.gender || ''),\n      category: String(row.Category || row.category || ''),\n      stream: String(row.Stream || row.stream || ''),\n      choice1: row.choice1 || row.Choice1 || row['Choice 1'] || null,\n      choice2: row.choice2 || row.Choice2 || row['Choice 2'] || null,\n      choice3: row.choice3 || row.Choice3 || row['Choice 3'] || null,\n      choice4: row.choice4 || row.Choice4 || row['Choice 4'] || null,\n      choice5: row.choice5 || row.Choice5 || row['Choice 5'] || null,\n      choice6: row.choice6 || row.Choice6 || row['Choice 6'] || null,\n      choice7: row.choice7 || row.Choice7 || row['Choice 7'] || null,\n      choice8: row.choice8 || row.Choice8 || row['Choice 8'] || null,\n      choice9: row.choice9 || row.Choice9 || row['Choice 9'] || null,\n      choice10: row.choice10 || row.Choice10 || row['Choice 10'] || null,\n      allocationStatus: 'pending',\n    }));\n  }\n\n  private async parseVacancyFile(file: Express.Multer.File): Promise<InsertVacancy[]> {\n    const workbook = XLSX.readFile(file.path);\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n    const data = XLSX.utils.sheet_to_json(worksheet);\n\n    return data.map((row: any) => ({\n      district: String(row.District || row.district || ''),\n      stream: String(row.Stream || row.stream || ''),\n      gender: String(row.Gender || row.gender || ''),\n      category: String(row.Category || row.category || ''),\n      totalSeats: parseInt(row['Total Seats'] || row.totalSeats || row.total_seats || row.TotalSeats) || 0,\n      availableSeats: parseInt(row['Available Seats'] || row.availableSeats || row.available_seats || row.AvailableSeats) || 0,\n    }));\n  }\n\n  private validateStudents(students: InsertStudent[]): { errors: string[]; processed: number } {\n    const errors: string[] = [];\n    const seenMeritNumbers = new Set<number>();\n\n    students.forEach((student, index) => {\n      const row = index + 1;\n\n      // Check required fields\n      if (!student.appNo || String(student.appNo).trim() === '') {\n        errors.push(`Row ${row}: Application Number (App No) is required`);\n      }\n\n      if (!student.meritNumber) {\n        errors.push(`Row ${row}: Merit Number is required`);\n      } else if (seenMeritNumbers.has(student.meritNumber)) {\n        errors.push(`Row ${row}: Duplicate Merit Number ${student.meritNumber}`);\n      } else {\n        seenMeritNumbers.add(student.meritNumber);\n      }\n\n      if (!student.name || String(student.name).trim() === '') {\n        errors.push(`Row ${row}: Student Name is required`);\n      }\n\n      if (!student.stream || !STREAMS.includes(student.stream as any)) {\n        errors.push(`Row ${row}: Invalid stream. Must be one of: ${STREAMS.join(', ')}`);\n      }\n\n      // Validate choices are valid districts\n      for (let i = 1; i <= 10; i++) {\n        const choice = (student as any)[`choice${i}`];\n        if (choice && !DISTRICTS.includes(choice)) {\n          errors.push(`Row ${row}: Invalid district in Choice${i}. Must be one of: ${DISTRICTS.join(', ')}`);\n        }\n      }\n    });\n\n    return { errors, processed: students.length };\n  }\n\n  private validateVacancies(vacancies: InsertVacancy[]): { errors: string[]; processed: number } {\n    const errors: string[] = [];\n    const seenCombinations = new Set<string>();\n\n    vacancies.forEach((vacancy, index) => {\n      const row = index + 1;\n      const combination = `${vacancy.district}-${vacancy.stream}-${vacancy.gender}-${vacancy.category}`;\n\n      if (!vacancy.district || !DISTRICTS.includes(vacancy.district as any)) {\n        errors.push(`Row ${row}: Invalid district. Must be one of: ${DISTRICTS.join(', ')}`);\n      }\n\n      if (!vacancy.stream || !STREAMS.includes(vacancy.stream as any)) {\n        errors.push(`Row ${row}: Invalid stream. Must be one of: ${STREAMS.join(', ')}`);\n      }\n\n      if (!vacancy.gender || !['Male', 'Female', 'Other'].includes(vacancy.gender)) {\n        errors.push(`Row ${row}: Invalid gender. Must be one of: Male, Female, Other`);\n      }\n\n      if (!vacancy.category || !['Open', 'WHH', 'Disabled', 'Private'].includes(vacancy.category)) {\n        errors.push(`Row ${row}: Invalid category. Must be one of: Open, WHH, Disabled, Private`);\n      }\n\n      if (seenCombinations.has(combination)) {\n        errors.push(`Row ${row}: Duplicate combination of District-Stream-Gender-Category: ${combination}`);\n      } else {\n        seenCombinations.add(combination);\n      }\n\n      if (vacancy.totalSeats! < 0 || vacancy.availableSeats! < 0) {\n        errors.push(`Row ${row}: Seat counts cannot be negative`);\n      }\n\n      if (vacancy.availableSeats! > vacancy.totalSeats!) {\n        errors.push(`Row ${row}: Available seats cannot exceed total seats`);\n      }\n    });\n\n    return { errors, processed: vacancies.length };\n  }\n\n  private validateEntranceResults(entranceResults: InsertStudentsEntranceResult[]): { errors: string[]; processed: number } {\n    const errors: string[] = [];\n    const seenMeritNumbers = new Set<number>();\n    const seenAppNumbers = new Set<string>();\n    const seenRollNumbers = new Set<string>();\n    const validGenders = ['Male', 'Female', 'Other'];\n\n    entranceResults.forEach((result, index) => {\n      const row = index + 1;\n\n      // Check required fields\n      if (!result.meritNo) {\n        errors.push(`Row ${row}: Merit Number is required`);\n      } else if (seenMeritNumbers.has(result.meritNo)) {\n        errors.push(`Row ${row}: Duplicate Merit Number ${result.meritNo}`);\n      } else {\n        seenMeritNumbers.add(result.meritNo);\n      }\n\n      if (!result.applicationNo || String(result.applicationNo).trim() === '') {\n        errors.push(`Row ${row}: Application Number is required`);\n      } else if (seenAppNumbers.has(result.applicationNo)) {\n        errors.push(`Row ${row}: Duplicate Application Number ${result.applicationNo}`);\n      } else {\n        seenAppNumbers.add(result.applicationNo);\n      }\n\n      if (!result.rollNo || String(result.rollNo).trim() === '') {\n        errors.push(`Row ${row}: Roll Number is required`);\n      } else if (seenRollNumbers.has(result.rollNo)) {\n        errors.push(`Row ${row}: Duplicate Roll Number ${result.rollNo}`);\n      } else {\n        seenRollNumbers.add(result.rollNo);\n      }\n\n      if (!result.studentName || String(result.studentName).trim() === '') {\n        errors.push(`Row ${row}: Student Name is required`);\n      }\n\n      if (!result.marks || result.marks < 0 || result.marks > 500) {\n        errors.push(`Row ${row}: Marks must be between 0 and 500`);\n      }\n\n      if (!result.gender || !validGenders.includes(result.gender)) {\n        errors.push(`Row ${row}: Gender must be one of: ${validGenders.join(', ')}`);\n      }\n\n      if (!result.stream || !STREAMS.includes(result.stream as any)) {\n        errors.push(`Row ${row}: Invalid stream. Must be one of: ${STREAMS.join(', ')}`);\n      }\n    });\n\n    return { errors, processed: entranceResults.length };\n  }\n\n  // Validation-only methods (don't save to database)\n  async validateStudentFile(file: Express.Multer.File) {\n    try {\n      const students = await this.parseStudentFile(file);\n      const validationResults = this.validateStudents(students);\n      \n      return {\n        isValid: validationResults.errors.length === 0,\n        message: validationResults.errors.length === 0 \n          ? `File is valid. Found ${students.length} student records.`\n          : `Found ${validationResults.errors.length} validation errors.`,\n        errors: validationResults.errors,\n        warnings: [],\n        recordCount: students.length,\n        allRecords: students.map(student => ({\n          appNo: student.appNo,\n          meritNumber: student.meritNumber,\n          name: student.name,\n          stream: student.stream,\n          gender: student.gender,\n          category: student.category,\n          choice1: student.choice1,\n          choice2: student.choice2,\n          choice3: student.choice3,\n          choice4: student.choice4,\n          choice5: student.choice5,\n          choice6: student.choice6,\n          choice7: student.choice7,\n          choice8: student.choice8,\n          choice9: student.choice9,\n          choice10: student.choice10\n        })),\n        preview: students.slice(0, 10).map(student => ({\n          appNo: student.appNo,\n          meritNumber: student.meritNumber,\n          name: student.name,\n          stream: student.stream,\n          choice1: student.choice1,\n          choice2: student.choice2,\n          choice3: student.choice3\n        }))\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        message: error instanceof Error ? error.message : 'Unknown error',\n        errors: [error instanceof Error ? error.message : 'Unknown error'],\n        warnings: [],\n        recordCount: 0,\n        allRecords: [],\n        preview: []\n      };\n    } finally {\n      // Clean up uploaded file\n      fs.unlinkSync(file.path);\n    }\n  }\n\n  async validateVacancyFile(file: Express.Multer.File) {\n    try {\n      const vacancies = await this.parseVacancyFile(file);\n      const validationResults = this.validateVacancies(vacancies);\n      \n      return {\n        isValid: validationResults.errors.length === 0,\n        message: validationResults.errors.length === 0 \n          ? `File is valid. Found ${vacancies.length} vacancy records.`\n          : `Found ${validationResults.errors.length} validation errors.`,\n        errors: validationResults.errors,\n        warnings: [],\n        recordCount: vacancies.length,\n        allRecords: vacancies.map(vacancy => ({\n          district: vacancy.district,\n          stream: vacancy.stream,\n          gender: vacancy.gender,\n          category: vacancy.category,\n          totalSeats: vacancy.totalSeats,\n          availableSeats: vacancy.availableSeats\n        })),\n        preview: vacancies.slice(0, 10).map(vacancy => ({\n          district: vacancy.district,\n          stream: vacancy.stream,\n          totalSeats: vacancy.totalSeats,\n          availableSeats: vacancy.availableSeats,\n          category: vacancy.category,\n          gender: vacancy.gender\n        }))\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        message: error instanceof Error ? error.message : 'Unknown error',\n        errors: [error instanceof Error ? error.message : 'Unknown error'],\n        warnings: [],\n        recordCount: 0,\n        allRecords: [],\n        preview: []\n      };\n    } finally {\n      // Clean up uploaded file\n      fs.unlinkSync(file.path);\n    }\n  }\n\n  async validateEntranceResultsFile(file: Express.Multer.File) {\n    try {\n      const entranceResults = await this.parseEntranceResultsFile(file);\n      const validationResults = this.validateEntranceResults(entranceResults);\n      \n      return {\n        isValid: validationResults.errors.length === 0,\n        message: validationResults.errors.length === 0 \n          ? `File is valid. Found ${entranceResults.length} entrance result records.`\n          : `Found ${validationResults.errors.length} validation errors.`,\n        errors: validationResults.errors,\n        warnings: [],\n        recordCount: entranceResults.length,\n        allRecords: entranceResults.map(result => ({\n          meritNo: result.meritNo,\n          applicationNo: result.applicationNo,\n          rollNo: result.rollNo,\n          studentName: result.studentName,\n          marks: result.marks,\n          gender: result.gender,\n          category: result.category,\n          stream: result.stream\n        })),\n        preview: entranceResults.slice(0, 10).map(result => ({\n          meritNo: result.meritNo,\n          applicationNo: result.applicationNo,\n          rollNo: result.rollNo,\n          studentName: result.studentName,\n          marks: result.marks,\n          gender: result.gender,\n          stream: result.stream\n        }))\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        message: error instanceof Error ? error.message : 'Unknown error',\n        errors: [error instanceof Error ? error.message : 'Unknown error'],\n        warnings: [],\n        recordCount: 0,\n        allRecords: [],\n        preview: []\n      };\n    } finally {\n      // Clean up uploaded file\n      fs.unlinkSync(file.path);\n    }\n  }\n}\n","size_bytes":23707},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Handle query keys with parameters properly\n    const [baseUrl, params] = queryKey;\n    let url = baseUrl as string;\n    \n    // If there are query parameters, append them properly\n    if (params && typeof params === 'object') {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== null && value !== undefined) {\n          searchParams.append(key, String(value));\n        }\n      });\n      const queryString = searchParams.toString();\n      if (queryString) {\n        url += `?${queryString}`;\n      }\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1953},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/allocation.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AllocationModal from \"@/components/modals/allocation-modal\";\nimport { \n  Settings, \n  Play, \n  Check, \n  Clock, \n  AlertTriangle, \n  Users, \n  MapPin,\n  BarChart3,\n  Shield\n} from \"lucide-react\";\nimport type { DistrictStatus } from \"@shared/schema\";\n\nexport default function Allocation() {\n  const [showAllocationModal, setShowAllocationModal] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: allocationStatus } = useQuery<any>({\n    queryKey: [\"/api/allocation/status\"],\n  });\n\n  const { data: stats } = useQuery<any>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: files } = useQuery<any[]>({\n    queryKey: [\"/api/files\"],\n  });\n\n  const { data: studentsResponse } = useQuery<any>({\n    queryKey: [\"/api/students\"],\n  });\n\n  const { data: vacancies } = useQuery<any[]>({\n    queryKey: [\"/api/vacancies\"],\n  });\n\n  const { data: entranceResultsResponse } = useQuery<any>({\n    queryKey: [\"/api/students-entrance-results\"],\n  });\n\n  // Fetch district statuses for finalization check\n  const { data: districtStatuses } = useQuery<DistrictStatus[]>({\n    queryKey: [\"/api/district-status\"],\n  });\n\n  // Finalize allocation mutation\n  const finalizeAllocationMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/allocation/finalize\");\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/allocation/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/district-status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"🎉 Allocation Finalized Successfully!\",\n        description: `Allocation process has been finalized at ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', timeStyle: 'short', dateStyle: 'short' })}. You can now run the allocation.`,\n        duration: 6000,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Finalization Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const studentFile = files?.find((f: any) => f.type === 'student_choices' && f.status === 'processed');\n  const vacancyFile = files?.find((f: any) => f.type === 'vacancies' && f.status === 'processed');\n  const entranceFile = files?.find((f: any) => f.type === 'entrance_results' && f.status === 'processed');\n\n  // Handle different API response formats\n  const students = Array.isArray(studentsResponse) ? studentsResponse : studentsResponse?.students || [];\n  const entranceResults = Array.isArray(entranceResultsResponse) ? entranceResultsResponse : entranceResultsResponse?.students || [];\n\n  // Minimum data requirements for allocation\n  const hasEntranceResults = entranceResults && entranceResults.length > 0;\n  const hasVacancyData = vacancies && vacancies.length > 0;\n  const totalVacancySeats = vacancies?.reduce((sum: number, v: any) => sum + (v.totalSeats || 0), 0) || 0;\n  \n  // Check if students have valid preferences (stream and at least one district choice)\n  const studentsWithCompleteData = students?.filter((s: any) => {\n    // Must have stream and at least one district choice\n    const hasStream = s.stream && ['Medical', 'Commerce', 'NonMedical'].includes(s.stream);\n    const hasDistrictChoice = s.choice1 || s.choice2 || s.choice3 || s.choice4 || s.choice5 || \n                             s.choice6 || s.choice7 || s.choice8 || s.choice9 || s.choice10;\n    return hasStream && hasDistrictChoice;\n  })?.length || 0;\n  \n  // Check if students exist in entrance results (for merit-based allocation)\n  const studentsWithMeritData = students?.filter((s: any) => \n    entranceResults?.some((er: any) => er.applicationNo === s.appNo && er.meritNo)\n  )?.length || 0;\n\n  // District finalization checks - only consider districts with eligible students\n  // Get list of districts that have students with district admin assignments and preferences\n  const districtsWithEligibleStudents = new Set<string>();\n  students?.forEach((student: any) => {\n    if (student.districtAdmin && student.choice1 && student.counselingDistrict) {\n      districtsWithEligibleStudents.add(student.counselingDistrict);\n    }\n  });\n\n  // Only check finalization status for districts with eligible students\n  const eligibleDistrictStatuses = districtStatuses?.filter(ds => \n    districtsWithEligibleStudents.has(ds.district)\n  ) || [];\n  \n  const totalDistricts = eligibleDistrictStatuses.length;\n  const finalizedDistricts = eligibleDistrictStatuses.filter(ds => ds.isFinalized).length;\n  const allDistrictsFinalized = totalDistricts > 0 && finalizedDistricts === totalDistricts;\n  const pendingDistricts = eligibleDistrictStatuses.filter(ds => !ds.isFinalized) || [];\n\n  // Check if there are locked students in any district (including central admin managed districts)\n  const lockedStudents = students?.filter((student: any) => \n    student.isLocked && student.districtAdmin && student.choice1 && student.counselingDistrict\n  ) || [];\n  const hasLockedStudents = lockedStudents.length > 0;\n\n  // Check if allocation is finalized (separate from completed)\n  const isAllocationFinalized = allocationStatus?.finalized;\n\n  // Conditions for finalize allocation\n  const canFinalizeAllocation = hasEntranceResults && // At least one entrance result\n                               hasVacancyData && totalVacancySeats > 0 && // At least one vacancy seat\n                               studentsWithCompleteData > 0 && // At least one student with complete data\n                               studentsWithMeritData > 0 && // Students must have merit data\n                               allDistrictsFinalized && // All districts must be finalized\n                               hasLockedStudents && // At least one student must be locked\n                               !isAllocationFinalized && // Not already finalized\n                               !allocationStatus?.completed; // Not already completed\n\n  // Minimum requirements for allocation\n  const canRunAllocation = hasEntranceResults && // At least one entrance result\n                          hasVacancyData && totalVacancySeats > 0 && // At least one vacancy seat\n                          studentsWithCompleteData > 0 && // At least one student with complete data\n                          studentsWithMeritData > 0 && // Students must have merit data\n                          allDistrictsFinalized && // All districts must be finalized\n                          isAllocationFinalized && // Must be finalized first\n                          !allocationStatus?.completed; // Not already completed\n\n  const preflightChecks = [\n    {\n      title: \"Entrance Results Data\",\n      status: hasEntranceResults ? \"complete\" : \"missing\",\n      description: hasEntranceResults \n        ? `${entranceResults?.length || 0} entrance results with merit numbers available`\n        : \"No entrance results found - upload entrance results file first\",\n      icon: hasEntranceResults ? Check : AlertTriangle,\n      color: hasEntranceResults ? \"text-green-500\" : \"text-red-500\",\n    },\n    {\n      title: \"Vacancy Seat Availability\",\n      status: hasVacancyData && totalVacancySeats > 0 ? \"complete\" : \"missing\",\n      description: hasVacancyData && totalVacancySeats > 0\n        ? `${totalVacancySeats} total seats available across districts`\n        : \"No vacancy seats found - upload vacancy data file first\",\n      icon: hasVacancyData && totalVacancySeats > 0 ? Check : AlertTriangle,\n      color: hasVacancyData && totalVacancySeats > 0 ? \"text-green-500\" : \"text-red-500\",\n    },\n    {\n      title: \"Student Choice Data\", \n      status: studentsWithCompleteData > 0 ? \"complete\" : \"missing\",\n      description: studentsWithCompleteData > 0\n        ? `${studentsWithCompleteData} students have stream and district preferences set`\n        : \"No students found with complete stream and district choice data\",\n      icon: studentsWithCompleteData > 0 ? Check : AlertTriangle,\n      color: studentsWithCompleteData > 0 ? \"text-green-500\" : \"text-red-500\",\n    },\n    {\n      title: \"Merit-Based Matching\",\n      status: studentsWithMeritData > 0 ? \"complete\" : studentsWithCompleteData > 0 && hasEntranceResults ? \"error\" : \"pending\",\n      description: studentsWithMeritData > 0 \n        ? `${studentsWithMeritData} students matched with entrance merit data`\n        : studentsWithCompleteData > 0 && hasEntranceResults\n        ? \"Students found but no merit matching - check application numbers between student choices and entrance results\"\n        : \"Waiting for student choice and entrance result data\",\n      icon: studentsWithMeritData > 0 ? Check : studentsWithCompleteData > 0 && hasEntranceResults ? AlertTriangle : Clock,\n      color: studentsWithMeritData > 0 ? \"text-green-500\" : studentsWithCompleteData > 0 && hasEntranceResults ? \"text-red-500\" : \"text-amber-500\",\n    },\n    {\n      title: \"District Data Finalization\",\n      status: allDistrictsFinalized ? \"complete\" : totalDistricts > 0 ? \"error\" : \"pending\",\n      description: allDistrictsFinalized \n        ? `✓ All ${totalDistricts} districts with eligible students have finalized their data`\n        : totalDistricts > 0\n        ? `⚠️ ${finalizedDistricts}/${totalDistricts} districts with eligible students finalized. Pending: ${pendingDistricts.map(d => d.district).slice(0, 3).join(', ')}${pendingDistricts.length > 3 ? ` (+${pendingDistricts.length - 3} more)` : ''}`\n        : \"No districts with eligible students found - districts must have students with preferences and district admin assignments\",\n      icon: allDistrictsFinalized ? Check : totalDistricts > 0 ? AlertTriangle : Clock,\n      color: allDistrictsFinalized ? \"text-green-500\" : totalDistricts > 0 ? \"text-red-500\" : \"text-amber-500\",\n    },\n    {\n      title: \"Locked Students Requirement\",\n      status: hasLockedStudents ? \"complete\" : lockedStudents.length === 0 && students?.length > 0 ? \"error\" : \"pending\",\n      description: hasLockedStudents \n        ? `✓ ${lockedStudents.length} students are locked and ready for allocation`\n        : lockedStudents.length === 0 && students?.length > 0\n        ? \"⚠️ No students are locked yet. At least one student must be locked in any district before finalizing allocation\"\n        : \"Waiting for students to be added and locked by district admins\",\n      icon: hasLockedStudents ? Check : lockedStudents.length === 0 && students?.length > 0 ? AlertTriangle : Clock,\n      color: hasLockedStudents ? \"text-green-500\" : lockedStudents.length === 0 && students?.length > 0 ? \"text-red-500\" : \"text-amber-500\",\n    },\n    {\n      title: \"Minimum Allocation Data\",\n      status: hasEntranceResults && hasVacancyData && studentsWithCompleteData > 0 && allDistrictsFinalized ? \"complete\" : \"pending\",\n      description: hasEntranceResults && hasVacancyData && studentsWithCompleteData > 0 && allDistrictsFinalized\n        ? \"All minimum data requirements met for allocation process\"\n        : \"Required: entrance results + vacancy data + student preferences + all district admins must finalize\",\n      icon: hasEntranceResults && hasVacancyData && studentsWithCompleteData > 0 && allDistrictsFinalized ? Check : Clock,\n      color: hasEntranceResults && hasVacancyData && studentsWithCompleteData > 0 && allDistrictsFinalized ? \"text-green-500\" : \"text-amber-500\",\n    },\n    {\n      title: \"Central Allocation Finalization\",\n      status: isAllocationFinalized ? \"complete\" : canFinalizeAllocation ? \"ready\" : \"pending\",\n      description: isAllocationFinalized\n        ? \"✅ Allocation process has been finalized by central admin\"\n        : canFinalizeAllocation \n        ? \"Ready to finalize allocation - all requirements met\"\n        : \"Prerequisites not met - complete all above steps before finalization\",\n      icon: isAllocationFinalized ? Check : canFinalizeAllocation ? Clock : AlertTriangle,\n      color: isAllocationFinalized ? \"text-green-500\" : canFinalizeAllocation ? \"text-blue-500\" : \"text-amber-500\",\n    },\n    {\n      title: \"Allocation Process\",\n      status: allocationStatus?.completed ? \"complete\" : canRunAllocation ? \"ready\" : \"pending\",\n      description: allocationStatus?.completed\n        ? \"Seat allocation has been completed successfully\"\n        : canRunAllocation \n        ? \"Ready to run allocation - finalization completed\"\n        : \"Prerequisites not met - need finalization before running allocation\",\n      icon: allocationStatus?.completed ? Check : canRunAllocation ? Clock : AlertTriangle,\n      color: allocationStatus?.completed ? \"text-green-500\" : canRunAllocation ? \"text-blue-500\" : \"text-amber-500\",\n    },\n  ];\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Run Allocation\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Operations\" },\n          { name: \"Run Allocation\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Allocation Controls */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Settings className=\"w-5 h-5 mr-2 text-primary\" />\n                  Allocation Process\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Run the seat allocation algorithm to assign students to districts based on merit and preferences\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {allocationStatus?.completed ? (\n                  <div className=\"text-center p-8 bg-green-50 rounded-lg border border-green-200\">\n                    <Check className=\"w-12 h-12 text-green-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\n                      Allocation Completed\n                    </h3>\n                    <p className=\"text-sm text-green-600\">\n                      The seat allocation process has been completed successfully. \n                      You can now export the results.\n                    </p>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold\">Pre-flight Checks</h3>\n                      {preflightChecks.map((check, index) => (\n                        <div key={index} className=\"flex items-start space-x-3 p-3 border border-border rounded-lg\">\n                          <check.icon className={`w-5 h-5 mt-0.5 ${check.color}`} />\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <p className=\"font-medium\">{check.title}</p>\n                              <Badge \n                                variant={check.status === 'complete' ? 'secondary' : check.status === 'missing' ? 'destructive' : 'outline'}\n                                className={check.status === 'complete' ? 'bg-green-100 text-green-800' : ''}\n                              >\n                                {check.status}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">{check.description}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      {/* Finalize Allocation Section */}\n                      {!isAllocationFinalized && !allocationStatus?.completed && (\n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-medium text-sm\">Step 1: Finalize Allocation</h4>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button \n                                disabled={!canFinalizeAllocation || finalizeAllocationMutation.isPending}\n                                variant=\"outline\"\n                                className=\"w-full\"\n                                data-testid=\"button-finalize-allocation\"\n                              >\n                                <Shield className=\"w-4 h-4 mr-2\" />\n                                {finalizeAllocationMutation.isPending ? \"Finalizing...\" : \n                                 canFinalizeAllocation ? \"Finalize Allocation\" : \"Requirements Not Met\"}\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Finalize Allocation Process</AlertDialogTitle>\n                                <AlertDialogDescription className=\"space-y-2\">\n                                  <p>\n                                    You are about to finalize the allocation process. This action will:\n                                  </p>\n                                  <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                                    <li>Lock the allocation process for running</li>\n                                    <li>Prevent further changes to district finalization</li>\n                                    <li>Enable the \"Run Allocation\" step</li>\n                                  </ul>\n                                  <p className=\"font-medium text-amber-600\">\n                                    ⚠️ This action cannot be undone. Please ensure all districts have completed their data finalization.\n                                  </p>\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction \n                                  onClick={() => finalizeAllocationMutation.mutate()}\n                                  data-testid=\"button-confirm-finalize\"\n                                >\n                                  Finalize Allocation\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      )}\n\n                      {/* Run Allocation Section */}\n                      {isAllocationFinalized && !allocationStatus?.completed && (\n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-medium text-sm\">Step 2: Run Allocation</h4>\n                          <Button \n                            onClick={() => setShowAllocationModal(true)}\n                            disabled={!canRunAllocation}\n                            className=\"w-full\"\n                            data-testid=\"button-run-allocation\"\n                          >\n                            <Play className=\"w-4 h-4 mr-2\" />\n                            Run Allocation Algorithm\n                          </Button>\n                        </div>\n                      )}\n\n                      {/* Fallback for when requirements not met */}\n                      {!canFinalizeAllocation && !isAllocationFinalized && !allocationStatus?.completed && (\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => window.location.href = '/file-management'}\n                          data-testid=\"button-upload-files\"\n                        >\n                          Upload Required Files\n                        </Button>\n                      )}\n                    </div>\n\n                    {!canRunAllocation && (\n                      <div className=\"p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n                        <div className=\"flex items-start space-x-2\">\n                          <AlertTriangle className=\"w-5 h-5 text-amber-500 mt-0.5\" />\n                          <div>\n                            <h4 className=\"font-medium text-amber-800\">Action Required</h4>\n                            <p className=\"text-sm text-amber-700\">\n                              Please upload and validate both student choices and vacancy data files before running the allocation.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Current Data Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Current Data Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <Users className=\"w-8 h-8 text-blue-500 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-blue-700\" data-testid=\"total-students-count\">\n                      {stats?.totalStudents || 0}\n                    </p>\n                    <p className=\"text-sm text-blue-600\">Total Students</p>\n                  </div>\n                  \n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <MapPin className=\"w-8 h-8 text-green-500 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-green-700\" data-testid=\"total-vacancies-count\">\n                      {stats?.totalVacancies || 0}\n                    </p>\n                    <p className=\"text-sm text-green-600\">Total Vacancies</p>\n                  </div>\n                  \n                  <div className=\"text-center p-4 bg-amber-50 rounded-lg\">\n                    <BarChart3 className=\"w-8 h-8 text-amber-500 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-amber-700\" data-testid=\"pending-allocations-count\">\n                      {stats?.pendingAllocations || 0}\n                    </p>\n                    <p className=\"text-sm text-amber-600\">Pending</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Algorithm Information */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle>Allocation Algorithm</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Process Overview</h4>\n                  <ol className=\"text-sm text-muted-foreground space-y-2\">\n                    <li className=\"flex items-start space-x-2\">\n                      <span className=\"flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium\">1</span>\n                      <span>Students sorted by Merit Number (ascending = higher merit first)</span>\n                    </li>\n                    <li className=\"flex items-start space-x-2\">\n                      <span className=\"flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium\">2</span>\n                      <span>Check choices in order (Choice1 → Choice10)</span>\n                    </li>\n                    <li className=\"flex items-start space-x-2\">\n                      <span className=\"flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium\">3</span>\n                      <span>Assign to first available choice with vacancy</span>\n                    </li>\n                    <li className=\"flex items-start space-x-2\">\n                      <span className=\"flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium\">4</span>\n                      <span>Mark as \"Not Allotted\" if no choices available</span>\n                    </li>\n                  </ol>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-2\">Important Notes</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Allocation can only be run once</li>\n                    <li>• Process is irreversible</li>\n                    <li>• Results will be generated for export</li>\n                    <li>• All actions are logged for audit</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        <AllocationModal \n          open={showAllocationModal} \n          onOpenChange={setShowAllocationModal} \n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":25743},"client/src/pages/audit-log.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, History, Filter } from \"lucide-react\";\nimport { formatDistanceToNow, format } from \"date-fns\";\nimport type { AuditLog } from \"@/types\";\n\nexport default function AuditLog() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [page, setPage] = useState(0);\n  const limit = 50;\n\n  const { data: auditLogs, isLoading } = useQuery({\n    queryKey: [\"/api/audit-logs\", { limit, offset: page * limit }],\n  });\n\n  const filteredLogs = auditLogs?.filter((log: AuditLog) => \n    log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    log.resource.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    log.details?.username?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const getActionBadge = (action: string) => {\n    const actionMap: Record<string, { variant: any; className: string }> = {\n      'user_login': { variant: 'outline', className: 'bg-blue-100 text-blue-800 border-blue-200' },\n      'user_logout': { variant: 'outline', className: 'bg-gray-100 text-gray-800 border-gray-200' },\n      'file_upload': { variant: 'secondary', className: 'bg-green-100 text-green-800' },\n      'allocation_run': { variant: 'secondary', className: 'bg-purple-100 text-purple-800' },\n      'student_preferences_update': { variant: 'outline', className: 'bg-amber-100 text-amber-800 border-amber-200' },\n      'export_csv': { variant: 'outline', className: 'bg-teal-100 text-teal-800 border-teal-200' },\n      'export_pdf': { variant: 'outline', className: 'bg-red-100 text-red-800 border-red-200' },\n      'setting_update': { variant: 'outline', className: 'bg-indigo-100 text-indigo-800 border-indigo-200' },\n    };\n\n    const config = actionMap[action] || { variant: 'outline', className: '' };\n    \n    return (\n      <Badge variant={config.variant} className={config.className}>\n        {action.replace(/_/g, ' ')}\n      </Badge>\n    );\n  };\n\n  const getActionDescription = (log: AuditLog) => {\n    switch (log.action) {\n      case 'user_login':\n        return `User \"${log.details?.username}\" logged in`;\n      case 'user_logout':\n        return `User \"${log.details?.username}\" logged out`;\n      case 'file_upload':\n        return `File uploaded: ${log.details?.filename} (${log.details?.type})`;\n      case 'allocation_run':\n        return 'Seat allocation algorithm executed';\n      case 'student_preferences_update':\n        return `Student preferences updated for Merit No. ${log.details?.meritNumber || 'N/A'}`;\n      case 'export_csv':\n        return 'Allocation results exported as CSV';\n      case 'export_pdf':\n        return 'Allocation results exported as PDF';\n      case 'setting_update':\n        return `Setting \"${log.details?.key}\" updated`;\n      case 'user_create':\n        return `New user created: ${log.details?.username} (${log.details?.role})`;\n      default:\n        return `${log.action.replace(/_/g, ' ')} performed on ${log.resource}`;\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Audit Log\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Operations\" },\n          { name: \"Audit Log\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <History className=\"w-5 h-5 mr-2 text-primary\" />\n              System Activity Audit Trail\n            </CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search actions, resources, or users...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-audit-logs\"\n                />\n              </div>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-audit-logs\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filter\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center p-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Timestamp</TableHead>\n                        <TableHead>Action</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Resource</TableHead>\n                        <TableHead>IP Address</TableHead>\n                        <TableHead>Time Ago</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredLogs.map((log: AuditLog) => (\n                        <TableRow key={log.id} data-testid={`audit-log-row-${log.id}`}>\n                          <TableCell className=\"font-mono text-xs\">\n                            {format(new Date(log.timestamp), 'yyyy-MM-dd HH:mm:ss')}\n                          </TableCell>\n                          <TableCell>\n                            {getActionBadge(log.action)}\n                          </TableCell>\n                          <TableCell className=\"max-w-md\">\n                            <p className=\"text-sm\">{getActionDescription(log)}</p>\n                            {log.details && Object.keys(log.details).length > 0 && (\n                              <details className=\"mt-1\">\n                                <summary className=\"text-xs text-muted-foreground cursor-pointer hover:text-foreground\">\n                                  View details\n                                </summary>\n                                <pre className=\"text-xs bg-muted p-2 rounded mt-1 overflow-auto\">\n                                  {JSON.stringify(log.details, null, 2)}\n                                </pre>\n                              </details>\n                            )}\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {log.resource}\n                            {log.resourceId && (\n                              <span className=\"block text-xs font-mono\">\n                                ID: {log.resourceId}\n                              </span>\n                            )}\n                          </TableCell>\n                          <TableCell className=\"font-mono text-xs\">\n                            {log.ipAddress || '-'}\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {formatDistanceToNow(new Date(log.timestamp), { addSuffix: true })}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                {filteredLogs.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <History className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">\n                      {searchTerm ? \"No audit logs found matching your search.\" : \"No audit logs available.\"}\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Showing {filteredLogs.length} audit log entries\n                  </p>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setPage(Math.max(0, page - 1))}\n                      disabled={page === 0}\n                      data-testid=\"button-previous-page\"\n                    >\n                      Previous\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setPage(page + 1)}\n                      disabled={filteredLogs.length < limit}\n                      data-testid=\"button-next-page\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9348},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport StatsCards from \"@/components/dashboard/stats-cards\";\nimport AuditLogPreview from \"@/components/dashboard/audit-log-preview\";\nimport DistrictSummary from \"@/components/dashboard/district-summary\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { Upload, Users, Play, FileText, BarChart3, Settings } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Dashboard\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Dashboard\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <StatsCards stats={stats} isLoading={statsLoading} />\n\n        {/* Quick Links Section */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          {user?.role === 'central_admin' && (\n            <>\n              <Card className=\"hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Upload className=\"w-5 h-5 mr-2 text-primary\" />\n                    File Management\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Upload student data and vacancy files\n                  </p>\n                  <Link href=\"/file-management\">\n                    <Button className=\"w-full\" data-testid=\"button-file-management\">\n                      Manage Files\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Play className=\"w-5 h-5 mr-2 text-primary\" />\n                    Allocation Process\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Run seat allocation algorithm\n                  </p>\n                  <Link href=\"/allocation\">\n                    <Button className=\"w-full\" data-testid=\"button-allocation\">\n                      Manage Allocation\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Users className=\"w-5 h-5 mr-2 text-primary\" />\n                    District Admins\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Manage district administrator accounts\n                  </p>\n                  <Link href=\"/district-admin-list\">\n                    <Button className=\"w-full\" data-testid=\"button-district-admins\">\n                      View Admins\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </>\n          )}\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2 text-primary\" />\n                Student Records\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Search and view student data\n              </p>\n              <Link href=\"/students\">\n                <Button className=\"w-full\" data-testid=\"button-students\">\n                  View Students\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"w-5 h-5 mr-2 text-primary\" />\n                Reports\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Generate allocation reports\n              </p>\n              <Link href=\"/reports\">\n                <Button className=\"w-full\" data-testid=\"button-reports\">\n                  View Reports\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <AuditLogPreview />\n          <DistrictSummary />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":5204},"client/src/pages/district-admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Search, \n  ShieldQuestion, \n  Edit, \n  Save, \n  X, \n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  Download,\n  Eye,\n  Lock,\n  Unlock,\n  RotateCcw,\n  Shield\n} from \"lucide-react\";\nimport type { Student } from \"@shared/schema\";\nimport { SCHOOL_DISTRICTS, COUNSELING_DISTRICTS } from \"@shared/schema\";\n\n// Use school districts for choice selection (where schools are located)\nconst DISTRICTS = SCHOOL_DISTRICTS;\nconst STREAMS = [\"Medical\", \"NonMedical\", \"Commerce\"];\n\nconst updatePreferencesSchema = z.object({\n  stream: z.enum(['Medical', 'Commerce', 'NonMedical']),\n  choice1: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice2: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice3: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice4: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice5: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice6: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice7: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice8: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice9: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice10: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n});\n\nexport default function DistrictAdmin() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingStudent, setEditingStudent] = useState<string | null>(null);\n  const [selectedStudents, setSelectedStudents] = useState<Set<string>>(new Set());\n  const [showBatchActions, setShowBatchActions] = useState(false);\n  \n  // Modal states\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isChoicesModalOpen, setIsChoicesModalOpen] = useState(false);\n  const [isUnlockRequestModalOpen, setIsUnlockRequestModalOpen] = useState(false);\n  const [isLockConfirmDialogOpen, setIsLockConfirmDialogOpen] = useState(false);\n  const [selectedStudentForEdit, setSelectedStudentForEdit] = useState<Student | null>(null);\n  const [selectedStudentForChoices, setSelectedStudentForChoices] = useState<Student | null>(null);\n  const [selectedStudentForUnlock, setSelectedStudentForUnlock] = useState<Student | null>(null);\n  const [selectedStudentForLock, setSelectedStudentForLock] = useState<Student | null>(null);\n  const [unlockReason, setUnlockReason] = useState(\"\");\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form setup for edit modal\n  const form = useForm({\n    resolver: zodResolver(updatePreferencesSchema),\n    defaultValues: {\n      stream: \"NonMedical\" as const,\n      choice1: \"\",\n      choice2: \"\",\n      choice3: \"\",\n      choice4: \"\",\n      choice5: \"\",\n      choice6: \"\",\n      choice7: \"\",\n      choice8: \"\",\n      choice9: \"\",\n      choice10: \"\",\n    },\n  });\n\n  // Update preferences mutation for modal\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (data: { studentId: string, preferences: any }) => {\n      const response = await apiRequest('PUT', `/api/students/${data.studentId}/preferences`, data.preferences);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      setIsEditModalOpen(false);\n      setSelectedStudentForEdit(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Student preferences updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update preferences\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const { data: studentsData, isLoading } = useQuery({\n    queryKey: [\"/api/students\", { limit: 200, offset: 0, district: user?.district }],\n  });\n\n  const { data: settings } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const { data: districtStatus } = useQuery({\n    queryKey: [\"/api/district-status\", user?.district],\n    enabled: !!user?.district,\n    staleTime: 0, // Ensure fresh data\n    gcTime: 0, // Don't cache responses\n  });\n\n  const deadline = (settings as any)?.find((s: any) => s.key === 'allocation_deadline')?.value;\n  const deadlineDate = deadline ? new Date(deadline) : null;\n  const isDeadlinePassed = deadlineDate ? new Date() > deadlineDate : false;\n\n\n  const lockStudentMutation = useMutation({\n    mutationFn: async ({ studentId, isLocked }: { studentId: string, isLocked: boolean }) => {\n      await apiRequest(\"PUT\", `/api/students/${studentId}/lock`, { isLocked });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Student Lock Status Updated\",\n        description: \"Student lock status has been updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Lock Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const releaseStudentMutation = useMutation({\n    mutationFn: async (studentId: string) => {\n      await apiRequest(\"PUT\", `/api/students/${studentId}/release`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/district-status\", user?.district] });\n      toast({\n        title: \"Student Released\",\n        description: \"Student has been released from district successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Release Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const batchLockMutation = useMutation({\n    mutationFn: async (studentIds: string[]) => {\n      const promises = studentIds.map(id => apiRequest(\"PUT\", `/api/students/${id}/lock`, { isLocked: true }));\n      await Promise.all(promises);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      setSelectedStudents(new Set());\n      toast({\n        title: \"Students Locked\",\n        description: `${selectedStudents.size} students have been locked successfully`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Batch Lock Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const batchUnlockMutation = useMutation({\n    mutationFn: async (studentIds: string[]) => {\n      const promises = studentIds.map(id => apiRequest(\"PUT\", `/api/students/${id}/lock`, { isLocked: false }));\n      await Promise.all(promises);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      setSelectedStudents(new Set());\n      toast({\n        title: \"Students Unlocked\",\n        description: `${selectedStudents.size} students have been unlocked successfully`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Batch Unlock Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const finalizeDistrictMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", `/api/district-status/${user?.district}/finalize`, {});\n    },\n    onSuccess: () => {\n      // Invalidate all relevant queries with exact key matching\n      queryClient.invalidateQueries({ queryKey: [\"/api/district-status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/district-status\", user?.district] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      \n      // Force refetch with await to ensure immediate update\n      queryClient.refetchQueries({ \n        queryKey: [\"/api/district-status\", user?.district],\n        type: 'active' \n      });\n      \n      // Also remove any cached data and force fresh fetch\n      queryClient.removeQueries({ queryKey: [\"/api/district-status\", user?.district] });\n      \n      toast({\n        title: \"🎉 District Finalized Successfully!\",\n        description: `${user?.district} district data has been finalized at ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', timeStyle: 'short', dateStyle: 'short' })} and submitted for allocation processing.`,\n        duration: 6000, // Show longer for important success message\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Finalization Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const autoLoadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/district/${user?.district}/auto-load-students`, {});\n      return response;\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/district-status\", user?.district] });\n      toast({\n        title: \"Students Loaded Successfully\",\n        description: `Loaded ${data.loaded} students from entrance exam results. ${data.skipped} students were already present.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Auto-load Failed\",\n        description: error.message || \"Failed to auto-load students\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n  const filteredStudents = (studentsData as any)?.students?.filter((student: Student) => \n    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.meritNumber.toString().includes(searchTerm) ||\n    student.appNo?.includes(searchTerm)\n  ) || [];\n\n  // Selection helpers\n  const toggleStudentSelection = (studentId: string) => {\n    const newSelection = new Set(selectedStudents);\n    if (newSelection.has(studentId)) {\n      newSelection.delete(studentId);\n    } else {\n      newSelection.add(studentId);\n    }\n    setSelectedStudents(newSelection);\n  };\n\n  const selectAll = () => {\n    const allIds = new Set<string>(filteredStudents.map((s: Student) => s.id));\n    setSelectedStudents(allIds);\n  };\n\n  const clearSelection = () => {\n    setSelectedStudents(new Set());\n  };\n\n  // Batch operations\n  const handleBatchLock = () => {\n    if (selectedStudents.size === 0) return;\n    \n    // Only lock students with current district that belong to this district admin\n    const selectedStudentObjects = filteredStudents.filter((s: Student) => \n      selectedStudents.has(s.id) && \n      s.counselingDistrict === user?.district && \n      s.districtAdmin === user?.username\n    );\n    \n    if (selectedStudentObjects.length === 0) {\n      toast({\n        title: \"Cannot Lock Students\",\n        description: \"Only students assigned to your district can be locked.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const studentsWithoutStream = selectedStudentObjects.filter((s: Student) => !s.stream);\n    const studentsWithIncompleteChoices = selectedStudentObjects.filter((s: Student) => \n      !s.choice1 || !s.choice2 || !s.choice3 || !s.choice4 || !s.choice5 || \n      !s.choice6 || !s.choice7 || !s.choice8 || !s.choice9 || !s.choice10\n    );\n    \n    if (studentsWithoutStream.length > 0) {\n      toast({\n        title: \"Cannot Lock Students\",\n        description: `${studentsWithoutStream.length} students don't have stream set. Please set streams before locking.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (studentsWithIncompleteChoices.length > 0) {\n      toast({\n        title: \"Cannot Lock Students\",\n        description: `${studentsWithIncompleteChoices.length} students have incomplete district preferences. Please complete all 10 choices.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    batchLockMutation.mutate(selectedStudentObjects.map((s: Student) => s.id));\n  };\n\n  const handleBatchUnlock = () => {\n    if (selectedStudents.size === 0) return;\n    batchUnlockMutation.mutate(Array.from(selectedStudents));\n  };\n\n  // Calculate finalization readiness - only consider students with current district belonging to this admin\n  const eligibleStudents = filteredStudents.filter((s: Student) => \n    s.counselingDistrict === user?.district && s.districtAdmin === user?.username\n  );\n  const totalEligibleStudents = eligibleStudents.length;\n  const lockedEligibleStudents = eligibleStudents.filter((s: Student) => s.isLocked).length;\n  const studentsWithChoices = eligibleStudents.filter((s: Student) => \n    s.choice1 || s.choice2 || s.choice3 || s.choice4 || s.choice5 || \n    s.choice6 || s.choice7 || s.choice8 || s.choice9 || s.choice10\n  ).length;\n\n  const canFinalize = lockedEligibleStudents === totalEligibleStudents && totalEligibleStudents > 0 && !isDeadlinePassed;\n  \n  // districtStatus is an array, find the current district's status\n  const currentDistrictStatus = Array.isArray(districtStatus) \n    ? districtStatus.find((status: any) => status.district === user?.district)\n    : districtStatus;\n  const isFinalized = currentDistrictStatus?.isFinalized || false;\n\n  const handleFinalize = () => {\n    if (!canFinalize) return;\n    finalizeDistrictMutation.mutate();\n  };\n\n  // Modal helper functions\n  const openEditModal = (student: Student) => {\n    if (isDeadlinePassed) {\n      toast({\n        title: \"Deadline Passed\",\n        description: \"Cannot modify preferences after the deadline\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedStudentForEdit(student);\n    form.reset({\n      stream: student.stream as any,\n      choice1: student.choice1 || '',\n      choice2: student.choice2 || '',\n      choice3: student.choice3 || '',\n      choice4: student.choice4 || '',\n      choice5: student.choice5 || '',\n      choice6: student.choice6 || '',\n      choice7: student.choice7 || '',\n      choice8: student.choice8 || '',\n      choice9: student.choice9 || '',\n      choice10: student.choice10 || '',\n    });\n    setIsEditModalOpen(true);\n  };\n\n  const openChoicesModal = (student: Student) => {\n    setSelectedStudentForChoices(student);\n    setIsChoicesModalOpen(true);\n  };\n\n  const handleModalSave = (data: any) => {\n    if (!selectedStudentForEdit) return;\n    \n    // If user is central admin, automatically set district and district admin\n    const preferences: any = { ...data };\n    if (user?.role === 'central_admin') {\n      preferences.counselingDistrict = \"Mohali\";\n      preferences.districtAdmin = \"central_admin\";\n    }\n    \n    updatePreferencesMutation.mutate({\n      studentId: selectedStudentForEdit.id,\n      preferences: preferences\n    });\n  };\n\n\n  const startEditing = (student: Student) => {\n    if (isDeadlinePassed) {\n      toast({\n        title: \"Deadline Passed\",\n        description: \"Cannot modify preferences after the deadline\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setEditingStudent(student.id);\n    form.reset({\n      stream: student.stream as any,\n      choice1: student.choice1 || '',\n      choice2: student.choice2 || '',\n      choice3: student.choice3 || '',\n      choice4: student.choice4 || '',\n      choice5: student.choice5 || '',\n      choice6: student.choice6 || '',\n      choice7: student.choice7 || '',\n      choice8: student.choice8 || '',\n      choice9: student.choice9 || '',\n      choice10: student.choice10 || '',\n    });\n  };\n\n  const cancelEditing = () => {\n    setEditingStudent(null);\n    form.reset();\n  };\n\n  const onSubmit = (values: z.infer<typeof updatePreferencesSchema>) => {\n    if (editingStudent) {\n      // If user is central admin, automatically set district and district admin\n      const preferences: any = { ...values };\n      if (user?.role === 'central_admin') {\n        preferences.counselingDistrict = \"Mohali\";\n        preferences.districtAdmin = \"central_admin\";\n      }\n      \n      updatePreferencesMutation.mutate({\n        studentId: editingStudent,\n        preferences: preferences,\n      });\n    }\n  };\n\n  const handleLockToggle = (student: Student) => {\n    if (isDeadlinePassed) {\n      toast({\n        title: \"Deadline Passed\",\n        description: \"Cannot modify lock status after the deadline\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // District admin can only lock students, not unlock them (except central admin)\n    if (student.isLocked) {\n      if (user?.role === 'central_admin') {\n        // Central admin can unlock directly\n        lockStudentMutation.mutate({\n          studentId: student.id,\n          isLocked: false,\n        });\n      } else {\n        toast({\n          title: \"Cannot Unlock\",\n          description: \"Only central admin can unlock students. You can request unlock from central admin.\",\n          variant: \"destructive\",\n        });\n      }\n      return;\n    }\n\n    // For locking, show confirmation dialog\n    setSelectedStudentForLock(student);\n    setIsLockConfirmDialogOpen(true);\n  };\n\n  const confirmLockStudent = () => {\n    if (!selectedStudentForLock) return;\n\n    // Validate that all preferences including stream are set before locking\n    if (!selectedStudentForLock.stream) {\n      toast({\n        title: \"Cannot Lock Student\",\n        description: \"Student stream must be set before locking. Please update the student's stream preference.\",\n        variant: \"destructive\",\n      });\n      setIsLockConfirmDialogOpen(false);\n      setSelectedStudentForLock(null);\n      return;\n    }\n\n    const hasAllChoices = selectedStudentForLock.choice1 && selectedStudentForLock.choice2 && selectedStudentForLock.choice3 && \n                         selectedStudentForLock.choice4 && selectedStudentForLock.choice5 && selectedStudentForLock.choice6 &&\n                         selectedStudentForLock.choice7 && selectedStudentForLock.choice8 && selectedStudentForLock.choice9 && selectedStudentForLock.choice10;\n    \n    if (!hasAllChoices) {\n      toast({\n        title: \"Cannot Lock Student\",\n        description: \"All 10 district preferences must be set before locking. Please complete all choices.\",\n        variant: \"destructive\",\n      });\n      setIsLockConfirmDialogOpen(false);\n      setSelectedStudentForLock(null);\n      return;\n    }\n\n    lockStudentMutation.mutate({\n      studentId: selectedStudentForLock.id,\n      isLocked: true,\n    });\n\n    setIsLockConfirmDialogOpen(false);\n    setSelectedStudentForLock(null);\n  };\n\n  const handleRequestUnlock = (student: Student) => {\n    setSelectedStudentForUnlock(student);\n    setUnlockReason(\"\");\n    setIsUnlockRequestModalOpen(true);\n  };\n\n  const submitUnlockRequest = async () => {\n    if (!selectedStudentForUnlock || !unlockReason.trim()) {\n      toast({\n        title: \"Reason Required\",\n        description: \"Please provide a reason for the unlock request\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/unlock-requests', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          studentId: selectedStudentForUnlock.id,\n          reason: unlockReason.trim(),\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        toast({\n          title: \"Error\",\n          description: data.message || \"Failed to send unlock request\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Unlock Request Sent\",\n          description: \"Your unlock request has been sent to central admin for review\",\n        });\n        setIsUnlockRequestModalOpen(false);\n        setSelectedStudentForUnlock(null);\n        setUnlockReason(\"\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send unlock request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleReleaseStudent = (student: Student) => {\n    if (isDeadlinePassed) {\n      toast({\n        title: \"Deadline Passed\",\n        description: \"Cannot release students after the deadline\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    releaseStudentMutation.mutate(student.id);\n  };\n\n  const handleAutoLoadStudents = () => {\n    autoLoadMutation.mutate();\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'allotted':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Allotted</Badge>;\n      case 'not_allotted':\n        return <Badge variant=\"destructive\">Not Allotted</Badge>;\n      case 'pending':\n        return <Badge variant=\"outline\">Pending</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Helper function to determine if current user can edit a specific student\n  const canEditStudent = (student: Student) => {\n    if (!user) return false;\n    \n    // Central admin can edit all students\n    if (user.role === 'central_admin') {\n      return true;\n    }\n    \n    // District admin logic\n    if (user.role === 'district_admin') {\n      // If student has no assigned district admin (N/A), any district admin can edit\n      if (!student.districtAdmin) {\n        return true;\n      }\n      \n      // Check if student belongs to this district\n      const belongsToDistrict = student.counselingDistrict === user.district;\n      \n      // If student has an assigned district admin, only that specific admin can edit\n      return student.districtAdmin === user.username && belongsToDistrict;\n    }\n    \n    return false;\n  };\n\n  // Helper function to check if all student preferences are filled\n  const areAllPreferencesFilled = (student: Student) => {\n    return !!(student.choice1?.trim() && student.choice2?.trim() && student.choice3?.trim() && \n              student.choice4?.trim() && student.choice5?.trim() && student.choice6?.trim() && \n              student.choice7?.trim() && student.choice8?.trim() && student.choice9?.trim() && \n              student.choice10?.trim() && student.stream);\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"District Administration\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"District Administration\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"space-y-6\">\n          {/* Status Banner */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <ShieldQuestion className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <h3 className=\"font-semibold\">District: {user?.district || 'All Districts'}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {isFinalized ? \n                        \"District data has been finalized and submitted for allocation\" :\n                        \"You can modify student preferences until the deadline\"\n                      }\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {isFinalized ? (\n                    <>\n                      <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">✓ Finalized</Badge>\n                    </>\n                  ) : isDeadlinePassed ? (\n                    <>\n                      <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n                      <Badge variant=\"destructive\">Deadline Passed</Badge>\n                    </>\n                  ) : deadlineDate ? (\n                    <>\n                      <Clock className=\"w-5 h-5 text-amber-500\" />\n                      <Badge variant=\"outline\" className=\"bg-amber-50 text-amber-700 border-amber-200\">\n                        {Math.ceil((deadlineDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))} days left\n                      </Badge>\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Active</Badge>\n                    </>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tabs Navigation */}\n          <Tabs defaultValue=\"student-management\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"student-management\">Student Preference Management</TabsTrigger>\n              <TabsTrigger value=\"district-finalization\">District Finalization Status</TabsTrigger>\n            </TabsList>\n\n            {/* Student Management Tab */}\n            <TabsContent value=\"student-management\" className=\"space-y-6\">\n              {/* Student Search and Management */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <Search className=\"w-5 h-5 mr-2 text-primary\" />\n                      Student Preference Management\n                    </div>\n                    {selectedStudents.size > 0 && (\n                      <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                        {selectedStudents.size} selected\n                      </Badge>\n                    )}\n                  </CardTitle>\n                  <div className=\"flex items-center justify-between gap-4\">\n                    <div className=\"relative flex-1 max-w-md\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search by name, merit number, or application number...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                        data-testid=\"input-search-students\"\n                      />\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={selectAll}\n                        disabled={filteredStudents.length === 0}\n                        data-testid=\"button-select-all\"\n                      >\n                        Select All\n                      </Button>\n                      {selectedStudents.size > 0 && (\n                        <>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={clearSelection}\n                            data-testid=\"button-clear-selection\"\n                          >\n                            Clear\n                          </Button>\n                          <Button \n                            variant=\"secondary\" \n                            size=\"sm\" \n                            onClick={handleBatchLock}\n                            disabled={batchLockMutation.isPending || isDeadlinePassed}\n                            data-testid=\"button-batch-lock\"\n                          >\n                            🔒 Lock Selected\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <div className=\"flex items-center justify-center p-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div className=\"rounded-md border\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead className=\"w-12\">\n                                <input\n                                  type=\"checkbox\"\n                                  checked={selectedStudents.size === filteredStudents.length && filteredStudents.length > 0}\n                                  onChange={selectedStudents.size === filteredStudents.length ? clearSelection : selectAll}\n                                  className=\"rounded border-gray-300\"\n                                  data-testid=\"checkbox-select-all\"\n                                />\n                              </TableHead>\n                              <TableHead>App No.</TableHead>\n                              <TableHead>Merit No.</TableHead>\n                              <TableHead>Name</TableHead>\n                              <TableHead>Stream</TableHead>\n                              <TableHead>Counseling District</TableHead>\n                              <TableHead>District Admin</TableHead>\n                              <TableHead>Locked</TableHead>\n                              <TableHead>Choices (1-10)</TableHead>\n                              <TableHead>Actions</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {filteredStudents.map((student: Student) => (\n                              <TableRow key={student.id} data-testid={`student-row-${student.meritNumber}`}>\n                                <TableCell>\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={selectedStudents.has(student.id)}\n                                    onChange={() => toggleStudentSelection(student.id)}\n                                    className=\"rounded border-gray-300\"\n                                    data-testid={`checkbox-select-${student.meritNumber}`}\n                                  />\n                                </TableCell>\n                                <TableCell className=\"font-medium\">{student.appNo}</TableCell>\n                                <TableCell className=\"font-medium\">{student.meritNumber}</TableCell>\n                                <TableCell>{student.name}</TableCell>\n                                <TableCell>{student.stream}</TableCell>\n                                <TableCell>{student.counselingDistrict || 'N/A'}</TableCell>\n                                <TableCell>{student.districtAdmin || 'N/A'}</TableCell>\n                                <TableCell>\n                                  {student.isLocked === true ? (\n                                    <Badge variant=\"destructive\" className=\"bg-red-100 text-red-800\">\n                                      🔒 Locked\n                                    </Badge>\n                                  ) : (\n                                    <Badge variant=\"outline\" className=\"bg-green-100 text-green-800\">\n                                      🔓 Unlocked\n                                    </Badge>\n                                  )}\n                                </TableCell>\n                                <TableCell className=\"text-sm text-muted-foreground max-w-xs\">\n                                  <div className=\"flex items-center justify-center\">\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => openChoicesModal(student)}\n                                      className=\"p-1 h-6 w-6\"\n                                      data-testid={`button-view-choices-${student.meritNumber}`}\n                                    >\n                                      <Eye className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"flex gap-1\">\n                                    {canEditStudent(student) ? (\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => openEditModal(student)}\n                                        disabled={isDeadlinePassed || student.isLocked === true}\n                                        data-testid={`button-edit-${student.meritNumber}`}\n                                      >\n                                        <Edit className=\"w-3 h-3 mr-1\" />\n                                        Edit\n                                      </Button>\n                                    ) : (\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        disabled\n                                        data-testid={`button-edit-disabled-${student.meritNumber}`}\n                                        className=\"text-muted-foreground\"\n                                      >\n                                        <Edit className=\"w-3 h-3 mr-1\" />\n                                        Edit\n                                      </Button>\n                                    )}\n                                    {/* Lock/Unlock buttons - only show if user can edit student */}\n                                    {canEditStudent(student) && (\n                                      student.isLocked === true ? (\n                                        user?.role === 'central_admin' ? (\n                                          <Button\n                                            variant=\"outline\"\n                                            size=\"sm\"\n                                            onClick={() => handleLockToggle(student)}\n                                            disabled={isDeadlinePassed}\n                                            data-testid={`button-unlock-${student.meritNumber}`}\n                                          >\n                                            🔓 Unlock\n                                          </Button>\n                                        ) : (\n                                          <Button\n                                            variant=\"outline\"\n                                            size=\"sm\"\n                                            onClick={() => handleRequestUnlock(student)}\n                                            disabled={isDeadlinePassed}\n                                            data-testid={`button-request-unlock-${student.meritNumber}`}\n                                          >\n                                            📝 Request Unlock\n                                          </Button>\n                                        )\n                                      ) : areAllPreferencesFilled(student) ? (\n                                        <Button\n                                          variant=\"secondary\"\n                                          size=\"sm\"\n                                          onClick={() => handleLockToggle(student)}\n                                          disabled={isDeadlinePassed}\n                                          data-testid={`button-lock-${student.meritNumber}`}\n                                        >\n                                          🔒 Lock\n                                        </Button>\n                                      ) : (\n                                        <Button\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          disabled\n                                          data-testid={`button-lock-disabled-${student.meritNumber}`}\n                                          className=\"text-muted-foreground\"\n                                          title=\"Fill all preferences to enable lock\"\n                                        >\n                                          🔒 Lock\n                                        </Button>\n                                      )\n                                    )}\n                                    {/* Show release button only if user can edit student, student has current district and data is not locked */}\n                                    {canEditStudent(student) && student.counselingDistrict && !student.isLocked && (\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => handleReleaseStudent(student)}\n                                        disabled={isDeadlinePassed}\n                                        data-testid={`button-release-${student.meritNumber}`}\n                                      >\n                                        <RotateCcw className=\"w-3 h-3 mr-1\" />\n                                        Release\n                                      </Button>\n                                    )}\n                                  </div>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </div>\n\n                      {filteredStudents.length === 0 && (\n                        <div className=\"text-center py-8\">\n                          <p className=\"text-muted-foreground\">No students found matching your search.</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* District Finalization Tab */}\n            <TabsContent value=\"district-finalization\" className=\"space-y-6\">\n              {/* Finalization Status Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"w-5 h-5 mr-2 text-primary\" />\n                    District Finalization Status\n                  </div>\n                  <Button\n                    variant={isFinalized ? \"secondary\" : (canFinalize ? \"default\" : \"outline\")}\n                    size=\"sm\"\n                    onClick={handleFinalize}\n                    disabled={isFinalized || !canFinalize || finalizeDistrictMutation.isPending}\n                    data-testid=\"button-finalize-district\"\n                  >\n                    {isFinalized ? \"District Finalized\" : (finalizeDistrictMutation.isPending ? \"Finalizing...\" : \"Finalize District\")}\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"p-3 border rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{totalEligibleStudents}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Students</div>\n                  </div>\n                  <div className=\"p-3 border rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">{lockedEligibleStudents}</div>\n                    <div className=\"text-sm text-muted-foreground\">Locked Students</div>\n                  </div>\n                  <div className=\"p-3 border rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-600\">{studentsWithChoices}</div>\n                    <div className=\"text-sm text-muted-foreground\">Students with Choices</div>\n                  </div>\n                </div>\n                \n                {!canFinalize && totalEligibleStudents > 0 && (\n                  <div className=\"mt-4 p-3 bg-amber-50 dark:bg-amber-950/30 rounded-lg border border-amber-200 dark:border-amber-800\">\n                    <p className=\"text-sm text-amber-800 dark:text-amber-300\">\n                      <strong>To finalize:</strong> All students must be locked before you can finalize the district data.\n                      {lockedEligibleStudents < totalEligibleStudents && (\n                        <span> You need to lock {totalEligibleStudents - lockedEligibleStudents} more students.</span>\n                      )}\n                    </p>\n                  </div>\n                )}\n\n                {canFinalize && (\n                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-950/30 rounded-lg border border-green-200 dark:border-green-800\">\n                    <p className=\"text-sm text-green-800 dark:text-green-300\">\n                      <strong>Ready to finalize!</strong> All students are locked and your district is ready for allocation processing.\n                    </p>\n                    <p className=\"text-xs text-green-700 dark:text-green-400 mt-1 flex items-center\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      Status checked at: {new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', dateStyle: 'medium', timeStyle: 'medium' })}\n                    </p>\n                  </div>\n                )}\n\n                {isFinalized && (\n                  <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800\">\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                        <strong>District Finalized!</strong> Your district data has been successfully finalized and submitted for allocation processing.\n                      </p>\n                      {currentDistrictStatus?.finalizedAt && (\n                        <p className=\"text-xs text-blue-700 dark:text-blue-400 flex items-center\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Finalized at: {new Date(currentDistrictStatus.finalizedAt).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', dateStyle: 'medium', timeStyle: 'medium' })}\n                        </p>\n                      )}\n                      {currentDistrictStatus?.finalizedBy && (\n                        <p className=\"text-xs text-blue-700 dark:text-blue-400 flex items-center\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Finalized by: {currentDistrictStatus.finalizedBy}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            </TabsContent>\n          </Tabs>\n\n\n          {/* Edit Modal */}\n          <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Edit Student Preferences - {selectedStudentForEdit?.name}</DialogTitle>\n              </DialogHeader>\n              \n              {/* Central Admin Notice */}\n              {user?.role === 'central_admin' && (\n                <div className=\"p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800 mb-4\" data-testid=\"text-central-admin-edit-notice\">\n                  <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                    <strong>Central Admin Mode:</strong> When you save these preferences, the student will be automatically assigned to district <strong>\"Mohali\"</strong> with district admin <strong>\"central_admin\"</strong>.\n                  </p>\n                </div>\n              )}\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleModalSave)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"stream\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Stream</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-stream\">\n                                <SelectValue placeholder=\"Select stream\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {STREAMS.map((stream) => (\n                                <SelectItem key={stream} value={stream}>\n                                  {stream}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"mb-4 p-3 bg-amber-50 dark:bg-amber-950/30 rounded-lg border border-amber-200 dark:border-amber-800\">\n                    <p className=\"text-sm text-amber-800 dark:text-amber-300\">\n                      <strong>District Choices:</strong> Students can select up to 10 districts in order of preference. \n                      Only the 10 school districts where seats are available are shown. Students will be allocated to their highest available choice during the allocation process.\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-5 gap-3 mb-4\">\n                    {Array.from({ length: 10 }, (_, i) => i + 1).map((choiceNum) => (\n                      <FormField\n                        key={choiceNum}\n                        control={form.control}\n                        name={`choice${choiceNum}` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Choice {choiceNum}</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid={`select-choice${choiceNum}`}>\n                                  <SelectValue placeholder=\"Select district\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\" \">None</SelectItem>\n                                {DISTRICTS.map((district) => (\n                                  <SelectItem key={district} value={district}>\n                                    {district}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    ))}\n                  </div>\n\n                  <DialogFooter>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsEditModalOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={updatePreferencesMutation.isPending}\n                      data-testid=\"button-save-preferences\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {updatePreferencesMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          {/* Choices View Modal */}\n          <Dialog open={isChoicesModalOpen} onOpenChange={setIsChoicesModalOpen}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>District Choices - {selectedStudentForChoices?.name}</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-3\">\n                <div className=\"grid grid-cols-1 gap-2\">\n                  {selectedStudentForChoices && [\n                    selectedStudentForChoices.choice1, selectedStudentForChoices.choice2, \n                    selectedStudentForChoices.choice3, selectedStudentForChoices.choice4, \n                    selectedStudentForChoices.choice5, selectedStudentForChoices.choice6,\n                    selectedStudentForChoices.choice7, selectedStudentForChoices.choice8, \n                    selectedStudentForChoices.choice9, selectedStudentForChoices.choice10\n                  ].map((choice, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded\">\n                      <span className=\"font-medium\">Choice {index + 1}:</span>\n                      <span className={choice ? \"text-blue-600\" : \"text-gray-400\"}>\n                        {choice || \"Not set\"}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n                \n                {selectedStudentForChoices && (\n                  <div className=\"mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded\">\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div><strong>Stream:</strong> {selectedStudentForChoices.stream || \"Not set\"}</div>\n                      <div><strong>Status:</strong> {selectedStudentForChoices.isLocked ? \"🔒 Locked\" : \"🔓 Unlocked\"}</div>\n                      <div><strong>Merit Number:</strong> {selectedStudentForChoices.meritNumber}</div>\n                      <div><strong>App Number:</strong> {selectedStudentForChoices.appNo}</div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <DialogFooter>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setIsChoicesModalOpen(false)}\n                >\n                  Close\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n\n          {/* Unlock Request Modal */}\n          <Dialog open={isUnlockRequestModalOpen} onOpenChange={setIsUnlockRequestModalOpen}>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Request Unlock - {selectedStudentForUnlock?.name}</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-4\">\n                <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded\">\n                  <div className=\"text-sm\">\n                    <div><strong>Student:</strong> {selectedStudentForUnlock?.name}</div>\n                    <div><strong>Merit Number:</strong> {selectedStudentForUnlock?.meritNumber}</div>\n                    <div><strong>App Number:</strong> {selectedStudentForUnlock?.appNo}</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <label htmlFor=\"unlock-reason\" className=\"block text-sm font-medium mb-2\">\n                    Reason for Unlock Request <span className=\"text-red-500\">*</span>\n                  </label>\n                  <Textarea\n                    id=\"unlock-reason\"\n                    placeholder=\"Please provide a detailed reason for requesting to unlock this student's preferences...\"\n                    value={unlockReason}\n                    onChange={(e) => setUnlockReason(e.target.value)}\n                    className=\"min-h-[100px]\"\n                    data-testid=\"textarea-unlock-reason\"\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsUnlockRequestModalOpen(false);\n                    setSelectedStudentForUnlock(null);\n                    setUnlockReason(\"\");\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={submitUnlockRequest}\n                  disabled={!unlockReason.trim()}\n                  data-testid=\"button-submit-unlock-request\"\n                >\n                  Send Request\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n\n          {/* Lock Confirmation Dialog */}\n          <AlertDialog open={isLockConfirmDialogOpen} onOpenChange={setIsLockConfirmDialogOpen}>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Lock Student Preferences</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Are you sure you want to lock {selectedStudentForLock?.name}'s preferences? \n                  This will prevent further edits to their district choices until unlocked by a central administrator.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              \n              {selectedStudentForLock && (\n                <div className=\"space-y-3 py-4\">\n                  <div className=\"grid grid-cols-2 gap-4 p-3 bg-muted rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Student Name</p>\n                      <p className=\"font-semibold\" data-testid=\"text-lock-student-name\">\n                        {selectedStudentForLock.name}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Merit Number</p>\n                      <p className=\"font-mono\" data-testid=\"text-lock-student-merit\">\n                        {selectedStudentForLock.meritNumber}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Stream</p>\n                      <p className=\"font-semibold\" data-testid=\"text-lock-student-stream\">\n                        {selectedStudentForLock.stream}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Total Choices</p>\n                      <p className=\"font-semibold\">\n                        {[selectedStudentForLock.choice1, selectedStudentForLock.choice2, selectedStudentForLock.choice3,\n                          selectedStudentForLock.choice4, selectedStudentForLock.choice5, selectedStudentForLock.choice6,\n                          selectedStudentForLock.choice7, selectedStudentForLock.choice8, selectedStudentForLock.choice9,\n                          selectedStudentForLock.choice10].filter(Boolean).length} / 10\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-3 border-l-4 border-amber-500 bg-amber-50 dark:bg-amber-950/20\">\n                    <p className=\"text-sm text-amber-800 dark:text-amber-200\">\n                      ⚠️ Once locked, only a central administrator can unlock this student's preferences. \n                      This action ensures data integrity during the allocation process.\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              <AlertDialogFooter>\n                <AlertDialogCancel \n                  onClick={() => {\n                    setIsLockConfirmDialogOpen(false);\n                    setSelectedStudentForLock(null);\n                  }}\n                  data-testid=\"button-cancel-lock\"\n                >\n                  Cancel\n                </AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={confirmLockStudent}\n                  disabled={lockStudentMutation.isPending}\n                  data-testid=\"button-confirm-lock\"\n                  className=\"bg-red-600 hover:bg-red-700\"\n                >\n                  {lockStudentMutation.isPending ? \"Locking...\" : \"🔒 Lock Student\"}\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n\n        </main>\n    </div>\n  );\n}\n","size_bytes":58320},"client/src/pages/export-results.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Download, \n  FileText, \n  FileSpreadsheet, \n  Check, \n  AlertTriangle,\n  Calendar,\n  Users,\n  BarChart3\n} from \"lucide-react\";\n\nexport default function ExportResults() {\n  const [isExportingCSV, setIsExportingCSV] = useState(false);\n  const [isExportingPDF, setIsExportingPDF] = useState(false);\n  const { toast } = useToast();\n\n  const { data: allocationStatus } = useQuery({\n    queryKey: [\"/api/allocation/status\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const handleExportCSV = async () => {\n    setIsExportingCSV(true);\n    try {\n      const response = await fetch('/api/export/csv', {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `allocation_results_${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Export Successful\",\n        description: \"CSV file has been downloaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export CSV file\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExportingCSV(false);\n    }\n  };\n\n  const handleExportPDF = async () => {\n    setIsExportingPDF(true);\n    try {\n      const response = await fetch('/api/export/pdf', {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `allocation_results_${new Date().toISOString().split('T')[0]}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Export Successful\",\n        description: \"PDF file has been downloaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\", \n        description: \"Failed to export PDF file\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExportingPDF(false);\n    }\n  };\n\n  const canExport = allocationStatus?.completed;\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Export Results\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Operations\" },\n          { name: \"Export Results\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Export Options */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Download className=\"w-5 h-5 mr-2 text-primary\" />\n                  Export Allocation Results\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Download the complete allocation results in your preferred format\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {!canExport ? (\n                  <div className=\"text-center p-8 bg-amber-50 rounded-lg border border-amber-200\">\n                    <AlertTriangle className=\"w-12 h-12 text-amber-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-amber-800 mb-2\">\n                      Allocation Not Completed\n                    </h3>\n                    <p className=\"text-sm text-amber-600 mb-4\">\n                      Please complete the seat allocation process before exporting results.\n                    </p>\n                    <Button \n                      onClick={() => window.location.href = '/allocation'}\n                      variant=\"outline\"\n                      data-testid=\"button-go-to-allocation\"\n                    >\n                      Go to Allocation\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2 mb-4\">\n                      <Check className=\"w-5 h-5 text-green-500\" />\n                      <span className=\"text-sm font-medium text-green-700\">\n                        Allocation completed successfully\n                      </span>\n                    </div>\n\n                    {/* CSV Export */}\n                    <Card>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                            <FileSpreadsheet className=\"w-6 h-6 text-green-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold mb-1\">CSV Export</h3>\n                            <p className=\"text-sm text-muted-foreground mb-3\">\n                              Export complete allocation data as a CSV file. Includes all student records, \n                              choices, and allocation results. Perfect for further analysis or data processing.\n                            </p>\n                            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mb-3\">\n                              <span>• All student records</span>\n                              <span>• Choice preferences</span>\n                              <span>• Allocation status</span>\n                              <span>• Merit numbers</span>\n                            </div>\n                            <Button \n                              onClick={handleExportCSV}\n                              disabled={isExportingCSV}\n                              data-testid=\"button-export-csv\"\n                            >\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              {isExportingCSV ? \"Exporting...\" : \"Export CSV\"}\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* PDF Export */}\n                    <Card>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                            <FileText className=\"w-6 h-6 text-red-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold mb-1\">PDF Report</h3>\n                            <p className=\"text-sm text-muted-foreground mb-3\">\n                              Generate a comprehensive PDF report with allocation summary, \n                              statistics, and detailed results. Ideal for official documentation and reports.\n                            </p>\n                            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mb-3\">\n                              <span>• Summary statistics</span>\n                              <span>• Allocation breakdown</span>\n                              <span>• Student listings</span>\n                              <span>• Official format</span>\n                            </div>\n                            <Button \n                              onClick={handleExportPDF}\n                              disabled={isExportingPDF}\n                              data-testid=\"button-export-pdf\"\n                            >\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              {isExportingPDF ? \"Generating...\" : \"Export PDF\"}\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Export Summary */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Export Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Export Status</span>\n                    <Badge variant={canExport ? \"secondary\" : \"outline\"} className={canExport ? \"bg-green-100 text-green-800\" : \"\"}>\n                      {canExport ? \"Ready\" : \"Pending\"}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Total Records</span>\n                    <span className=\"font-medium\" data-testid=\"export-total-records\">\n                      {stats?.totalStudents || 0}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Allocated</span>\n                    <span className=\"font-medium text-green-600\" data-testid=\"export-allocated-count\">\n                      {stats ? stats.totalStudents - stats.pendingAllocations : 0}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Not Allocated</span>\n                    <span className=\"font-medium text-red-600\" data-testid=\"export-not-allocated-count\">\n                      {stats?.pendingAllocations || 0}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Completion Rate</span>\n                    <span className=\"font-medium\" data-testid=\"export-completion-rate\">\n                      {stats?.completionRate || 0}%\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Export Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-start space-x-2\">\n                    <Calendar className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium\">Export Date</p>\n                      <p className=\"text-muted-foreground\">\n                        {new Date().toLocaleDateString('en-US', { \n                          year: 'numeric', \n                          month: 'long', \n                          day: 'numeric' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-2\">\n                    <Users className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium\">Data Scope</p>\n                      <p className=\"text-muted-foreground\">\n                        All student records with complete allocation details\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-2\">\n                    <BarChart3 className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium\">Format</p>\n                      <p className=\"text-muted-foreground\">\n                        CSV for data analysis, PDF for reporting\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13099},"client/src/pages/file-management.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport FileUploadSection from \"@/components/dashboard/file-upload-section\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Check, X, Clock } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function FileManagement() {\n  const { data: files } = useQuery({\n    queryKey: [\"/api/files\"],\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\"><Check className=\"w-3 h-3 mr-1\" />Processed</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\"><X className=\"w-3 h-3 mr-1\" />Failed</Badge>;\n      case 'uploaded':\n        return <Badge variant=\"outline\"><Clock className=\"w-3 h-3 mr-1\" />Uploaded</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"File Management\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"File Management\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <FileUploadSection />\n          </div>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2 text-primary\" />\n                Upload History\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {(files as any[])?.map((file: any) => (\n                  <div key={file.id} className=\"flex items-center justify-between p-3 border border-border rounded-lg\">\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium truncate\" data-testid={`file-${file.id}`}>\n                        {file.originalName}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {file.type} • {(file.size / 1024).toFixed(1)} KB\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {formatDistanceToNow(new Date(file.createdAt), { addSuffix: true })}\n                      </p>\n                      {file.validationResults?.errors?.length > 0 && (\n                        <div className=\"mt-1\">\n                          <p className=\"text-xs text-red-600\">\n                            {file.validationResults.errors[0]}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"ml-4\">\n                      {getStatusBadge(file.status)}\n                    </div>\n                  </div>\n                )) || (\n                  <p className=\"text-sm text-muted-foreground\">No files uploaded yet</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3286},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { PasswordInput } from \"@/components/ui/password-input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { GraduationCap } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport default function Login() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<z.infer<typeof loginSchema>>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (values: z.infer<typeof loginSchema>) => {\n      await apiRequest(\"POST\", \"/api/auth/login\", values);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to the Seat Allotment System\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof loginSchema>) {\n    loginMutation.mutate(values);\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-primary rounded-lg flex items-center justify-center mb-4\">\n            <GraduationCap className=\"w-6 h-6 text-primary-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl\">Seat Allotment System</CardTitle>\n          <CardDescription>\n            Sign in to access the management dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter your username\" \n                        data-testid=\"input-username\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <PasswordInput \n                        placeholder=\"Enter your password\"\n                        data-testid=\"input-password\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4101},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, FileText, Users, MapPin, TrendingUp } from \"lucide-react\";\nimport type { Student, Vacancy } from \"@shared/schema\";\n\ninterface AllocationStats {\n  totalStudents: number;\n  allottedStudents: number;\n  notAllottedStudents: number;\n  allocationsByDistrict: Record<string, number>;\n}\n\nexport default function Reports() {\n  const [activeTab, setActiveTab] = useState(\"station-allotments\");\n\n  const { data: students, isLoading: studentsLoading } = useQuery<Student[]>({\n    queryKey: [\"/api/students\", { allocated: true }],\n  });\n\n  const { data: vacancies, isLoading: vacanciesLoading } = useQuery<Vacancy[]>({\n    queryKey: [\"/api/vacancies\"],\n  });\n\n  const { data: allocationStats, isLoading: statsLoading } = useQuery<AllocationStats>({\n    queryKey: [\"/api/allocation/stats\"],\n  });\n\n  const allottedStudents = students?.filter(s => s.allocationStatus === 'allotted') || [];\n  const notAllottedStudents = students?.filter(s => s.allocationStatus === 'not_allotted') || [];\n\n  // Group allotted students by district and stream\n  const allotmentsByDistrict = allottedStudents.reduce((acc, student) => {\n    if (!student.allottedDistrict) return acc;\n    \n    if (!acc[student.allottedDistrict]) {\n      acc[student.allottedDistrict] = {\n        Medical: [],\n        Commerce: [],\n        NonMedical: []\n      };\n    }\n    acc[student.allottedDistrict][student.stream as keyof typeof acc[string]].push(student);\n    return acc;\n  }, {} as Record<string, Record<string, Student[]>>);\n\n  // Group vacancies by district and stream for calculations\n  const vacancySummaryByDistrict = vacancies?.reduce((acc, vacancy) => {\n    const { district, stream } = vacancy;\n    if (!acc[district]) {\n      acc[district] = { Medical: { total: 0, available: 0 }, Commerce: { total: 0, available: 0 }, NonMedical: { total: 0, available: 0 } };\n    }\n    \n    acc[district][stream as keyof typeof acc[string]].total += vacancy.totalSeats || 0;\n    acc[district][stream as keyof typeof acc[string]].available += vacancy.availableSeats || 0;\n    return acc;\n  }, {} as Record<string, Record<string, { total: number, available: number }>>);\n\n  // Calculate remaining vacancies per district\n  const remainingVacancies = Object.entries(vacancySummaryByDistrict || {}).map(([district, streams]) => {\n    const districtAllotments = allotmentsByDistrict[district] || { Medical: [], Commerce: [], NonMedical: [] };\n    \n    const medicalTotal = streams.Medical.total;\n    const commerceTotal = streams.Commerce.total;\n    const nonMedicalTotal = streams.NonMedical.total;\n    \n    const medicalAllocated = districtAllotments.Medical.length;\n    const commerceAllocated = districtAllotments.Commerce.length;\n    const nonMedicalAllocated = districtAllotments.NonMedical.length;\n    \n    return {\n      district,\n      medicalVacancies: medicalTotal,\n      commerceVacancies: commerceTotal,\n      nonMedicalVacancies: nonMedicalTotal,\n      remainingMedical: medicalTotal - medicalAllocated,\n      remainingCommerce: commerceTotal - commerceAllocated,\n      remainingNonMedical: nonMedicalTotal - nonMedicalAllocated,\n      totalAllocated: medicalAllocated + commerceAllocated + nonMedicalAllocated,\n      totalVacancies: medicalTotal + commerceTotal + nonMedicalTotal\n    };\n  });\n\n  const exportToCSV = () => {\n    if (activeTab === 'station-allotments') {\n      const csvData = allottedStudents.map(student => ({\n        'App No': student.appNo,\n        'Merit Number': student.meritNumber,\n        'Student Name': student.name,\n        'Stream': student.stream,\n        'Allotted District': student.allottedDistrict,\n        'Allotted Stream': student.allottedStream\n      }));\n      downloadCSV(csvData, 'station-allotments.csv');\n    } else {\n      const csvData = remainingVacancies.map(vacancy => ({\n        'District': vacancy.district,\n        'Medical Vacancies': vacancy.medicalVacancies,\n        'Medical Allocated': vacancy.medicalVacancies - vacancy.remainingMedical,\n        'Medical Remaining': vacancy.remainingMedical,\n        'Commerce Vacancies': vacancy.commerceVacancies,\n        'Commerce Allocated': vacancy.commerceVacancies - vacancy.remainingCommerce,\n        'Commerce Remaining': vacancy.remainingCommerce,\n        'NonMedical Vacancies': vacancy.nonMedicalVacancies,\n        'NonMedical Allocated': vacancy.nonMedicalVacancies - vacancy.remainingNonMedical,\n        'NonMedical Remaining': vacancy.remainingNonMedical,\n        'Total Allocated': vacancy.totalAllocated,\n        'Total Remaining': vacancy.totalVacancies - vacancy.totalAllocated\n      }));\n      downloadCSV(csvData, 'remaining-vacancies.csv');\n    }\n  };\n\n  const downloadCSV = (data: any[], filename: string) => {\n    if (data.length === 0) return;\n    \n    const headers = Object.keys(data[0]);\n    const csvContent = [\n      headers.join(','),\n      ...data.map(row => headers.map(header => `\"${row[header] || ''}\"`).join(','))\n    ].join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  if (studentsLoading || vacanciesLoading || statsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Reports</h1>\n            <p className=\"text-muted-foreground\">\n              View allocation results and remaining vacancies\n            </p>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map(i => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                  <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Reports</h1>\n          <p className=\"text-muted-foreground\">\n            View allocation results and remaining vacancies\n          </p>\n        </div>\n        <Button onClick={exportToCSV} data-testid=\"button-export-csv\">\n          <Download className=\"w-4 h-4 mr-2\" />\n          Export CSV\n        </Button>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"w-5 h-5 text-blue-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Students</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-students\">\n                  {allocationStats?.totalStudents || students?.length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"w-5 h-5 text-green-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Allotted</p>\n                <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-allotted-students\">\n                  {allocationStats?.allottedStudents || allottedStudents.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"w-5 h-5 text-red-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Not Allotted</p>\n                <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-not-allotted-students\">\n                  {allocationStats?.notAllottedStudents || notAllottedStudents.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <MapPin className=\"w-5 h-5 text-purple-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Districts</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-districts\">\n                  {vacancies?.length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"station-allotments\" data-testid=\"tab-station-allotments\">\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Station Allotments\n          </TabsTrigger>\n          <TabsTrigger value=\"remaining-vacancies\" data-testid=\"tab-remaining-vacancies\">\n            <MapPin className=\"w-4 h-4 mr-2\" />\n            Remaining Vacancies\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"station-allotments\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Station-wise Allotments</CardTitle>\n              <CardDescription>\n                Students allocated to each district by stream\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {Object.keys(allotmentsByDistrict).length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No allocations found</p>\n                  <p className=\"text-sm text-muted-foreground\">Run the allocation process to see results</p>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {Object.entries(allotmentsByDistrict).map(([district, streams]) => (\n                    <div key={district} className=\"border rounded-lg p-4\">\n                      <h3 className=\"font-semibold text-lg mb-4\">{district}</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        {(['Medical', 'Commerce', 'NonMedical'] as const).map(stream => (\n                          <div key={stream} className=\"space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <h4 className=\"font-medium\">{stream}</h4>\n                              <Badge variant=\"secondary\" data-testid={`badge-${district}-${stream.toLowerCase()}-count`}>\n                                {streams[stream].length} students\n                              </Badge>\n                            </div>\n                            {streams[stream].length > 0 && (\n                              <div className=\"space-y-1 max-h-40 overflow-y-auto\">\n                                {streams[stream].map(student => (\n                                  <div key={student.id} className=\"text-sm p-2 bg-muted rounded flex justify-between\">\n                                    <span data-testid={`text-student-${student.appNo}`}>{student.name}</span>\n                                    <span className=\"text-muted-foreground\">Merit: {student.meritNumber}</span>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"remaining-vacancies\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Remaining Vacancies</CardTitle>\n              <CardDescription>\n                Available seats after allocation by district and stream\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {remainingVacancies.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <MapPin className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No vacancy data found</p>\n                  <p className=\"text-sm text-muted-foreground\">Upload vacancy data to see remaining seats</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse border border-border\">\n                    <thead>\n                      <tr className=\"bg-muted\">\n                        <th className=\"border border-border p-3 text-left\">District</th>\n                        <th className=\"border border-border p-3 text-center\">Medical</th>\n                        <th className=\"border border-border p-3 text-center\">Commerce</th>\n                        <th className=\"border border-border p-3 text-center\">Non-Medical</th>\n                        <th className=\"border border-border p-3 text-center\">Total</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {remainingVacancies.map((vacancy, index) => (\n                        <tr key={`vacancy-${vacancy.district}-${index}`}>\n                          <td className=\"border border-border p-3 font-medium\">\n                            {vacancy.district}\n                          </td>\n                          <td className=\"border border-border p-3 text-center\">\n                            <div className=\"space-y-1\">\n                              <div data-testid={`text-${vacancy.district}-medical-remaining`}>\n                                <span className={vacancy.remainingMedical > 0 ? \"text-green-600 font-medium\" : \"text-red-600\"}>\n                                  {vacancy.remainingMedical}\n                                </span>\n                                <span className=\"text-muted-foreground\"> / {vacancy.medicalVacancies}</span>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"border border-border p-3 text-center\">\n                            <div className=\"space-y-1\">\n                              <div data-testid={`text-${vacancy.district}-commerce-remaining`}>\n                                <span className={vacancy.remainingCommerce > 0 ? \"text-green-600 font-medium\" : \"text-red-600\"}>\n                                  {vacancy.remainingCommerce}\n                                </span>\n                                <span className=\"text-muted-foreground\"> / {vacancy.commerceVacancies}</span>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"border border-border p-3 text-center\">\n                            <div className=\"space-y-1\">\n                              <div data-testid={`text-${vacancy.district}-nonmedical-remaining`}>\n                                <span className={vacancy.remainingNonMedical > 0 ? \"text-green-600 font-medium\" : \"text-red-600\"}>\n                                  {vacancy.remainingNonMedical}\n                                </span>\n                                <span className=\"text-muted-foreground\"> / {vacancy.nonMedicalVacancies}</span>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"border border-border p-3 text-center\">\n                            <div className=\"space-y-1\">\n                              <div data-testid={`text-${vacancy.district}-total-remaining`}>\n                                <span className={vacancy.totalVacancies - vacancy.totalAllocated > 0 ? \"text-green-600 font-medium\" : \"text-red-600\"}>\n                                  {vacancy.totalVacancies - vacancy.totalAllocated}\n                                </span>\n                                <span className=\"text-muted-foreground\"> / {vacancy.totalVacancies}</span>\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17237},"client/src/pages/students.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DataPagination } from \"@/components/ui/data-pagination\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Search, Users, Eye, FileText, UserCheck, Edit3, Save, X, Clock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Student, StudentsEntranceResult } from \"@shared/schema\";\n\nexport default function Students() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(50);\n  const [selectedStudent, setSelectedStudent] = useState<StudentsEntranceResult | Student | null>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [editingEntranceResult, setEditingEntranceResult] = useState<string | null>(null);\n  const [editingStream, setEditingStream] = useState<string>(\"\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const isDistrictAdmin = user?.role === 'district_admin';\n  const isCentralAdmin = user?.role === 'central_admin';\n\n  // Fetch entrance results for central admin first tab or district admin\n  const { data: entranceResultsData, isLoading: isLoadingEntrance } = useQuery<{students: StudentsEntranceResult[], total: number}>({\n    queryKey: [\"/api/students-entrance-results\", { limit, offset: page * limit }],\n    enabled: isDistrictAdmin || isCentralAdmin,\n  });\n\n  // Fetch student records for central admin second tab\n  const { data: studentsData, isLoading: isLoadingStudents } = useQuery<{students: Student[], total: number}>({\n    queryKey: [\"/api/students\", { limit, offset: page * limit }],\n    enabled: isCentralAdmin,\n  });\n\n  const filteredEntranceResults = entranceResultsData?.students?.filter((entranceResult: StudentsEntranceResult) => {\n    return entranceResult.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           entranceResult.meritNo.toString().includes(searchTerm) ||\n           entranceResult.applicationNo?.includes(searchTerm) ||\n           entranceResult.rollNo?.includes(searchTerm);\n  }) || [];\n\n  const filteredStudents = studentsData?.students?.filter((student: Student) => {\n    return student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           student.meritNumber.toString().includes(searchTerm) ||\n           student.appNo?.includes(searchTerm);\n  }) || [];\n\n  const handleViewStudent = (student: StudentsEntranceResult | Student) => {\n    setSelectedStudent(student);\n    setIsViewDialogOpen(true);\n  };\n\n  // Update entrance result mutation\n  const updateEntranceResultMutation = useMutation({\n    mutationFn: async ({ id, stream }: { id: string, stream: string }) => {\n      const response = await apiRequest('PUT', `/api/students-entrance-results/${id}`, { stream });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students-entrance-results\"] });\n      toast({\n        title: \"Success\",\n        description: \"Stream updated successfully\",\n      });\n      setEditingEntranceResult(null);\n      setEditingStream(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update stream\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditStream = (entranceResult: StudentsEntranceResult) => {\n    setEditingEntranceResult(entranceResult.id);\n    setEditingStream(entranceResult.stream || \"\");\n  };\n\n  const handleSaveStream = () => {\n    if (editingEntranceResult) {\n      updateEntranceResultMutation.mutate({ id: editingEntranceResult, stream: editingStream });\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingEntranceResult(null);\n    setEditingStream(\"\");\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'allotted':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Allotted</Badge>;\n      case 'not_allotted':\n        return <Badge variant=\"destructive\">Not Allotted</Badge>;\n      case 'pending':\n        return <Badge variant=\"outline\">Pending</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const EntranceResultsTable = ({ results, isLoading }: { results: StudentsEntranceResult[], isLoading: boolean }) => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search by name, merit number, application number, or roll number...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-entrance-results\"\n          />\n        </div>\n      </div>\n      {isLoading ? (\n        <div className=\"flex items-center justify-center p-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      ) : (\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Merit No.</TableHead>\n                <TableHead>App No.</TableHead>\n                <TableHead>Roll No.</TableHead>\n                <TableHead>Name</TableHead>\n                <TableHead>Marks</TableHead>\n                <TableHead>Gender</TableHead>\n                <TableHead>Category</TableHead>\n                <TableHead>Stream</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {results.map((entranceResult: StudentsEntranceResult) => (\n                <TableRow key={entranceResult.id} data-testid={`entrance-result-row-${entranceResult.meritNo}`}>\n                  <TableCell className=\"font-medium\">{entranceResult.meritNo}</TableCell>\n                  <TableCell className=\"font-mono text-sm\">{entranceResult.applicationNo}</TableCell>\n                  <TableCell className=\"font-mono text-sm\">{entranceResult.rollNo}</TableCell>\n                  <TableCell>{entranceResult.studentName}</TableCell>\n                  <TableCell className=\"font-medium\">{entranceResult.marks}</TableCell>\n                  <TableCell>\n                    <Badge variant={entranceResult.gender === 'Male' ? 'default' : entranceResult.gender === 'Female' ? 'secondary' : 'outline'}>\n                      {entranceResult.gender}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={entranceResult.category === 'Open' ? 'default' : 'secondary'}>\n                      {entranceResult.category}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {editingEntranceResult === entranceResult.id ? (\n                      <Select value={editingStream} onValueChange={setEditingStream}>\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue placeholder=\"Select stream\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">None</SelectItem>\n                          <SelectItem value=\"Medical\">Medical</SelectItem>\n                          <SelectItem value=\"Commerce\">Commerce</SelectItem>\n                          <SelectItem value=\"NonMedical\">NonMedical</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        {entranceResult.stream ? (\n                          <Badge variant={entranceResult.stream === 'Medical' ? 'default' : entranceResult.stream === 'Commerce' ? 'secondary' : 'outline'}>\n                            {entranceResult.stream}\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"outline\">Not Set</Badge>\n                        )}\n                        {isCentralAdmin && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditStream(entranceResult)}\n                            data-testid={`button-edit-stream-${entranceResult.meritNo}`}\n                          >\n                            <Edit3 className=\"w-3 h-3\" />\n                          </Button>\n                        )}\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      {editingEntranceResult === entranceResult.id ? (\n                        <>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={handleSaveStream}\n                            disabled={updateEntranceResultMutation.isPending}\n                            data-testid={`button-save-stream-${entranceResult.meritNo}`}\n                          >\n                            <Save className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={handleCancelEdit}\n                            disabled={updateEntranceResultMutation.isPending}\n                            data-testid={`button-cancel-edit-${entranceResult.meritNo}`}\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </>\n                      ) : (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleViewStudent(entranceResult)}\n                          data-testid={`button-view-${entranceResult.meritNo}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      )}\n      {results.length === 0 && !isLoading && (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">No entrance results found matching your search.</p>\n        </div>\n      )}\n    </div>\n  );\n\n  const StudentRecordsTable = ({ students, isLoading }: { students: Student[], isLoading: boolean }) => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search by name, merit number, or application number...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-students\"\n          />\n        </div>\n      </div>\n      {isLoading ? (\n        <div className=\"flex items-center justify-center p-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      ) : (\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>App No.</TableHead>\n                <TableHead>Merit No.</TableHead>\n                <TableHead>Name</TableHead>\n                <TableHead>Gender</TableHead>\n                <TableHead>Category</TableHead>\n                <TableHead>Stream</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Locked Status</TableHead>\n                <TableHead>Allotted District</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {students.map((student: Student) => (\n                <TableRow key={student.id} data-testid={`student-row-${student.meritNumber}`}>\n                  <TableCell className=\"font-mono text-sm\">{student.appNo}</TableCell>\n                  <TableCell className=\"font-medium\">{student.meritNumber}</TableCell>\n                  <TableCell>{student.name}</TableCell>\n                  <TableCell>\n                    <Badge variant={student.gender === 'Male' ? 'default' : student.gender === 'Female' ? 'secondary' : 'outline'}>\n                      {student.gender}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={student.category === 'Open' ? 'default' : 'secondary'}>\n                      {student.category}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={student.stream === 'Medical' ? 'default' : student.stream === 'Commerce' ? 'secondary' : 'outline'}>\n                      {student.stream}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{getStatusBadge(student.allocationStatus || 'pending')}</TableCell>\n                  <TableCell>\n                    {student.isLocked ? (\n                      <div className=\"flex items-center space-x-1\">\n                        <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-800 border-yellow-200\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Locked\n                        </Badge>\n                        {student.lockedAt && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            {formatDistanceToNow(new Date(student.lockedAt), { addSuffix: true })}\n                          </div>\n                        )}\n                      </div>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-muted-foreground\">Unlocked</Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {student.allottedDistrict ? (\n                      <Badge className=\"bg-green-100 text-green-800\">{student.allottedDistrict}</Badge>\n                    ) : '-'}\n                  </TableCell>\n                  <TableCell>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      onClick={() => handleViewStudent(student)}\n                      data-testid={`button-view-${student.meritNumber}`}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      )}\n      {students.length === 0 && !isLoading && (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">No student records found matching your search.</p>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Students\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Students\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        {isDistrictAdmin ? (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2 text-primary\" />\n                Entrance Results\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <EntranceResultsTable results={filteredEntranceResults} isLoading={isLoadingEntrance} />\n              <div className=\"mt-4\">\n                <DataPagination\n                  currentPage={page}\n                  totalItems={entranceResultsData?.total || 0}\n                  itemsPerPage={limit}\n                  onPageChange={(newPage) => {\n                    setPage(newPage);\n                    setSearchTerm(\"\");\n                  }}\n                  onItemsPerPageChange={(newLimit) => {\n                    setLimit(newLimit);\n                    setPage(0);\n                    setSearchTerm(\"\");\n                  }}\n                  showItemsPerPageSelector={true}\n                  itemsPerPageOptions={[25, 50, 100, 200]}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2 text-primary\" />\n                Student Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"entrance-results\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"entrance-results\" className=\"flex items-center gap-2\">\n                    <FileText className=\"w-4 h-4\" />\n                    Entrance Results\n                  </TabsTrigger>\n                  <TabsTrigger value=\"student-records\" className=\"flex items-center gap-2\">\n                    <UserCheck className=\"w-4 h-4\" />\n                    Student Records\n                  </TabsTrigger>\n                </TabsList>\n                <TabsContent value=\"entrance-results\" className=\"mt-6\">\n                  <EntranceResultsTable results={filteredEntranceResults} isLoading={isLoadingEntrance} />\n                  <div className=\"mt-4\">\n                    <DataPagination\n                      currentPage={page}\n                      totalItems={entranceResultsData?.total || 0}\n                      itemsPerPage={limit}\n                      onPageChange={(newPage) => {\n                        setPage(newPage);\n                        setSearchTerm(\"\");\n                      }}\n                      onItemsPerPageChange={(newLimit) => {\n                        setLimit(newLimit);\n                        setPage(0);\n                        setSearchTerm(\"\");\n                      }}\n                      showItemsPerPageSelector={true}\n                      itemsPerPageOptions={[25, 50, 100, 200]}\n                    />\n                  </div>\n                </TabsContent>\n                <TabsContent value=\"student-records\" className=\"mt-6\">\n                  <StudentRecordsTable students={filteredStudents} isLoading={isLoadingStudents} />\n                  <div className=\"mt-4\">\n                    <DataPagination\n                      currentPage={page}\n                      totalItems={studentsData?.total || 0}\n                      itemsPerPage={limit}\n                      onPageChange={(newPage) => {\n                        setPage(newPage);\n                        setSearchTerm(\"\");\n                      }}\n                      onItemsPerPageChange={(newLimit) => {\n                        setLimit(newLimit);\n                        setPage(0);\n                        setSearchTerm(\"\");\n                      }}\n                      showItemsPerPageSelector={true}\n                      itemsPerPageOptions={[25, 50, 100, 200]}\n                    />\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        )}\n        \n        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {'studentName' in (selectedStudent || {}) \n                  ? `Entrance Result - ${(selectedStudent as StudentsEntranceResult).studentName}`\n                  : `Student Record - ${(selectedStudent as Student)?.name}`\n                }\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"grid grid-cols-2 gap-4 py-4\">\n              {selectedStudent && 'studentName' in selectedStudent ? (\n                // Entrance Result Details\n                <>\n                  <div>\n                    <label className=\"font-medium\">Merit Number</label>\n                    <p>{(selectedStudent as StudentsEntranceResult).meritNo}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Application Number</label>\n                    <p>{(selectedStudent as StudentsEntranceResult).applicationNo}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Roll Number</label>\n                    <p>{(selectedStudent as StudentsEntranceResult).rollNo}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Student Name</label>\n                    <p>{(selectedStudent as StudentsEntranceResult).studentName}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Marks</label>\n                    <p>{(selectedStudent as StudentsEntranceResult).marks}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Gender</label>\n                    <p>{(selectedStudent as StudentsEntranceResult).gender}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Category</label>\n                    <p>{(selectedStudent as StudentsEntranceResult).category}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Stream</label>\n                    <p>{(selectedStudent as StudentsEntranceResult).stream}</p>\n                  </div>\n                </>\n              ) : (\n                // Student Record Details\n                <>\n                  <div>\n                    <label className=\"font-medium\">Application Number</label>\n                    <p>{(selectedStudent as Student)?.appNo}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Merit Number</label>\n                    <p>{(selectedStudent as Student)?.meritNumber}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Name</label>\n                    <p>{(selectedStudent as Student)?.name}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Gender</label>\n                    <p>{(selectedStudent as Student)?.gender}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Category</label>\n                    <p>{(selectedStudent as Student)?.category}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Stream</label>\n                    <p>{(selectedStudent as Student)?.stream}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Allocation Status</label>\n                    <p>{(selectedStudent as Student)?.allocationStatus || 'pending'}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Allotted District</label>\n                    <p>{(selectedStudent as Student)?.allottedDistrict || 'Not Allotted'}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Locked Status</label>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      {(selectedStudent as Student)?.isLocked ? (\n                        <>\n                          <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-800 border-yellow-200\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            Locked\n                          </Badge>\n                          {(selectedStudent as Student)?.lockedAt && (\n                            <span className=\"text-sm text-muted-foreground\">\n                              {formatDistanceToNow(new Date((selectedStudent as Student).lockedAt!), { addSuffix: true })}\n                            </span>\n                          )}\n                        </>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-muted-foreground\">Unlocked</Badge>\n                      )}\n                    </div>\n                  </div>\n                  {(selectedStudent as Student)?.choice1 && (\n                    <div className=\"col-span-2\">\n                      <label className=\"font-medium\">District Choices</label>\n                      <div className=\"grid grid-cols-5 gap-2 mt-2\">\n                        {[1,2,3,4,5,6,7,8,9,10].map(i => {\n                          const choice = (selectedStudent as Student)[`choice${i}` as keyof Student] as string;\n                          return choice ? (\n                            <div key={i} className=\"text-sm\">\n                              <span className=\"font-medium\">Choice {i}:</span> {choice}\n                            </div>\n                          ) : null;\n                        })}\n                      </div>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":26393},"client/src/pages/vacancies.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Building2, Users, TrendingUp, Clock, Filter, Eye, TableIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DISTRICTS, SCHOOL_DISTRICTS, COUNSELING_DISTRICTS, STREAMS, getCategoriesForGender } from \"@shared/schema\";\nimport type { Vacancy } from \"@shared/schema\";\n\nexport default function Vacancies() {\n  const [selectedStream, setSelectedStream] = useState<string>(\"all\");\n  const [selectedGender, setSelectedGender] = useState<string>(\"all\");\n  const [selectedDistrict, setSelectedDistrict] = useState<string>(\"all\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<string>(\"table\"); // 'table' | 'summary'\n\n  const { data: vacancies } = useQuery<Vacancy[]>({\n    queryKey: [\"/api/vacancies\"],\n  });\n\n  // Get unique districts that actually have vacancy data\n  const availableDistricts = Array.from(\n    new Set(vacancies?.map(v => v.district))\n  ).sort();\n\n  // Determine which districts to show in filter (only those with schools/vacancies)\n  const districtFilterOptions = availableDistricts.filter(district => \n    SCHOOL_DISTRICTS.includes(district as any)\n  );\n\n  // Filter vacancies based on selected filters\n  const filteredVacancies = vacancies?.filter(vacancy => {\n    if (selectedStream !== \"all\" && vacancy.stream !== selectedStream) return false;\n    if (selectedGender !== \"all\" && vacancy.gender !== selectedGender) return false;\n    if (selectedDistrict !== \"all\" && vacancy.district !== selectedDistrict) return false;\n    if (selectedCategory !== \"all\" && vacancy.category !== selectedCategory) return false;\n    return true;\n  }) || [];\n\n  // Group vacancies by district for district-wise summary\n  const districtSummary = filteredVacancies.reduce((acc, vacancy) => {\n    const district = vacancy.district;\n    if (!acc[district]) {\n      acc[district] = {\n        district,\n        totalSeats: 0,\n        availableSeats: 0,\n        genderBreakdown: {},\n        streamBreakdown: {},\n        categories: {}\n      };\n    }\n    \n    acc[district].totalSeats += vacancy.totalSeats || 0;\n    acc[district].availableSeats += vacancy.availableSeats || 0;\n    \n    // Gender breakdown\n    const gender = vacancy.gender;\n    if (!acc[district].genderBreakdown[gender]) {\n      acc[district].genderBreakdown[gender] = { total: 0, available: 0 };\n    }\n    acc[district].genderBreakdown[gender].total += vacancy.totalSeats || 0;\n    acc[district].genderBreakdown[gender].available += vacancy.availableSeats || 0;\n    \n    // Stream breakdown\n    const stream = vacancy.stream;\n    if (!acc[district].streamBreakdown[stream]) {\n      acc[district].streamBreakdown[stream] = { total: 0, available: 0 };\n    }\n    acc[district].streamBreakdown[stream].total += vacancy.totalSeats || 0;\n    acc[district].streamBreakdown[stream].available += vacancy.availableSeats || 0;\n    \n    // Category breakdown\n    const category = vacancy.category;\n    if (!acc[district].categories[category]) {\n      acc[district].categories[category] = { total: 0, available: 0 };\n    }\n    acc[district].categories[category].total += vacancy.totalSeats || 0;\n    acc[district].categories[category].available += vacancy.availableSeats || 0;\n    \n    return acc;\n  }, {} as Record<string, any>);\n\n  const districts = Object.values(districtSummary);\n  const totalSeats = districts.reduce((sum, d) => sum + d.totalSeats, 0);\n  const totalAvailable = districts.reduce((sum, d) => sum + d.availableSeats, 0);\n  const totalDistricts = districts.length;\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"District Vacancies\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Vacancies\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"space-y-6\">\n          {/* Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Filter className=\"w-5 h-5 mr-2 text-primary\" />\n                Filters & View Options\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"mb-3 p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg border border-blue-200 dark:border-blue-800\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-300\">\n                  <strong>Note:</strong> District filter shows only the 10 school districts where seats are available. \n                  All 23 Punjab districts have counseling services, but schools are located only in these select districts.\n                </p>\n              </div>\n              <div className=\"flex flex-wrap items-center gap-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium\">District:</label>\n                  <Select value={selectedDistrict} onValueChange={setSelectedDistrict}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"filter-district\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All School Districts</SelectItem>\n                      {districtFilterOptions.map(district => (\n                        <SelectItem key={district} value={district}>{district}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium\">Stream:</label>\n                  <Select value={selectedStream} onValueChange={setSelectedStream}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"filter-stream\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Streams</SelectItem>\n                      {STREAMS.map(stream => (\n                        <SelectItem key={stream} value={stream}>{stream}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium\">Gender:</label>\n                  <Select value={selectedGender} onValueChange={setSelectedGender}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"filter-gender\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All</SelectItem>\n                      <SelectItem value=\"Male\">Male</SelectItem>\n                      <SelectItem value=\"Female\">Female</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium\">Category:</label>\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"filter-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      <SelectItem value=\"Open\">Open</SelectItem>\n                      <SelectItem value=\"WHH\">WHH</SelectItem>\n                      <SelectItem value=\"Private\">Private</SelectItem>\n                      <SelectItem value=\"Disabled\">Disabled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Button\n                  variant={viewMode === \"table\" ? \"default\" : \"outline\"}\n                  onClick={() => setViewMode(viewMode === \"table\" ? \"summary\" : \"table\")}\n                  data-testid=\"toggle-view-mode\"\n                >\n                  <TableIcon className=\"w-4 h-4 mr-2\" />\n                  {viewMode === \"table\" ? \"Summary View\" : \"Table View\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Building2 className=\"w-5 h-5 text-primary\" />\n                  <span className=\"text-sm font-medium text-muted-foreground\">Districts</span>\n                </div>\n                <div className=\"text-2xl font-bold text-primary mt-2\" data-testid=\"total-districts\">\n                  {totalDistricts}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-blue-600\" />\n                  <span className=\"text-sm font-medium text-muted-foreground\">Total Seats</span>\n                </div>\n                <div className=\"text-2xl font-bold text-blue-600 mt-2\" data-testid=\"total-seats\">\n                  {totalSeats.toLocaleString()}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm font-medium text-muted-foreground\">Available</span>\n                </div>\n                <div className=\"text-2xl font-bold text-green-600 mt-2\" data-testid=\"available-seats\">\n                  {totalAvailable.toLocaleString()}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5 text-orange-600\" />\n                  <span className=\"text-sm font-medium text-muted-foreground\">Fill Rate</span>\n                </div>\n                <div className=\"text-2xl font-bold text-orange-600 mt-2\" data-testid=\"fill-rate\">\n                  {totalSeats ? Math.round(((totalSeats - totalAvailable) / totalSeats) * 100) : 0}%\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Vacancy Data Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Building2 className=\"w-5 h-5 mr-2 text-primary\" />\n                {viewMode === \"table\" ? \"Vacancy Records\" : \"District-wise Vacancy Summary\"}\n                {(selectedStream !== \"all\" || selectedGender !== \"all\" || selectedDistrict !== \"all\" || selectedCategory !== \"all\") && (\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    Filtered ({filteredVacancies.length} records)\n                  </Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {viewMode === \"table\" ? (\n                // Individual Vacancy Records Table\n                filteredVacancies && filteredVacancies.length > 0 ? (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>District</TableHead>\n                          <TableHead>Gender</TableHead>\n                          <TableHead>Stream</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead className=\"text-center\">Total Seats</TableHead>\n                          <TableHead className=\"text-center\">Available Seats</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredVacancies.map((vacancy) => (\n                          <TableRow key={vacancy.id} data-testid={`vacancy-record-${vacancy.id}`}>\n                            <TableCell className=\"font-medium\">{vacancy.district}</TableCell>\n                            <TableCell>\n                              <Badge variant={vacancy.gender === 'Male' ? 'default' : 'secondary'}>\n                                {vacancy.gender}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={vacancy.stream === 'Medical' ? 'default' : vacancy.stream === 'Commerce' ? 'secondary' : 'outline'}>\n                                {vacancy.stream}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={vacancy.category === 'Open' ? 'default' : 'secondary'}>\n                                {vacancy.category}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-center\">\n                              <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\n                                {vacancy.totalSeats || 0}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-center\">\n                              <Badge variant=\"outline\" className=\"bg-green-50 text-green-700\">\n                                {vacancy.availableSeats || 0}\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <TableIcon className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                    <p className=\"font-medium\">No vacancy records found</p>\n                    <p className=\"text-sm\">Upload vacancy data or adjust filters to see individual records</p>\n                  </div>\n                )\n              ) : (\n                // District Summary View (existing)\n                districts && districts.length > 0 ? (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-border\">\n                          <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">District</th>\n                          <th className=\"text-center py-3 px-4 font-medium text-muted-foreground\">Total Seats</th>\n                          <th className=\"text-center py-3 px-4 font-medium text-muted-foreground\">Available</th>\n                          <th className=\"text-center py-3 px-4 font-medium text-muted-foreground\">Allocated</th>\n                          <th className=\"text-center py-3 px-4 font-medium text-muted-foreground\">Fill %</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {districts.map((district) => {\n                          const allocated = district.totalSeats - district.availableSeats;\n                          const fillRate = district.totalSeats ? Math.round((allocated / district.totalSeats) * 100) : 0;\n                          \n                          return (\n                            <tr key={district.district} className=\"border-b border-border/50 hover:bg-muted/50\" \n                                data-testid={`vacancy-summary-${district.district.replace(/\\s+/g, '-').toLowerCase()}`}>\n                              <td className=\"py-3 px-4 font-medium\">{district.district}</td>\n                              <td className=\"py-3 px-4 text-center\">\n                                <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\n                                  {district.totalSeats}\n                                </Badge>\n                              </td>\n                              <td className=\"py-3 px-4 text-center\">\n                                <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                                  {district.availableSeats}\n                                </Badge>\n                              </td>\n                              <td className=\"py-3 px-4 text-center\">\n                                <Badge variant=\"outline\" className=\"bg-orange-50 text-orange-700 border-orange-200\">\n                                  {allocated}\n                                </Badge>\n                              </td>\n                              <td className=\"py-3 px-4 text-center\">\n                                <Badge variant=\"default\" className={`${fillRate >= 80 ? 'bg-red-100 text-red-700' : fillRate >= 60 ? 'bg-orange-100 text-orange-700' : 'bg-green-100 text-green-700'}`}>\n                                  {fillRate}%\n                                </Badge>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                        \n                        {/* Totals Row */}\n                        <tr className=\"border-t-2 border-border bg-muted/30\">\n                          <td className=\"py-3 px-4 font-bold text-primary\">TOTAL</td>\n                          <td className=\"py-3 px-4 text-center font-bold text-blue-700\">{totalSeats}</td>\n                          <td className=\"py-3 px-4 text-center font-bold text-green-700\">{totalAvailable}</td>\n                          <td className=\"py-3 px-4 text-center font-bold text-orange-700\">{totalSeats - totalAvailable}</td>\n                          <td className=\"py-3 px-4 text-center font-bold text-primary\">\n                            {totalSeats ? Math.round(((totalSeats - totalAvailable) / totalSeats) * 100) : 0}%\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                    \n                    {/* Detailed Category and Gender Breakdown */}\n                    <div className=\"mt-8 space-y-6\">\n                      <h3 className=\"text-lg font-semibold flex items-center\">\n                        <Users className=\"w-5 h-5 mr-2 text-primary\" />\n                        Remaining Vacancies by Category & Gender\n                      </h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                        {districts.map((district) => (\n                          <Card key={`breakdown-${district.district}`} className=\"border-l-4 border-l-primary\">\n                            <CardHeader className=\"pb-3\">\n                              <CardTitle className=\"text-base\">{district.district}</CardTitle>\n                            </CardHeader>\n                            <CardContent className=\"space-y-4\">\n                              {/* Gender Breakdown */}\n                              <div>\n                                <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">By Gender</h4>\n                                <div className=\"grid grid-cols-2 gap-2\">\n                                  {Object.entries(district.genderBreakdown).map(([gender, data]: [string, any]) => (\n                                    <div key={gender} className=\"bg-muted/50 p-2 rounded text-center\">\n                                      <div className=\"text-xs text-muted-foreground\">{gender}</div>\n                                      <div className=\"text-sm font-medium text-green-600\" data-testid={`remaining-${district.district}-${gender.toLowerCase()}`}>\n                                        {data.available} / {data.total}\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                              \n                              {/* Category Breakdown */}\n                              <div>\n                                <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">By Category</h4>\n                                <div className=\"grid grid-cols-2 gap-2\">\n                                  {Object.entries(district.categories).map(([category, data]: [string, any]) => (\n                                    <div key={category} className=\"bg-muted/50 p-2 rounded text-center\">\n                                      <div className=\"text-xs text-muted-foreground\">{category}</div>\n                                      <div className=\"text-sm font-medium text-green-600\" data-testid={`remaining-${district.district}-${category.toLowerCase()}`}>\n                                        {data.available} / {data.total}\n                                      </div>\n                                      {data.available === 0 && (\n                                        <Badge variant=\"destructive\" className=\"text-xs mt-1\">Full</Badge>\n                                      )}\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                              \n                              {/* Stream Breakdown */}\n                              <div>\n                                <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">By Stream</h4>\n                                <div className=\"space-y-1\">\n                                  {Object.entries(district.streamBreakdown).map(([stream, data]: [string, any]) => (\n                                    <div key={stream} className=\"flex justify-between items-center bg-muted/50 p-2 rounded\">\n                                      <div className=\"text-xs font-medium\">{stream}</div>\n                                      <div className=\"text-sm font-medium text-green-600\" data-testid={`remaining-${district.district}-${stream.toLowerCase()}`}>\n                                        {data.available} / {data.total}\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Building2 className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                    <p className=\"font-medium\">No vacancy data found</p>\n                    <p className=\"text-sm\">Upload vacancy data to see district-wise breakdown with gender and category details</p>\n                  </div>\n                )\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":23755},"client/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  username: string;\n  role: 'central_admin' | 'district_admin';\n  district?: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface Student {\n  id: string;\n  meritNumber: number;\n  applicationNumber?: string;\n  name: string;\n  stream: 'Medical' | 'Commerce' | 'NonMedical';\n  choice1?: string;\n  choice2?: string;\n  choice3?: string;\n  choice4?: string;\n  choice5?: string;\n  choice6?: string;\n  choice7?: string;\n  choice8?: string;\n  choice9?: string;\n  choice10?: string;\n  allottedDistrict?: string;\n  allottedStream?: string;\n  allocationStatus?: 'pending' | 'allotted' | 'not_allotted';\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Vacancy {\n  id: string;\n  district: string;\n  medicalVacancies: number;\n  commerceVacancies: number;\n  nonMedicalVacancies: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AuditLog {\n  id: string;\n  userId: string;\n  action: string;\n  resource: string;\n  resourceId?: string;\n  details?: any;\n  ipAddress?: string;\n  userAgent?: string;\n  timestamp: string;\n}\n\nexport interface DashboardStats {\n  totalStudents: number;\n  totalVacancies: number;\n  pendingAllocations: number;\n  completionRate: number;\n}\n","size_bytes":1235},"client/src/components/dashboard/audit-log-preview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { History } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { AuditLog } from \"@/types\";\n\nexport default function AuditLogPreview() {\n  const { data: auditLogs } = useQuery({\n    queryKey: [\"/api/audit-logs\"],\n  });\n\n  const getActivityColor = (action: string) => {\n    switch (action) {\n      case 'file_upload':\n        return 'bg-green-500';\n      case 'allocation_run':\n        return 'bg-blue-500';\n      case 'user_login':\n        return 'bg-amber-500';\n      case 'student_preferences_update':\n        return 'bg-primary';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getActivityDescription = (log: AuditLog) => {\n    switch (log.action) {\n      case 'file_upload':\n        return `File uploaded: ${log.details?.filename || 'Unknown file'}`;\n      case 'allocation_run':\n        return 'Seat allocation completed';\n      case 'user_login':\n        return `User logged in: ${log.details?.username || 'Unknown user'}`;\n      case 'student_preferences_update':\n        return `Student preferences updated (Merit No. ${log.details?.meritNumber || 'Unknown'})`;\n      default:\n        return `${log.action} performed`;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <History className=\"w-5 h-5 mr-2 text-primary\" />\n          Recent Activity\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {auditLogs?.slice(0, 5).map((log: AuditLog) => (\n            <div key={log.id} className=\"flex items-start space-x-3\">\n              <div className={`w-2 h-2 rounded-full mt-2 ${getActivityColor(log.action)}`} />\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium\" data-testid={`audit-log-${log.id}`}>\n                  {getActivityDescription(log)}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {formatDistanceToNow(new Date(log.timestamp), { addSuffix: true })}\n                </p>\n              </div>\n            </div>\n          )) || (\n            <p className=\"text-sm text-muted-foreground\">No recent activity</p>\n          )}\n        </div>\n        <Link href=\"/audit-log\">\n          <Button variant=\"ghost\" className=\"w-full mt-4 text-primary\" data-testid=\"button-view-full-audit-log\">\n            View full audit log →\n          </Button>\n        </Link>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2698},"client/src/components/dashboard/district-summary.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MapPin } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Vacancy } from \"@/types\";\n\nexport default function DistrictSummary() {\n  const { data: vacancies } = useQuery({\n    queryKey: [\"/api/vacancies\"],\n  });\n\n  const getTotal = (vacancy: Vacancy) => {\n    return (vacancy.medicalVacancies || 0) + (vacancy.commerceVacancies || 0) + (vacancy.nonMedicalVacancies || 0);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <MapPin className=\"w-5 h-5 mr-2 text-primary\" />\n          District Vacancy Summary\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {vacancies?.slice(0, 3).map((vacancy: Vacancy) => (\n            <div key={vacancy.id} className=\"flex items-center justify-between p-3 border border-border rounded-lg\">\n              <div>\n                <p className=\"font-medium\" data-testid={`district-${vacancy.district}`}>{vacancy.district}</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Medical: {vacancy.medicalVacancies} | Commerce: {vacancy.commerceVacancies} | Non-Medical: {vacancy.nonMedicalVacancies}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-lg font-bold\" data-testid={`total-${vacancy.district}`}>\n                  {getTotal(vacancy)}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">Total</p>\n              </div>\n            </div>\n          )) || (\n            <p className=\"text-sm text-muted-foreground\">No vacancy data available</p>\n          )}\n        </div>\n        <Link href=\"/vacancies\">\n          <Button variant=\"ghost\" className=\"w-full mt-4 text-primary\" data-testid=\"button-view-all-districts\">\n            View all districts →\n          </Button>\n        </Link>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2111},"client/src/components/dashboard/file-upload-section.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Upload, FileSpreadsheet, Check, Eye, X, Download } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { DataPreviewModal } from \"@/components/ui/data-preview-modal\";\nimport type { Student, Vacancy } from \"@shared/schema\";\n\nexport default function FileUploadSection() {\n  const [isDragging, setIsDragging] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [showValidationPreview, setShowValidationPreview] = useState(false);\n  const [pendingFile, setPendingFile] = useState<{file: File, type: string, validationResults: any} | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const studentFileRef = useRef<HTMLInputElement>(null);\n  const vacancyFileRef = useRef<HTMLInputElement>(null);\n  const entranceResultsFileRef = useRef<HTMLInputElement>(null);\n\n  // Fetch student data for preview\n  const { data: studentsData } = useQuery<Student[]>({\n    queryKey: [\"/api/students\", { allocated: true }],\n    enabled: showPreview,\n  });\n\n  // Fetch vacancy data for preview  \n  const { data: vacanciesData } = useQuery<Vacancy[]>({\n    queryKey: [\"/api/vacancies\"],\n    enabled: showPreview,\n  });\n\n  // File validation mutations (don't save to database)\n  const validateFileMutation = useMutation({\n    mutationFn: async ({file, type}: {file: File, type: string}) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch(`/api/files/validate/${type}`, {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      setPendingFile({\n        file: variables.file,\n        type: variables.type,\n        validationResults: data\n      });\n      setShowValidationPreview(true);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Validation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadStudentsMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch('/api/files/upload/students', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"File uploaded successfully\",\n        description: data.validationResults?.message || \"Student choices file processed\",\n      });\n      setPendingFile(null);\n      setShowValidationPreview(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadVacanciesMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch('/api/files/upload/vacancies', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vacancies\"] });\n      toast({\n        title: \"File uploaded successfully\", \n        description: data.validationResults?.message || \"Vacancy data file processed\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadEntranceResultsMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch('/api/files/upload/entrance-results', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/students-entrance-results\"] });\n      toast({\n        title: \"File uploaded successfully\",\n        description: data.validationResults?.message || \"Entrance results file processed\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadEntranceResultsTemplateMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/files/template/entrance-results', {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to download template');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'entrance_results_template.csv';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template downloaded\",\n        description: \"Entrance results template has been downloaded successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadStudentChoicesTemplateMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/files/template/student-choices', {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to download template');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'student_choices_template.csv';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template downloaded\",\n        description: \"Student choices template has been downloaded successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadVacanciesTemplateMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/files/template/vacancies', {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to download template');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'vacancies_template.csv';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template downloaded\",\n        description: \"Vacancies template has been downloaded successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent, type: 'students' | 'vacancies' | 'entrance-results') => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleFileUpload(files[0], type);\n    }\n  };\n\n  const handleFileUpload = (file: File, type: 'students' | 'vacancies' | 'entrance-results') => {\n    // First validate the file without saving to database\n    validateFileMutation.mutate({file, type});\n  };\n\n  const handleConfirmUpload = () => {\n    if (!pendingFile) return;\n    \n    // Now actually upload and save to database\n    if (pendingFile.type === 'students') {\n      uploadStudentsMutation.mutate(pendingFile.file);\n    } else if (pendingFile.type === 'vacancies') {\n      uploadVacanciesMutation.mutate(pendingFile.file);\n    } else {\n      uploadEntranceResultsMutation.mutate(pendingFile.file);\n    }\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>, type: 'students' | 'vacancies' | 'entrance-results') => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileUpload(files[0], type);\n    }\n  };\n\n  return (\n    <>\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Upload className=\"w-5 h-5 mr-2 text-primary\" />\n          File Management\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">Upload entrance results, student choices and vacancy data</p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Entrance Results Upload */}\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <label className=\"block text-sm font-medium\">Student Entrance Results</label>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => downloadEntranceResultsTemplateMutation.mutate()}\n              disabled={downloadEntranceResultsTemplateMutation.isPending}\n              data-testid=\"button-download-entrance-template\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              {downloadEntranceResultsTemplateMutation.isPending ? 'Downloading...' : 'Download Template'}\n            </Button>\n          </div>\n          <div \n            className={cn(\n              \"border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors\",\n              isDragging ? \"border-primary/50 bg-primary/5\" : \"border-border hover:border-primary/50\"\n            )}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={(e) => handleDrop(e, 'entrance-results')}\n            onClick={() => entranceResultsFileRef.current?.click()}\n            data-testid=\"upload-area-entrance-results\"\n          >\n            <FileSpreadsheet className=\"w-10 h-10 text-muted-foreground mx-auto mb-3\" />\n            <p className=\"text-sm font-medium\">Click to upload or drag and drop</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">Excel (.xlsx) or CSV files only</p>\n            <input\n              ref={entranceResultsFileRef}\n              type=\"file\"\n              className=\"hidden\"\n              accept=\".xlsx,.csv\"\n              onChange={(e) => handleFileInputChange(e, 'entrance-results')}\n              data-testid=\"input-entrance-results-file\"\n            />\n          </div>\n          {uploadEntranceResultsMutation.isSuccess && (\n            <div className=\"mt-2 flex items-center text-sm text-green-600\">\n              <Check className=\"w-4 h-4 mr-1\" />\n              <span>Entrance results file uploaded successfully</span>\n            </div>\n          )}\n        </div>\n\n        {/* Student Choices Upload */}\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <label className=\"block text-sm font-medium\">Student Choices File</label>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => downloadStudentChoicesTemplateMutation.mutate()}\n              disabled={downloadStudentChoicesTemplateMutation.isPending}\n              data-testid=\"button-download-student-template\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              {downloadStudentChoicesTemplateMutation.isPending ? 'Downloading...' : 'Download Template'}\n            </Button>\n          </div>\n          <div \n            className={cn(\n              \"border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors\",\n              isDragging ? \"border-primary/50 bg-primary/5\" : \"border-border hover:border-primary/50\"\n            )}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={(e) => handleDrop(e, 'students')}\n            onClick={() => studentFileRef.current?.click()}\n            data-testid=\"upload-area-students\"\n          >\n            <FileSpreadsheet className=\"w-10 h-10 text-muted-foreground mx-auto mb-3\" />\n            <p className=\"text-sm font-medium\">Click to upload or drag and drop</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">Excel (.xlsx) or CSV files only</p>\n            <input\n              ref={studentFileRef}\n              type=\"file\"\n              className=\"hidden\"\n              accept=\".xlsx,.csv\"\n              onChange={(e) => handleFileInputChange(e, 'students')}\n              data-testid=\"input-students-file\"\n            />\n          </div>\n          {uploadStudentsMutation.isSuccess && (\n            <div className=\"mt-2 flex items-center text-sm text-green-600\">\n              <Check className=\"w-4 h-4 mr-1\" />\n              <span>Student choices file uploaded successfully</span>\n            </div>\n          )}\n        </div>\n\n        {/* Vacancy Upload */}\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <label className=\"block text-sm font-medium\">Vacancy Data File</label>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => downloadVacanciesTemplateMutation.mutate()}\n              disabled={downloadVacanciesTemplateMutation.isPending}\n              data-testid=\"button-download-vacancy-template\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              {downloadVacanciesTemplateMutation.isPending ? 'Downloading...' : 'Download Template'}\n            </Button>\n          </div>\n          <div \n            className={cn(\n              \"border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors\",\n              isDragging ? \"border-primary/50 bg-primary/5\" : \"border-border hover:border-primary/50\"\n            )}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={(e) => handleDrop(e, 'vacancies')}\n            onClick={() => vacancyFileRef.current?.click()}\n            data-testid=\"upload-area-vacancies\"\n          >\n            <FileSpreadsheet className=\"w-10 h-10 text-muted-foreground mx-auto mb-3\" />\n            <p className=\"text-sm font-medium\">Click to upload or drag and drop</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">CSV files only</p>\n            <input\n              ref={vacancyFileRef}\n              type=\"file\"\n              className=\"hidden\"\n              accept=\".csv\"\n              onChange={(e) => handleFileInputChange(e, 'vacancies')}\n              data-testid=\"input-vacancies-file\"\n            />\n          </div>\n          {uploadVacanciesMutation.isSuccess && (\n            <div className=\"mt-2 flex items-center text-sm text-green-600\">\n              <Check className=\"w-4 h-4 mr-1\" />\n              <span>Vacancy data file uploaded successfully</span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex space-x-3\">\n          <Button \n            className=\"flex-1\"\n            disabled={uploadStudentsMutation.isPending || uploadVacanciesMutation.isPending || uploadEntranceResultsMutation.isPending}\n            data-testid=\"button-validate-files\"\n          >\n            <Check className=\"w-4 h-4 mr-2\" />\n            {(uploadStudentsMutation.isPending || uploadVacanciesMutation.isPending || uploadEntranceResultsMutation.isPending) ? \"Processing...\" : \"Validate Files\"}\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"flex-1\"\n            onClick={() => setShowPreview(true)}\n            data-testid=\"button-preview-data\"\n          >\n            <Eye className=\"w-4 h-4 mr-2\" />\n            Preview Data\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n\n    {/* Preview Data Dialog */}\n    <Dialog open={showPreview} onOpenChange={setShowPreview}>\n      <DialogContent className=\"max-w-6xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Data Preview\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowPreview(false)}\n              data-testid=\"button-close-preview\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Students Preview */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">Student Records ({studentsData?.length || 0})</h3>\n            {studentsData && studentsData.length > 0 ? (\n              <div className=\"border rounded-lg overflow-hidden\">\n                <div className=\"overflow-x-auto max-h-64\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"p-2 text-left\">App No</th>\n                        <th className=\"p-2 text-left\">Merit</th>\n                        <th className=\"p-2 text-left\">Name</th>\n                        <th className=\"p-2 text-left\">Stream</th>\n                        <th className=\"p-2 text-left\">Choice 1</th>\n                        <th className=\"p-2 text-left\">Choice 2</th>\n                        <th className=\"p-2 text-left\">Choice 3</th>\n                        <th className=\"p-2 text-left\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {studentsData.slice(0, 10).map((student) => (\n                        <tr key={student.id} className=\"border-t\">\n                          <td className=\"p-2\">{student.appNo}</td>\n                          <td className=\"p-2\">{student.meritNumber}</td>\n                          <td className=\"p-2\">{student.name}</td>\n                          <td className=\"p-2\">{student.stream}</td>\n                          <td className=\"p-2\">{student.choice1 || '-'}</td>\n                          <td className=\"p-2\">{student.choice2 || '-'}</td>\n                          <td className=\"p-2\">{student.choice3 || '-'}</td>\n                          <td className=\"p-2\">\n                            <span className={`px-2 py-1 rounded text-xs ${\n                              student.allocationStatus === 'allotted' \n                                ? 'bg-green-100 text-green-800' \n                                : student.allocationStatus === 'not_allotted'\n                                ? 'bg-red-100 text-red-800'\n                                : 'bg-yellow-100 text-yellow-800'\n                            }`}>\n                              {student.allocationStatus}\n                            </span>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                {studentsData.length > 10 && (\n                  <div className=\"p-2 text-center text-sm text-muted-foreground bg-muted\">\n                    Showing first 10 of {studentsData.length} records\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <FileSpreadsheet className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>No student data found</p>\n                <p className=\"text-sm\">Upload a student choices file to see data here</p>\n              </div>\n            )}\n          </div>\n\n          {/* Vacancies Preview */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">Vacancy Records ({vacanciesData?.length || 0})</h3>\n            {vacanciesData && vacanciesData.length > 0 ? (\n              <div className=\"border rounded-lg overflow-hidden\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"p-2 text-left\">District</th>\n                        <th className=\"p-2 text-center\">Medical</th>\n                        <th className=\"p-2 text-center\">Commerce</th>\n                        <th className=\"p-2 text-center\">Non-Medical</th>\n                        <th className=\"p-2 text-center\">Total</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {vacanciesData.map((vacancy) => (\n                        <tr key={vacancy.id} className=\"border-t\">\n                          <td className=\"p-2 font-medium\">{vacancy.district}</td>\n                          <td className=\"p-2 text-center\">{vacancy.stream === 'Medical' ? vacancy.totalSeats : 0}</td>\n                          <td className=\"p-2 text-center\">{vacancy.stream === 'Commerce' ? vacancy.totalSeats : 0}</td>\n                          <td className=\"p-2 text-center\">{vacancy.stream === 'NonMedical' ? vacancy.totalSeats : 0}</td>\n                          <td className=\"p-2 text-center font-medium\">\n                            {vacancy.totalSeats || 0}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <FileSpreadsheet className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>No vacancy data found</p>\n                <p className=\"text-sm\">Upload a vacancy data file to see data here</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n\n    {/* Data Preview Modal */}\n    {pendingFile && (\n      <DataPreviewModal\n        isOpen={showValidationPreview}\n        onClose={() => {\n          setShowValidationPreview(false);\n          setPendingFile(null);\n        }}\n        onConfirm={handleConfirmUpload}\n        validationResults={pendingFile.validationResults}\n        fileType={pendingFile.type as 'students' | 'vacancies' | 'entrance-results'}\n        fileName={pendingFile.file.name}\n        isUploading={uploadStudentsMutation.isPending || uploadVacanciesMutation.isPending || uploadEntranceResultsMutation.isPending}\n      />\n    )}\n    </>\n  );\n}\n","size_bytes":23999},"client/src/components/dashboard/quick-actions-panel.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, Clock, Play, Search, Download, History } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport AllocationModal from \"@/components/modals/allocation-modal\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function QuickActionsPanel() {\n  const [showAllocationModal, setShowAllocationModal] = useState(false);\n  const { user } = useAuth();\n\n  const { data: allocationStatus } = useQuery({\n    queryKey: [\"/api/allocation/status\"],\n  });\n\n  const steps = [\n    {\n      title: \"Data Upload\",\n      status: \"complete\",\n      icon: Check,\n      color: \"text-green-500\",\n    },\n    {\n      title: \"Validation\", \n      status: \"complete\",\n      icon: Check,\n      color: \"text-green-500\",\n    },\n    {\n      title: \"Allocation Run\",\n      status: allocationStatus?.completed ? \"complete\" : \"pending\",\n      icon: allocationStatus?.completed ? Check : Clock,\n      color: allocationStatus?.completed ? \"text-green-500\" : \"text-amber-500\",\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Allocation Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Allocation Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {steps.map((step, index) => (\n              <div key={index} className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">{step.title}</span>\n                <div className=\"flex items-center\">\n                  <step.icon className={`w-4 h-4 mr-2 ${step.color}`} />\n                  <span className={`text-sm font-medium capitalize ${step.color}`}>\n                    {step.status}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {user?.role === 'central_admin' && !allocationStatus?.completed && (\n            <Button \n              className=\"w-full mt-4\" \n              onClick={() => setShowAllocationModal(true)}\n              data-testid=\"button-run-allocation\"\n            >\n              <Play className=\"w-4 h-4 mr-2\" />\n              Run Allocation\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <Link href=\"/students\">\n              <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-search-student\">\n                <Search className=\"w-4 h-4 mr-2\" />\n                Search Student\n              </Button>\n            </Link>\n            \n            {user?.role === 'central_admin' && (\n              <Link href=\"/export-results\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-export-results\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Results\n                </Button>\n              </Link>\n            )}\n            \n            {user?.role === 'central_admin' && (\n              <Link href=\"/audit-log\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-view-audit-log\">\n                  <History className=\"w-4 h-4 mr-2\" />\n                  View Audit Log\n                </Button>\n              </Link>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <AllocationModal \n        open={showAllocationModal} \n        onOpenChange={setShowAllocationModal} \n      />\n    </div>\n  );\n}\n","size_bytes":3769},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Users, MapPin, Clock, PieChart, TrendingUp, TrendingDown } from \"lucide-react\";\nimport type { DashboardStats } from \"@/types\";\n\ninterface StatsCardsProps {\n  stats?: DashboardStats;\n  isLoading: boolean;\n}\n\nexport default function StatsCards({ stats, isLoading }: StatsCardsProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <Skeleton className=\"h-4 w-24 mb-2\" />\n              <Skeleton className=\"h-8 w-16 mb-4\" />\n              <Skeleton className=\"h-4 w-32\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const cards = [\n    {\n      title: \"Total Students\",\n      value: stats?.totalStudents || 0,\n      icon: Users,\n      color: \"bg-primary/10 text-primary\",\n      trend: { value: 12.5, isPositive: true, label: \"from last year\" },\n    },\n    {\n      title: \"Total Vacancies\", \n      value: stats?.totalVacancies || 0,\n      icon: MapPin,\n      color: \"bg-green-500/10 text-green-500\",\n      trend: { value: 8.2, isPositive: true, label: \"available seats\" },\n    },\n    {\n      title: \"Pending Allocations\",\n      value: stats?.pendingAllocations || 0,\n      icon: Clock,\n      color: \"bg-amber-500/10 text-amber-500\",\n      trend: { value: 23.1, isPositive: false, label: \"awaiting process\" },\n    },\n    {\n      title: \"Completion Rate\",\n      value: `${stats?.completionRate || 0}%`,\n      icon: PieChart,\n      color: \"bg-blue-500/10 text-blue-500\",\n      trend: { value: 4.3, isPositive: true, label: \"improvement\" },\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {cards.map((card, index) => (\n        <Card key={index}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">{card.title}</p>\n                <p className=\"text-3xl font-bold\" data-testid={`stat-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {card.value}\n                </p>\n              </div>\n              <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${card.color}`}>\n                <card.icon className=\"w-5 h-5\" />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4 text-sm\">\n              {card.trend.isPositive ? (\n                <TrendingUp className=\"w-4 h-4 text-green-500 mr-1\" />\n              ) : (\n                <TrendingDown className=\"w-4 h-4 text-red-500 mr-1\" />\n              )}\n              <span className={card.trend.isPositive ? \"text-green-500\" : \"text-red-500\"}>\n                {card.trend.value}%\n              </span>\n              <span className=\"text-muted-foreground ml-1\">{card.trend.label}</span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3150},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Menu, Bell, Clock, Users, CheckCircle, XCircle, Eye, Lock, Unlock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport type { DistrictStatus, Student } from \"@shared/schema\";\n\ninterface HeaderProps {\n  title: string;\n  breadcrumbs?: { name: string; href?: string }[];\n  onMobileMenuToggle?: () => void;\n}\n\nexport default function Header({ title, breadcrumbs = [], onMobileMenuToggle }: HeaderProps) {\n  const { user } = useAuth();\n  const { data: settings } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Fetch district statuses for central admin\n  const { data: districtStatuses } = useQuery<DistrictStatus[]>({\n    queryKey: [\"/api/district-status\"],\n    enabled: user?.role === 'central_admin',\n  });\n\n  // Fetch students for locked count display for central admin\n  const { data: studentsData } = useQuery<{ students: Student[] }>({\n    queryKey: [\"/api/students\"],\n    enabled: user?.role === 'central_admin',\n  });\n\n  // Fetch unlock requests for notifications count\n  const { data: unlockRequests } = useQuery({\n    queryKey: [\"/api/unlock-requests\"],\n    enabled: user?.role === 'central_admin',\n  });\n\n  const pendingUnlockRequests = Array.isArray(unlockRequests) \n    ? unlockRequests.filter((req: any) => req.status === 'pending').length \n    : 0;\n\n  const deadline = Array.isArray(settings) ? settings.find((s: any) => s.key === 'allocation_deadline')?.value : null;\n  const deadlineDate = deadline ? new Date(deadline) : null;\n  const daysLeft = deadlineDate ? Math.ceil((deadlineDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)) : null;\n\n  const finalizedDistricts = districtStatuses?.filter(ds => ds.isFinalized).length || 0;\n  const totalDistricts = districtStatuses?.length || 0;\n  const pendingDistricts = totalDistricts - finalizedDistricts;\n\n  // Calculate locked student counts for central admin\n  const students = studentsData?.students || [];\n  const lockedStudents = students.filter(s => s.lockedBy).length;\n  const totalStudents = students.length;\n  const unlockedStudents = totalStudents - lockedStudents;\n\n  return (\n    <header className=\"bg-card border-b border-border p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden\"\n            onClick={onMobileMenuToggle}\n            data-testid=\"button-mobile-menu\"\n          >\n            <Menu className=\"w-4 h-4\" />\n          </Button>\n          <div>\n            <h2 className=\"text-2xl font-bold\" data-testid=\"text-page-title\">{title}</h2>\n            {breadcrumbs.length > 0 && (\n              <nav className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                {breadcrumbs.map((crumb, index) => (\n                  <span key={index}>\n                    {index > 0 && <span className=\"mx-1\">›</span>}\n                    <span className={index === breadcrumbs.length - 1 ? \"text-foreground\" : \"\"}>\n                      {crumb.name}\n                    </span>\n                  </span>\n                ))}\n              </nav>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {deadlineDate && daysLeft !== null && (\n            <Badge variant={daysLeft <= 3 ? \"destructive\" : \"secondary\"} className=\"flex items-center space-x-1\">\n              <Clock className=\"w-3 h-3\" />\n              <span data-testid=\"text-deadline\">\n                {daysLeft > 0 ? `${daysLeft} days left` : \"Deadline passed\"}\n              </span>\n            </Badge>\n          )}\n\n          {user?.role === 'central_admin' && studentsData && (\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center space-x-2\" data-testid=\"button-locked-students-status\">\n                  <Lock className=\"w-4 h-4\" />\n                  <span>{lockedStudents}/{totalStudents}</span>\n                  <Badge variant={unlockedStudents > 0 ? \"secondary\" : \"default\"} className=\"ml-1\">\n                    {unlockedStudents > 0 ? \"Unlocked\" : \"All Locked\"}\n                  </Badge>\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80\" align=\"end\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-semibold\">Student Lock Status</h4>\n                    <Badge variant={lockedStudents === totalStudents ? \"default\" : \"secondary\"}>\n                      {lockedStudents}/{totalStudents} Locked\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 p-3 bg-muted rounded-lg\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Lock className=\"w-4 h-4 text-blue-600\" />\n                      <div>\n                        <p className=\"text-sm font-medium\">Locked</p>\n                        <p className=\"text-lg font-bold text-blue-600\">{lockedStudents}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Unlock className=\"w-4 h-4 text-amber-600\" />\n                      <div>\n                        <p className=\"text-sm font-medium\">Unlocked</p>\n                        <p className=\"text-lg font-bold text-amber-600\">{unlockedStudents}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {totalStudents > 0 && (\n                    <div className=\"p-3 border-l-4 border-blue-500 bg-blue-50 dark:bg-blue-950/20\">\n                      <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                        {lockedStudents === totalStudents \n                          ? \"All students are locked and ready for allocation.\" \n                          : `${unlockedStudents} students still need to be locked before final allocation.`}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </PopoverContent>\n            </Popover>\n          )}\n          \n          {user?.role === 'central_admin' && districtStatuses && (\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center space-x-2\" data-testid=\"button-district-status\">\n                  <Users className=\"w-4 h-4\" />\n                  <span>{finalizedDistricts}/{totalDistricts}</span>\n                  <Badge variant={pendingDistricts > 0 ? \"destructive\" : \"default\"} className=\"ml-1\">\n                    {pendingDistricts > 0 ? \"Pending\" : \"All Done\"}\n                  </Badge>\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80\" align=\"end\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-semibold\">District Status</h4>\n                    <Badge variant={pendingDistricts === 0 ? \"default\" : \"secondary\"}>\n                      {finalizedDistricts}/{totalDistricts} Finalized\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                    {districtStatuses.map((district) => (\n                      <div key={district.id} className=\"flex items-center justify-between p-2 rounded border\">\n                        <div className=\"flex items-center space-x-2\">\n                          {district.isFinalized ? (\n                            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          ) : (\n                            <XCircle className=\"w-4 h-4 text-red-600\" />\n                          )}\n                          <span className=\"font-medium\">{district.district}</span>\n                        </div>\n                        <div className=\"text-right text-sm text-gray-600\">\n                          <div>{district.lockedStudents}/{district.totalStudents} locked</div>\n                          <div className=\"text-xs\">{district.studentsWithChoices} with choices</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {pendingDistricts > 0 && (\n                    <div className=\"pt-2 border-t\">\n                      <p className=\"text-sm text-amber-600 flex items-center space-x-1\">\n                        <XCircle className=\"w-4 h-4\" />\n                        <span>{pendingDistricts} districts need to finalize their data</span>\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </PopoverContent>\n            </Popover>\n          )}\n          \n          {user?.role === 'central_admin' && (\n            <Link href=\"/notifications\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"w-4 h-4\" />\n                {pendingUnlockRequests > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 min-w-[18px] h-[18px] flex items-center justify-center text-xs p-0\"\n                  >\n                    {pendingUnlockRequests}\n                  </Badge>\n                )}\n              </Button>\n            </Link>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":9963},"client/src/components/layout/main-layout.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"./sidebar\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  return (\n    <div className=\"h-screen flex bg-background\">\n      {/* Desktop Sidebar */}\n      <div className=\"hidden md:block\">\n        <Sidebar />\n      </div>\n\n      {/* Mobile Sidebar */}\n      <div className={cn(\n        \"fixed inset-0 z-50 md:hidden\",\n        sidebarOpen ? \"block\" : \"hidden\"\n      )}>\n        <div className=\"fixed inset-0 bg-black/50\" onClick={() => setSidebarOpen(false)} />\n        <div className=\"relative\">\n          <Sidebar className=\"fixed left-0 top-0 h-full\" />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {children}\n      </div>\n    </div>\n  );\n}\n","size_bytes":945},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  BarChart3,\n  Upload,\n  Users,\n  MapPin,\n  Settings,\n  Calendar,\n  Download,\n  History,\n  GraduationCap,\n  ShieldQuestion,\n  UserCog,\n  User,\n  LogOut,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst navigation = [\n  {\n    name: \"Main\",\n    items: [\n      { name: \"Dashboard\", href: \"/\", icon: BarChart3, roles: [\"central_admin\", \"district_admin\"] },\n      { name: \"File Management\", href: \"/file-management\", icon: Upload, roles: [\"central_admin\"] },\n      { name: \"Students\", href: \"/students\", icon: Users, roles: [\"central_admin\", \"district_admin\"] },\n      { name: \"Vacancies\", href: \"/vacancies\", icon: MapPin, roles: [\"central_admin\", \"district_admin\"] },\n    ],\n  },\n  {\n    name: \"Operations\",\n    items: [\n      { name: \"Student Preferences\", href: \"/district-admin\", icon: UserCog, roles: [\"district_admin\"] },\n      { name: \"Student Preference Management\", href: \"/student-preference-management\", icon: UserCog, roles: [\"central_admin\"] },\n      { name: \"Run Allocation\", href: \"/allocation\", icon: Settings, roles: [\"central_admin\"] },\n      { name: \"District Analysis\", href: \"/district-analysis\", icon: BarChart3, roles: [\"central_admin\"] },\n      { name: \"Reports\", href: \"/reports\", icon: BarChart3, roles: [\"central_admin\", \"district_admin\"] },\n      { name: \"Export Results\", href: \"/export-results\", icon: Download, roles: [\"central_admin\"] },\n      { name: \"Audit Log\", href: \"/audit-log\", icon: History, roles: [\"central_admin\"] },\n      { name: \"Manage Admins\", href: \"/manage-district-admins\", icon: Users, roles: [\"central_admin\"] },\n    ],\n  },\n];\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport default function Sidebar({ className }: SidebarProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Logout Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className={cn(\"w-64 bg-card border-r border-border flex flex-col\", className)}>\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <GraduationCap className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold\">Seat Allotment</h1>\n            <p className=\"text-xs text-muted-foreground\">Management System</p>\n          </div>\n        </div>\n      </div>\n\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((section) => (\n          <div key={section.name} className=\"mb-4\">\n            <p className=\"text-xs text-muted-foreground uppercase tracking-wider mb-2\">\n              {section.name}\n            </p>\n            {section.items\n              .filter((item) => item.roles.includes(user.role))\n              .map((item) => (\n                <Link \n                  key={item.name} \n                  href={item.href}\n                  className={cn(\n                    \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors text-sm\",\n                    location === item.href\n                      ? \"bg-primary text-primary-foreground font-medium\"\n                      : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                  )}\n                  data-testid={`link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <item.icon className=\"w-4 h-4\" />\n                  <span>{item.name}</span>\n                </Link>\n              ))}\n          </div>\n        ))}\n      </nav>\n\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n            <ShieldQuestion className=\"w-4 h-4 text-secondary-foreground\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\" data-testid=\"text-user-name\">\n              {user.firstName && user.lastName \n                ? `${user.firstName} ${user.lastName}` \n                : user.username}\n            </p>\n            <p className=\"text-xs text-muted-foreground\" data-testid=\"text-user-role\">\n              {user.role === 'central_admin' ? 'Central Admin' : 'District Admin'}\n              {user.district && ` - ${user.district}`}\n            </p>\n          </div>\n        </div>\n        <div className=\"space-y-1\">\n          <Link\n            href=\"/profile\"\n            className={cn(\n              \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors text-sm w-full\",\n              location === \"/profile\"\n                ? \"bg-primary text-primary-foreground font-medium\"\n                : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n            )}\n            data-testid=\"link-profile\"\n          >\n            <User className=\"w-4 h-4\" />\n            <span>Profile Settings</span>\n          </Link>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"w-full justify-start\"\n            onClick={handleLogout}\n            disabled={logoutMutation.isPending}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            {logoutMutation.isPending ? \"Signing out...\" : \"Sign Out\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6292},"client/src/components/modals/allocation-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Check, Clock, Settings } from \"lucide-react\";\n\ninterface AllocationModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AllocationModal({ open, onOpenChange }: AllocationModalProps) {\n  const [progress, setProgress] = useState(0);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const allocationMutation = useMutation({\n    mutationFn: async () => {\n      // Simulate progress updates\n      const progressInterval = setInterval(() => {\n        setProgress((prev) => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return 90;\n          }\n          return prev + 10;\n        });\n      }, 300);\n\n      const result = await apiRequest(\"POST\", \"/api/allocation/run\");\n      clearInterval(progressInterval);\n      setProgress(100);\n      return result;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/allocation/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Allocation Completed\",\n        description: \"Seat allocation has been completed successfully\",\n      });\n      setTimeout(() => {\n        onOpenChange(false);\n        setProgress(0);\n      }, 2000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Allocation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setProgress(0);\n    },\n  });\n\n  const steps = [\n    {\n      title: \"Data validation completed\",\n      completed: true,\n      icon: Check,\n    },\n    {\n      title: \"Processing allocations...\",\n      completed: allocationMutation.isPending || progress < 100,\n      icon: allocationMutation.isPending ? Settings : Check,\n      loading: allocationMutation.isPending,\n    },\n    {\n      title: \"Generating reports\",\n      completed: progress === 100,\n      icon: progress === 100 ? Check : Clock,\n    },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Running Seat Allocation</DialogTitle>\n          <DialogDescription>\n            Processing student choices and vacancy data\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {steps.map((step, index) => (\n            <div key={index} className=\"flex items-center space-x-3\">\n              <div className={`w-4 h-4 rounded-full flex items-center justify-center ${\n                step.completed \n                  ? \"bg-green-500 text-white\" \n                  : step.loading \n                    ? \"bg-primary animate-pulse\" \n                    : \"bg-muted\"\n              }`}>\n                {step.completed && <step.icon className=\"w-3 h-3\" />}\n                {step.loading && <step.icon className=\"w-3 h-3 text-primary-foreground animate-spin\" />}\n              </div>\n              <span className={`text-sm ${\n                step.completed ? \"text-foreground\" : \"text-muted-foreground\"\n              }`}>\n                {step.title}\n              </span>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Progress</span>\n            <span data-testid=\"allocation-progress\">{progress}%</span>\n          </div>\n          <Progress value={progress} className=\"w-full\" />\n        </div>\n\n        {!allocationMutation.isPending && progress === 0 && (\n          <div className=\"flex space-x-2\">\n            <Button \n              onClick={() => allocationMutation.mutate()}\n              className=\"flex-1\"\n              data-testid=\"button-start-allocation\"\n            >\n              Start Allocation\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-allocation\"\n            >\n              Cancel\n            </Button>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4553},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/district-admin-list.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, MapPin, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nexport default function DistrictAdminList() {\n  const [currentPage, setCurrentPage] = useState(0);\n  const limit = 10;\n  \n  const { data: users, isLoading, error } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  console.log(\"Users data:\", users, \"Loading:\", isLoading, \"Error:\", error);\n\n  const districtAdmins = users?.filter(user => user.role === 'district_admin') || [];\n  const totalPages = Math.ceil(districtAdmins.length / limit);\n  const startIndex = currentPage * limit;\n  const endIndex = startIndex + limit;\n  const currentAdmins = districtAdmins.slice(startIndex, endIndex);\n\n  const getStatusBadge = (user: User) => {\n    return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Active</Badge>;\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"District Administrators\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"District Administrators\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2 text-primary\" />\n                District Admin Accounts\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Total Districts</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"total-district-admins\">{districtAdmins.length}</p>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center p-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Counseling District</TableHead>\n                        <TableHead>Username</TableHead>\n                        <TableHead>District Admin Name</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {currentAdmins.map((admin: User) => (\n                        <TableRow key={admin.id} data-testid={`admin-row-${admin.district}`}>\n                          <TableCell className=\"font-medium\">\n                            <div className=\"flex items-center\">\n                              <MapPin className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              {admin.district || 'N/A'}\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"font-mono text-sm\">{admin.username}</TableCell>\n                          <TableCell>{admin.firstName && admin.lastName ? `${admin.firstName} ${admin.lastName}` : 'N/A'}</TableCell>\n                          <TableCell>{getStatusBadge(admin)}</TableCell>\n                          <TableCell>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-${admin.district}`}>\n                              Edit\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                {!isLoading && districtAdmins.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">No district administrators found.</p>\n                    {users && (\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Total users loaded: {users.length}\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                {/* Pagination Controls */}\n                {totalPages > 1 && (\n                  <div className=\"flex items-center justify-between border-t pt-4\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Showing {startIndex + 1}-{Math.min(endIndex, districtAdmins.length)} of {districtAdmins.length} district administrators\n                    </p>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(prev => Math.max(0, prev - 1))}\n                        disabled={currentPage === 0}\n                        data-testid=\"button-prev-page\"\n                      >\n                        <ChevronLeft className=\"w-4 h-4\" />\n                      </Button>\n                      <span className=\"text-sm font-medium\">\n                        {currentPage + 1} / {totalPages}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(prev => Math.min(totalPages - 1, prev + 1))}\n                        disabled={currentPage === totalPages - 1}\n                        data-testid=\"button-next-page\"\n                      >\n                        <ChevronRight className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between pt-2\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    All districts covered\n                  </Badge>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":6547},"client/src/pages/student-details.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, User, GraduationCap, MapPin, CheckCircle, XCircle } from \"lucide-react\";\nimport type { Student } from \"@shared/schema\";\n\nexport default function StudentDetails() {\n  const params = useParams();\n  const studentId = params.id as string;\n\n  const { data: student, isLoading } = useQuery<Student>({\n    queryKey: [`/api/students/${studentId}`],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col\">\n        <Header title=\"Student Details\" />\n        <main className=\"flex-1 p-6 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!student) {\n    return (\n      <div className=\"flex-1 flex flex-col\">\n        <Header title=\"Student Details\" />\n        <main className=\"flex-1 p-6 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <p className=\"text-muted-foreground\">Student not found</p>\n            <Link href=\"/students\">\n              <Button className=\"mt-4\">Back to Students</Button>\n            </Link>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const choices = [\n    student.choice1,\n    student.choice2,\n    student.choice3,\n    student.choice4,\n    student.choice5,\n    student.choice6,\n    student.choice7,\n    student.choice8,\n    student.choice9,\n    student.choice10,\n  ].filter(Boolean) as string[];\n\n  const getChoiceStatus = (choice: string) => {\n    if (student.allottedDistrict === choice) {\n      return { status: 'allocated', color: 'bg-green-100 text-green-800', icon: CheckCircle };\n    }\n    return { status: 'not-allocated', color: 'bg-gray-100 text-gray-600', icon: XCircle };\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Student Details\"\n        breadcrumbs={[\n          { name: \"Home\", href: \"/\" },\n          { name: \"Students\", href: \"/students\" },\n          { name: student.name }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {/* Back Button */}\n          <Link href=\"/students\">\n            <Button variant=\"outline\" data-testid=\"button-back-students\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Students\n            </Button>\n          </Link>\n          {/* Student Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"w-5 h-5 mr-2 text-primary\" />\n                Student Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Application Number</p>\n                  <p className=\"font-medium\" data-testid=\"text-app-no\">{student.appNo}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Merit Number</p>\n                  <p className=\"font-medium\" data-testid=\"text-merit-no\">{student.meritNumber}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Full Name</p>\n                  <p className=\"font-medium\" data-testid=\"text-student-name\">{student.name}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Stream</p>\n                  <Badge variant=\"secondary\" className=\"font-medium\" data-testid=\"badge-stream\">\n                    <GraduationCap className=\"w-3 h-3 mr-1\" />\n                    {student.stream}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Allocation Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <MapPin className=\"w-5 h-5 mr-2 text-primary\" />\n                Allocation Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Status</p>\n                  <Badge \n                    variant={student.allocationStatus === 'allotted' ? 'default' : 'secondary'}\n                    className={\n                      student.allocationStatus === 'allotted' \n                        ? 'bg-green-100 text-green-800' \n                        : student.allocationStatus === 'not_allotted' \n                        ? 'bg-red-100 text-red-800' \n                        : 'bg-amber-100 text-amber-800'\n                    }\n                    data-testid=\"badge-allocation-status\"\n                  >\n                    {student.allocationStatus === 'allotted' ? 'Allocated' : \n                     student.allocationStatus === 'not_allotted' ? 'Not Allocated' : 'Pending'}\n                  </Badge>\n                </div>\n                {student.allottedDistrict && (\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Allocated Station</p>\n                    <p className=\"font-medium flex items-center\" data-testid=\"text-allocated-station\">\n                      <MapPin className=\"w-4 h-4 mr-1 text-primary\" />\n                      {student.allottedDistrict}\n                    </p>\n                  </div>\n                )}\n                {student.allottedStream && (\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Allocated Stream</p>\n                    <Badge variant=\"secondary\" className=\"font-medium\" data-testid=\"badge-allocated-stream\">\n                      {student.allottedStream}\n                    </Badge>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* District Choices */}\n          <Card>\n            <CardHeader>\n              <CardTitle>District Preferences</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Student's preferences in order of priority\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {choices.map((choice, index) => {\n                  const { status, color, icon: StatusIcon } = getChoiceStatus(choice);\n                  return (\n                    <div\n                      key={index}\n                      className={`p-3 rounded-lg border ${\n                        student.allottedDistrict === choice\n                          ? 'border-green-200 bg-green-50'\n                          : 'border-border bg-card'\n                      }`}\n                      data-testid={`choice-${index + 1}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                          <span className=\"text-xs text-muted-foreground mr-2\">\n                            {index + 1}.\n                          </span>\n                          <span className=\"font-medium\">{choice}</span>\n                        </div>\n                        {student.allottedDistrict === choice && (\n                          <StatusIcon className=\"w-4 h-4 text-green-600\" />\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              {choices.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No district preferences recorded</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":8280},"client/src/pages/manage-district-admins.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { PasswordInput } from \"@/components/ui/password-input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { DataPagination } from \"@/components/ui/data-pagination\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Plus, \n  Edit2, \n  Trash2, \n  Save, \n  X,\n  UserPlus,\n  Ban,\n  Shield,\n  Key\n} from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\nimport { DISTRICTS } from \"@shared/schema\";\n\nconst createAdminSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  district: z.enum(DISTRICTS as any),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n});\n\nconst updateAdminSchema = createAdminSchema.partial().omit({ password: true });\n\nconst passwordResetSchema = z.object({\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password confirmation is required\"),\n}).refine(data => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport default function ManageDistrictAdmins() {\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [editingAdmin, setEditingAdmin] = useState<User | null>(null);\n  const [resetPasswordAdmin, setResetPasswordAdmin] = useState<User | null>(null);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [itemsPerPage, setItemsPerPage] = useState(25);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const districtAdmins = users?.filter(user => user.role === 'district_admin') || [];\n  \n  // Pagination logic\n  const totalAdmins = districtAdmins.length;\n  const startIndex = currentPage * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedAdmins = districtAdmins.slice(startIndex, endIndex);\n\n  const createForm = useForm<z.infer<typeof createAdminSchema>>({\n    resolver: zodResolver(createAdminSchema),\n    defaultValues: {\n      username: '',\n      password: '',\n      district: undefined,\n      firstName: '',\n      lastName: '',\n      email: '',\n    },\n  });\n\n  const editForm = useForm<z.infer<typeof updateAdminSchema>>({\n    resolver: zodResolver(updateAdminSchema),\n    defaultValues: {\n      username: '',\n      district: undefined,\n      firstName: '',\n      lastName: '',\n      email: '',\n    },\n  });\n\n  const passwordResetForm = useForm<z.infer<typeof passwordResetSchema>>({\n    resolver: zodResolver(passwordResetSchema),\n    defaultValues: {\n      newPassword: '',\n      confirmPassword: '',\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof createAdminSchema>) => {\n      await apiRequest(\"POST\", \"/api/users\", {\n        ...data,\n        role: 'district_admin',\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setShowCreateDialog(false);\n      createForm.reset();\n      toast({\n        title: \"Admin Created\",\n        description: \"District administrator has been created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Creation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: z.infer<typeof updateAdminSchema> }) => {\n      await apiRequest(\"PUT\", `/api/users/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditingAdmin(null);\n      editForm.reset();\n      toast({\n        title: \"Admin Updated\",\n        description: \"District administrator has been updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Admin Deleted\",\n        description: \"District administrator has been deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Deletion Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const blockMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"PUT\", `/api/users/${id}/block`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Admin Blocked\",\n        description: \"District administrator has been blocked successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Block Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unblockMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"PUT\", `/api/users/${id}/unblock`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Admin Unblocked\",\n        description: \"District administrator has been unblocked successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Unblock Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ id, newPassword }: { id: string, newPassword: string }) => {\n      await apiRequest(\"PUT\", `/api/users/${id}/reset-password`, { newPassword });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setResetPasswordAdmin(null);\n      passwordResetForm.reset();\n      toast({\n        title: \"Password Reset\",\n        description: \"District administrator password has been reset successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Password Reset Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const startEdit = (admin: User) => {\n    setEditingAdmin(admin);\n    editForm.reset({\n      username: admin.username,\n      district: admin.district as any,\n      firstName: admin.firstName || '',\n      lastName: admin.lastName || '',\n      email: admin.email || '',\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingAdmin(null);\n    editForm.reset();\n  };\n\n  const onCreateSubmit = (values: z.infer<typeof createAdminSchema>) => {\n    createMutation.mutate(values);\n  };\n\n  const onEditSubmit = (values: z.infer<typeof updateAdminSchema>) => {\n    if (editingAdmin) {\n      updateMutation.mutate({ id: editingAdmin.id, data: values });\n    }\n  };\n\n  const onPasswordResetSubmit = (values: z.infer<typeof passwordResetSchema>) => {\n    if (resetPasswordAdmin) {\n      resetPasswordMutation.mutate({ id: resetPasswordAdmin.id, newPassword: values.newPassword });\n    }\n  };\n\n  const startPasswordReset = (admin: User) => {\n    setResetPasswordAdmin(admin);\n    passwordResetForm.reset();\n  };\n\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Manage District Administrators\" \n        breadcrumbs={[\n          { name: \"Home\", href: \"/\" },\n          { name: \"Manage District Administrators\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2 text-primary\" />\n                District Administrators\n              </div>\n              <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-admin\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add District Admin\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      <UserPlus className=\"w-5 h-5 mr-2 inline\" />\n                      Create District Administrator\n                    </DialogTitle>\n                  </DialogHeader>\n                  <Form {...createForm}>\n                    <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={createForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter first name\" {...field} data-testid=\"input-first-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={createForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter last name\" {...field} data-testid=\"input-last-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={createForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"Enter email address\" {...field} data-testid=\"input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={createForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter username\" {...field} data-testid=\"input-username\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={createForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <PasswordInput placeholder=\"Enter password\" {...field} data-testid=\"input-password\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={createForm.control}\n                        name=\"district\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>District</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-district\">\n                                  <SelectValue placeholder=\"Select district\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {DISTRICTS.map(district => (\n                                  <SelectItem key={district} value={district}>\n                                    {district}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end space-x-2 pt-4\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-save-admin\">\n                          {createMutation.isPending ? \"Creating...\" : \"Create Admin\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center p-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>District Admin Name</TableHead>\n                        <TableHead>Username</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Counseling District</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead className=\"w-32\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {paginatedAdmins.map((admin) => (\n                        <TableRow key={admin.id}>\n                          <TableCell>\n                            <div className=\"font-medium\" data-testid={`text-name-${admin.id}`}>\n                              {admin.firstName} {admin.lastName}\n                            </div>\n                          </TableCell>\n                          <TableCell data-testid={`text-username-${admin.id}`}>\n                            {admin.username}\n                          </TableCell>\n                          <TableCell data-testid={`text-email-${admin.id}`}>\n                            {admin.email || 'N/A'}\n                          </TableCell>\n                          <TableCell data-testid={`text-district-${admin.id}`}>\n                            <Badge variant=\"outline\">{admin.district}</Badge>\n                          </TableCell>\n                          <TableCell data-testid={`status-${admin.id}`}>\n                            {admin.isBlocked ? (\n                              <Badge variant=\"destructive\">\n                                Blocked\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                                Active\n                              </Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => startEdit(admin)}\n                                data-testid={`button-edit-${admin.id}`}\n                              >\n                                <Edit2 className=\"w-3 h-3\" />\n                              </Button>\n                              \n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => startPasswordReset(admin)}\n                                className=\"text-blue-600 hover:text-blue-700\"\n                                data-testid={`button-reset-password-${admin.id}`}\n                              >\n                                <Key className=\"w-3 h-3\" />\n                              </Button>\n                              \n                              {admin.isBlocked ? (\n                                <AlertDialog>\n                                  <AlertDialogTrigger asChild>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      className=\"text-green-600 hover:text-green-700\"\n                                      data-testid={`button-unblock-${admin.id}`}\n                                    >\n                                      <Shield className=\"w-3 h-3\" />\n                                    </Button>\n                                  </AlertDialogTrigger>\n                                  <AlertDialogContent>\n                                    <AlertDialogHeader>\n                                      <AlertDialogTitle>Unblock Administrator</AlertDialogTitle>\n                                      <AlertDialogDescription>\n                                        Are you sure you want to unblock {admin.firstName} {admin.lastName}? \n                                        They will be able to access the system again.\n                                      </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                      <AlertDialogAction\n                                        onClick={() => unblockMutation.mutate(admin.id)}\n                                        disabled={unblockMutation.isPending}\n                                        data-testid={`confirm-unblock-${admin.id}`}\n                                      >\n                                        {unblockMutation.isPending ? \"Unblocking...\" : \"Unblock\"}\n                                      </AlertDialogAction>\n                                    </AlertDialogFooter>\n                                  </AlertDialogContent>\n                                </AlertDialog>\n                              ) : (\n                                <AlertDialog>\n                                  <AlertDialogTrigger asChild>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      className=\"text-orange-600 hover:text-orange-700\"\n                                      data-testid={`button-block-${admin.id}`}\n                                    >\n                                      <Ban className=\"w-3 h-3\" />\n                                    </Button>\n                                  </AlertDialogTrigger>\n                                  <AlertDialogContent>\n                                    <AlertDialogHeader>\n                                      <AlertDialogTitle>Block Administrator</AlertDialogTitle>\n                                      <AlertDialogDescription>\n                                        Are you sure you want to block {admin.firstName} {admin.lastName}? \n                                        They will not be able to access the system until unblocked.\n                                      </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                      <AlertDialogAction\n                                        onClick={() => blockMutation.mutate(admin.id)}\n                                        disabled={blockMutation.isPending}\n                                        data-testid={`confirm-block-${admin.id}`}\n                                        className=\"bg-orange-600 hover:bg-orange-700\"\n                                      >\n                                        {blockMutation.isPending ? \"Blocking...\" : \"Block\"}\n                                      </AlertDialogAction>\n                                    </AlertDialogFooter>\n                                  </AlertDialogContent>\n                                </AlertDialog>\n                              )}\n                              \n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"text-red-600 hover:text-red-700\"\n                                    data-testid={`button-delete-${admin.id}`}\n                                  >\n                                    <Trash2 className=\"w-3 h-3\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>Delete Administrator</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      Are you sure you want to delete {admin.firstName} {admin.lastName}? \n                                      This action cannot be undone.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction\n                                      onClick={() => deleteMutation.mutate(admin.id)}\n                                      disabled={deleteMutation.isPending}\n                                      data-testid={`confirm-delete-${admin.id}`}\n                                      className=\"bg-red-600 hover:bg-red-700\"\n                                    >\n                                      {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n                \n                <DataPagination\n                  currentPage={currentPage}\n                  totalItems={totalAdmins}\n                  itemsPerPage={itemsPerPage}\n                  onPageChange={setCurrentPage}\n                  onItemsPerPageChange={(newLimit) => {\n                    setItemsPerPage(newLimit);\n                    setCurrentPage(0); // Reset to first page when changing items per page\n                  }}\n                  showItemsPerPageSelector={true}\n                  itemsPerPageOptions={[10, 25, 50, 100]}\n                />\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Dialog */}\n        <Dialog open={!!editingAdmin} onOpenChange={(open) => !open && cancelEdit()}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                <Edit2 className=\"w-5 h-5 mr-2 inline\" />\n                Edit District Administrator\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter first name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter last name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={editForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"Enter email address\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter username\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"district\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>District</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select district\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {DISTRICTS.map(district => (\n                            <SelectItem key={district} value={district}>\n                              {district}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={cancelEdit}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateMutation.isPending}>\n                    {updateMutation.isPending ? \"Updating...\" : \"Update Admin\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Password Reset Dialog */}\n        <Dialog open={!!resetPasswordAdmin} onOpenChange={(open) => !open && setResetPasswordAdmin(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                <Key className=\"w-5 h-5 mr-2 inline\" />\n                Reset Password for {resetPasswordAdmin?.firstName} {resetPasswordAdmin?.lastName}\n              </DialogTitle>\n              <DialogDescription>\n                Enter a new password for this district administrator. The password must be at least 6 characters long.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...passwordResetForm}>\n              <form onSubmit={passwordResetForm.handleSubmit(onPasswordResetSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={passwordResetForm.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Password</FormLabel>\n                      <FormControl>\n                        <PasswordInput \n                          placeholder=\"Enter new password\"\n                          data-testid=\"input-new-password\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={passwordResetForm.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm New Password</FormLabel>\n                      <FormControl>\n                        <PasswordInput \n                          placeholder=\"Confirm new password\"\n                          data-testid=\"input-confirm-password\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setResetPasswordAdmin(null)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={resetPasswordMutation.isPending}\n                    data-testid=\"button-confirm-reset-password\"\n                  >\n                    {resetPasswordMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}","size_bytes":32587},"client/src/pages/student-preference-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Search, \n  UserCog, \n  Edit, \n  Save, \n  X, \n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  Eye,\n  Lock,\n  Unlock,\n  XCircle,\n} from \"lucide-react\";\nimport type { Student } from \"@shared/schema\";\nimport { SCHOOL_DISTRICTS, COUNSELING_DISTRICTS } from \"@shared/schema\";\n\nconst DISTRICTS = SCHOOL_DISTRICTS;\nconst STREAMS = [\"Medical\", \"NonMedical\", \"Commerce\"];\n\nconst updatePreferencesSchema = z.object({\n  stream: z.enum(['Medical', 'Commerce', 'NonMedical']),\n  choice1: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice2: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice3: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice4: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice5: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice6: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice7: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice8: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice9: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n  choice10: z.string().transform(val => val === \" \" ? \"\" : val).optional(),\n});\n\nexport default function StudentPreferenceManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isChoicesModalOpen, setIsChoicesModalOpen] = useState(false);\n  const [selectedStudentForEdit, setSelectedStudentForEdit] = useState<Student | null>(null);\n  const [selectedStudentForChoices, setSelectedStudentForChoices] = useState<Student | null>(null);\n  \n  // Confirmation dialog states\n  const [isLockConfirmDialogOpen, setIsLockConfirmDialogOpen] = useState(false);\n  const [isUnlockConfirmDialogOpen, setIsUnlockConfirmDialogOpen] = useState(false);\n  const [isReleaseConfirmDialogOpen, setIsReleaseConfirmDialogOpen] = useState(false);\n  const [selectedStudentForLock, setSelectedStudentForLock] = useState<Student | null>(null);\n  const [selectedStudentForUnlock, setSelectedStudentForUnlock] = useState<Student | null>(null);\n  const [selectedStudentForRelease, setSelectedStudentForRelease] = useState<Student | null>(null);\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Helper function to check if student preferences are complete\n  const areAllPreferencesFilled = (student: Student) => {\n    if (!student.stream || !student.stream.trim()) return false;\n    \n    const choices = [\n      student.choice1, student.choice2, student.choice3, student.choice4, student.choice5,\n      student.choice6, student.choice7, student.choice8, student.choice9, student.choice10\n    ];\n    \n    return choices.every(choice => choice && choice.trim());\n  };\n\n  // Form setup for edit modal\n  const form = useForm({\n    resolver: zodResolver(updatePreferencesSchema),\n    defaultValues: {\n      stream: \"NonMedical\" as const,\n      choice1: \"\",\n      choice2: \"\",\n      choice3: \"\",\n      choice4: \"\",\n      choice5: \"\",\n      choice6: \"\",\n      choice7: \"\",\n      choice8: \"\",\n      choice9: \"\",\n      choice10: \"\",\n    },\n  });\n\n  // Lock student for editing mutation\n  const lockForEditMutation = useMutation({\n    mutationFn: async (studentId: string) => {\n      const response = await apiRequest('POST', `/api/students/${studentId}/lock`);\n      return await response.json();\n    },\n    onSuccess: (updatedStudent: Student) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Success\",\n        description: \"Student locked for editing\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to lock student\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Unlock student mutation  \n  const unlockEditMutation = useMutation({\n    mutationFn: async (studentId: string) => {\n      const response = await apiRequest('POST', `/api/students/${studentId}/unlock`);\n      return await response.json();\n    },\n    onSuccess: (updatedStudent: Student) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Success\", \n        description: \"Student unlocked\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to unlock student\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update preferences mutation\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (data: { studentId: string, preferences: any }) => {\n      const response = await apiRequest('PUT', `/api/students/${data.studentId}/preferences`, data.preferences);\n      return await response.json();\n    },\n    onSuccess: (updatedStudent: Student) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      setIsEditModalOpen(false);\n      setSelectedStudentForEdit(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Student preferences updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update preferences\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const { data: studentsData, isLoading } = useQuery({\n    queryKey: [\"/api/students\", { limit: 200, offset: 0 }],\n  });\n\n  // Query settings to check if allocation is finalized\n  const { data: settingsData } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Check if allocation is finalized\n  const isAllocationFinalized = Array.isArray(settingsData) && settingsData.some((setting: any) => \n    setting.key === 'allocation_finalized' && setting.value === 'true'\n  );\n\n  const filteredStudents = (studentsData as any)?.students?.filter((student: Student) => \n    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.meritNumber.toString().includes(searchTerm) ||\n    student.appNo?.includes(searchTerm) ||\n    student.counselingDistrict?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.districtAdmin?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n\n  // Release assignment mutation\n  const releaseAssignmentMutation = useMutation({\n    mutationFn: async (studentId: string) => {\n      const response = await apiRequest('POST', `/api/students/${studentId}/release-assignment`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      toast({\n        title: \"Assignment Released\",\n        description: \"Student assignment has been cleared successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Release Failed\",\n        description: error.message || \"Failed to release assignment\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Finalize allocation mutation\n  const finalizeAllocationMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/allocation/finalize');\n      return await response.json();\n    },\n    onSuccess: (result: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Allocation process finalized successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to finalize allocation\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Confirmation functions for actions\n  const confirmLockStudent = () => {\n    if (!selectedStudentForLock) return;\n    \n    lockForEditMutation.mutate(selectedStudentForLock.id);\n    setIsLockConfirmDialogOpen(false);\n    setSelectedStudentForLock(null);\n  };\n\n  const confirmUnlockStudent = () => {\n    if (!selectedStudentForUnlock) return;\n    \n    unlockEditMutation.mutate(selectedStudentForUnlock.id);\n    setIsUnlockConfirmDialogOpen(false);\n    setSelectedStudentForUnlock(null);\n  };\n\n  const confirmReleaseAssignment = () => {\n    if (!selectedStudentForRelease) return;\n    \n    releaseAssignmentMutation.mutate(selectedStudentForRelease.id);\n    setIsReleaseConfirmDialogOpen(false);\n    setSelectedStudentForRelease(null);\n  };\n\n  const openEditModal = (student: Student) => {\n    // Directly open edit modal without locking\n    setSelectedStudentForEdit(student);\n    form.reset({\n      stream: student.stream as any || \"NonMedical\",\n      choice1: student.choice1 || '',\n      choice2: student.choice2 || '',\n      choice3: student.choice3 || '',\n      choice4: student.choice4 || '',\n      choice5: student.choice5 || '',\n      choice6: student.choice6 || '',\n      choice7: student.choice7 || '',\n      choice8: student.choice8 || '',\n      choice9: student.choice9 || '',\n      choice10: student.choice10 || '',\n    });\n    setIsEditModalOpen(true);\n  };\n\n  const openChoicesModal = (student: Student) => {\n    setSelectedStudentForChoices(student);\n    setIsChoicesModalOpen(true);\n  };\n\n  const handleModalSave = (data: any) => {\n    if (!selectedStudentForEdit) return;\n    updatePreferencesMutation.mutate({\n      studentId: selectedStudentForEdit.id,\n      preferences: data\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'allotted':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Allotted</Badge>;\n      case 'not_allotted':\n        return <Badge variant=\"destructive\">Not Allotted</Badge>;\n      case 'pending':\n        return <Badge variant=\"outline\">Pending</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Helper function to determine if current user can edit a specific student\n  const canEditStudent = (student: Student) => {\n    if (!user) return false;\n    \n    // Central admin can edit all students\n    if (user.role === 'central_admin') {\n      return true;\n    }\n    \n    // District admin logic\n    if (user.role === 'district_admin') {\n      // If student has no assigned district admin (N/A), any district admin can edit\n      if (!student.districtAdmin) {\n        return true;\n      }\n      \n      // Check if student belongs to this district\n      const belongsToDistrict = student.counselingDistrict === user.district;\n      \n      // If student has an assigned district admin, only that specific admin can edit\n      return student.districtAdmin === user.username && belongsToDistrict;\n    }\n    \n    return false;\n  };\n\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Student Preference Management\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Student Preference Management\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"space-y-6\">\n          {/* Header with Search */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <UserCog className=\"w-5 h-5 mr-2 text-primary\" />\n                  Student Preferences - Central Admin View\n                </div>\n                {user?.role === 'central_admin' && (\n                  <Button \n                    variant={isAllocationFinalized ? \"outline\" : \"default\"}\n                    size=\"sm\"\n                    onClick={() => {\n                      if (!isAllocationFinalized && window.confirm('Are you sure you want to finalize the allocation process? This action cannot be undone.')) {\n                        finalizeAllocationMutation.mutate();\n                      }\n                    }}\n                    disabled={finalizeAllocationMutation.isPending || isAllocationFinalized}\n                    data-testid=\"button-finalize-allocation\"\n                    className={isAllocationFinalized \n                      ? \"bg-gray-100 text-gray-600 cursor-not-allowed\" \n                      : \"bg-green-600 hover:bg-green-700 text-white\"\n                    }\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    {finalizeAllocationMutation.isPending \n                      ? \"Finalizing...\" \n                      : isAllocationFinalized \n                        ? \"Allocation Finalized\" \n                        : \"Finalize Allocation\"\n                    }\n                  </Button>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-4 mb-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search by name, merit number, app number, district, or admin...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-students\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Students Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Students ({filteredStudents.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Merit #</TableHead>\n                      <TableHead>Student Name</TableHead>\n                      <TableHead>App No</TableHead>\n                      <TableHead>Stream</TableHead>\n                      <TableHead>Current District</TableHead>\n                      <TableHead>District Admin</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Lock Status</TableHead>\n                      <TableHead>Choices</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {isLoading ? (\n                      <TableRow>\n                        <TableCell colSpan={10} className=\"text-center py-8\">\n                          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                        </TableCell>\n                      </TableRow>\n                    ) : filteredStudents.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={10} className=\"text-center py-8 text-muted-foreground\">\n                          No students found\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      filteredStudents.map((student: Student) => (\n                        <TableRow key={student.id}>\n                          <TableCell className=\"font-mono\">\n                            {student.meritNumber}\n                          </TableCell>\n                          <TableCell className=\"font-medium\">\n                            {student.name}\n                          </TableCell>\n                          <TableCell className=\"font-mono\">\n                            {student.appNo}\n                          </TableCell>\n                          <TableCell>\n                            {student.stream ? (\n                              <Badge variant=\"outline\">{student.stream}</Badge>\n                            ) : (\n                              <Badge variant=\"destructive\">Not Set</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {student.counselingDistrict || (\n                              <span className=\"text-muted-foreground\">Not Assigned</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {student.districtAdmin || (\n                              <span className=\"text-muted-foreground\">Not Assigned</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {getStatusBadge(student.allocationStatus || 'pending')}\n                          </TableCell>\n                          <TableCell>\n                            {student.lockedBy ? (\n                              <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                                <Lock className=\"w-3 h-3 mr-1\" />\n                                Locked\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"outline\">\n                                <Unlock className=\"w-3 h-3 mr-1\" />\n                                Unlocked\n                              </Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => openChoicesModal(student)}\n                              className=\"p-1 h-6 w-6\"\n                              data-testid={`button-view-choices-${student.id}`}\n                            >\n                              <Eye className=\"w-3 h-3\" />\n                            </Button>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              {/* Case 1: Student is locked - show only unlock button */}\n                              {user?.role === 'central_admin' && student.lockedBy ? (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    setSelectedStudentForUnlock(student);\n                                    setIsUnlockConfirmDialogOpen(true);\n                                  }}\n                                  disabled={unlockEditMutation.isPending}\n                                  data-testid={`button-unlock-${student.id}`}\n                                >\n                                  <Unlock className=\"w-4 h-4 mr-1\" />\n                                  Unlock\n                                </Button>\n                              ) : user?.role === 'central_admin' && \n                                        student.counselingDistrict === 'Mohali' && \n                                        student.districtAdmin === 'Central_admin' && \n                                        areAllPreferencesFilled(student) ? (\n                                /* Case 2: Central admin with filled preferences and not locked - show lock + release buttons */\n                                <>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => {\n                                      setSelectedStudentForLock(student);\n                                      setIsLockConfirmDialogOpen(true);\n                                    }}\n                                    disabled={lockForEditMutation.isPending}\n                                    data-testid={`button-lock-${student.id}`}\n                                  >\n                                    <Lock className=\"w-4 h-4 mr-1\" />\n                                    Lock\n                                  </Button>\n                                  \n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => {\n                                      setSelectedStudentForRelease(student);\n                                      setIsReleaseConfirmDialogOpen(true);\n                                    }}\n                                    disabled={releaseAssignmentMutation.isPending}\n                                    data-testid={`button-release-${student.id}`}\n                                    className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                                  >\n                                    <XCircle className=\"w-4 h-4 mr-1\" />\n                                    Release\n                                  </Button>\n                                </>\n                              ) : (\n                                /* Case 3: Regular edit button for all other cases */\n                                canEditStudent(student) && !student.lockedBy ? (\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => openEditModal(student)}\n                                    data-testid={`button-edit-${student.id}`}\n                                  >\n                                    <Edit className=\"w-4 h-4 mr-1\" />\n                                    Edit\n                                  </Button>\n                                ) : (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    disabled\n                                    data-testid={`button-edit-disabled-${student.id}`}\n                                    className=\"text-muted-foreground\"\n                                  >\n                                    <Edit className=\"w-4 h-4 mr-1\" />\n                                    Edit\n                                  </Button>\n                                )\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {/* Edit Modal */}\n      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n        <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Student Preferences</DialogTitle>\n          </DialogHeader>\n          \n          {selectedStudentForEdit && (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleModalSave)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 p-4 bg-muted rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium\">Student Name</p>\n                    <p className=\"text-lg\">{selectedStudentForEdit.name}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium\">Merit Number</p>\n                    <p className=\"text-lg font-mono\">{selectedStudentForEdit.meritNumber}</p>\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"stream\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Stream</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select stream\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {STREAMS.map((stream) => (\n                            <SelectItem key={stream} value={stream}>\n                              {stream}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {Array.from({ length: 10 }, (_, i) => i + 1).map((choiceNum) => (\n                    <FormField\n                      key={choiceNum}\n                      control={form.control}\n                      name={`choice${choiceNum}` as any}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Choice {choiceNum}</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder={`Select choice ${choiceNum}`} />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\" \">\n                                <span className=\"text-muted-foreground\">No selection</span>\n                              </SelectItem>\n                              {DISTRICTS.map((district) => (\n                                <SelectItem key={district} value={district}>\n                                  {district}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  ))}\n                </div>\n\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsEditModalOpen(false)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    <X className=\"w-4 h-4 mr-1\" />\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updatePreferencesMutation.isPending}\n                    data-testid=\"button-save-preferences\"\n                  >\n                    {updatePreferencesMutation.isPending ? \"Saving...\" : \"Save Preferences\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Choices View Modal */}\n      <Dialog open={isChoicesModalOpen} onOpenChange={setIsChoicesModalOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>District Choices - {selectedStudentForChoices?.name}</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-3\">\n            <div className=\"grid grid-cols-1 gap-2\">\n              {selectedStudentForChoices && [\n                selectedStudentForChoices.choice1, selectedStudentForChoices.choice2, \n                selectedStudentForChoices.choice3, selectedStudentForChoices.choice4, \n                selectedStudentForChoices.choice5, selectedStudentForChoices.choice6,\n                selectedStudentForChoices.choice7, selectedStudentForChoices.choice8, \n                selectedStudentForChoices.choice9, selectedStudentForChoices.choice10\n              ].map((choice, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded\">\n                  <span className=\"font-medium\">Choice {index + 1}:</span>\n                  <span className={choice ? \"text-blue-600\" : \"text-gray-400\"}>\n                    {choice || \"Not set\"}\n                  </span>\n                </div>\n              ))}\n            </div>\n            \n            {selectedStudentForChoices && (\n              <div className=\"mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded\">\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div><strong>Stream:</strong> {selectedStudentForChoices.stream || \"Not set\"}</div>\n                  <div><strong>Status:</strong> {selectedStudentForChoices.isLocked ? \"🔒 Locked\" : \"🔓 Unlocked\"}</div>\n                  <div><strong>Merit Number:</strong> {selectedStudentForChoices.meritNumber}</div>\n                  <div><strong>App Number:</strong> {selectedStudentForChoices.appNo}</div>\n                  <div><strong>Current District:</strong> {selectedStudentForChoices.counselingDistrict || \"Not assigned\"}</div>\n                  <div><strong>District Admin:</strong> {selectedStudentForChoices.districtAdmin || \"Not assigned\"}</div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <DialogFooter>\n            <Button \n              variant=\"outline\"\n              onClick={() => setIsChoicesModalOpen(false)}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Lock Confirmation Dialog */}\n      <AlertDialog open={isLockConfirmDialogOpen} onOpenChange={setIsLockConfirmDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Lock Student Preferences</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to lock {selectedStudentForLock?.name}'s preferences? \n              This will prevent further edits to their district choices until unlocked by a central administrator.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          \n          {selectedStudentForLock && (\n            <div className=\"space-y-3 py-4\">\n              <div className=\"grid grid-cols-2 gap-4 p-3 bg-muted rounded-lg\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Student Name</p>\n                  <p className=\"font-semibold\" data-testid=\"text-lock-student-name\">\n                    {selectedStudentForLock.name}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Merit Number</p>\n                  <p className=\"font-mono\" data-testid=\"text-lock-student-merit\">\n                    {selectedStudentForLock.meritNumber}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Stream</p>\n                  <p className=\"font-semibold\" data-testid=\"text-lock-student-stream\">\n                    {selectedStudentForLock.stream}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Choices</p>\n                  <p className=\"font-semibold\">\n                    {[selectedStudentForLock.choice1, selectedStudentForLock.choice2, selectedStudentForLock.choice3,\n                      selectedStudentForLock.choice4, selectedStudentForLock.choice5, selectedStudentForLock.choice6,\n                      selectedStudentForLock.choice7, selectedStudentForLock.choice8, selectedStudentForLock.choice9,\n                      selectedStudentForLock.choice10].filter(Boolean).length} / 10\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"p-3 border-l-4 border-blue-500 bg-blue-50 dark:bg-blue-950/20\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                  <strong>⚠️ Important:</strong> Once locked, only central administrators can unlock this student's preferences for further editing.\n                </p>\n              </div>\n            </div>\n          )}\n\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmLockStudent}\n              disabled={lockForEditMutation.isPending}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {lockForEditMutation.isPending ? \"Locking...\" : \"🔒 Lock Student\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Unlock Confirmation Dialog */}\n      <AlertDialog open={isUnlockConfirmDialogOpen} onOpenChange={setIsUnlockConfirmDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Unlock Student Preferences</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to unlock {selectedStudentForUnlock?.name}'s preferences? \n              This will allow them or district administrators to edit their district choices again.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          \n          {selectedStudentForUnlock && (\n            <div className=\"space-y-3 py-4\">\n              <div className=\"grid grid-cols-2 gap-4 p-3 bg-muted rounded-lg\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Student Name</p>\n                  <p className=\"font-semibold\" data-testid=\"text-unlock-student-name\">\n                    {selectedStudentForUnlock.name}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Merit Number</p>\n                  <p className=\"font-mono\" data-testid=\"text-unlock-student-merit\">\n                    {selectedStudentForUnlock.meritNumber}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Stream</p>\n                  <p className=\"font-semibold\" data-testid=\"text-unlock-student-stream\">\n                    {selectedStudentForUnlock.stream}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Locked By</p>\n                  <p className=\"font-semibold text-blue-600\">\n                    {selectedStudentForUnlock.lockedBy || \"System\"}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"p-3 border-l-4 border-green-500 bg-green-50 dark:bg-green-950/20\">\n                <p className=\"text-sm text-green-800 dark:text-green-200\">\n                  <strong>✅ Note:</strong> Unlocking will allow the student's preferences to be edited again by authorized users.\n                </p>\n              </div>\n            </div>\n          )}\n\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmUnlockStudent}\n              disabled={unlockEditMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              {unlockEditMutation.isPending ? \"Unlocking...\" : \"🔓 Unlock Student\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Release Assignment Confirmation Dialog */}\n      <AlertDialog open={isReleaseConfirmDialogOpen} onOpenChange={setIsReleaseConfirmDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Release Student Assignment</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to release {selectedStudentForRelease?.name}'s assignment? \n              This will clear their district and district admin assignment and make them available for reassignment.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          \n          {selectedStudentForRelease && (\n            <div className=\"space-y-3 py-4\">\n              <div className=\"grid grid-cols-2 gap-4 p-3 bg-muted rounded-lg\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Student Name</p>\n                  <p className=\"font-semibold\" data-testid=\"text-release-student-name\">\n                    {selectedStudentForRelease.name}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Merit Number</p>\n                  <p className=\"font-mono\" data-testid=\"text-release-student-merit\">\n                    {selectedStudentForRelease.meritNumber}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Current District</p>\n                  <p className=\"font-semibold text-blue-600\">\n                    {selectedStudentForRelease.counselingDistrict || \"None\"}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">District Admin</p>\n                  <p className=\"font-semibold text-blue-600\">\n                    {selectedStudentForRelease.districtAdmin || \"None\"}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"p-3 border-l-4 border-red-500 bg-red-50 dark:bg-red-950/20\">\n                <p className=\"text-sm text-red-800 dark:text-red-200\">\n                  <strong>⚠️ Warning:</strong> This action will remove the student's current district assignment and make them available for reassignment. Their preferences will remain intact.\n                </p>\n              </div>\n            </div>\n          )}\n\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmReleaseAssignment}\n              disabled={releaseAssignmentMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              {releaseAssignmentMutation.isPending ? \"Releasing...\" : \"🔄 Release Assignment\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":39713},"client/src/components/ui/data-pagination.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Pagination,\n  PaginationContent,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n  PaginationEllipsis\n} from \"@/components/ui/pagination\";\n\ninterface DataPaginationProps {\n  currentPage: number;\n  totalItems: number;\n  itemsPerPage: number;\n  onPageChange: (page: number) => void;\n  onItemsPerPageChange?: (itemsPerPage: number) => void;\n  showItemsPerPageSelector?: boolean;\n  itemsPerPageOptions?: number[];\n  showPageNumbers?: boolean;\n}\n\nexport function DataPagination({\n  currentPage,\n  totalItems,\n  itemsPerPage,\n  onPageChange,\n  onItemsPerPageChange,\n  showItemsPerPageSelector = true,\n  itemsPerPageOptions = [10, 25, 50, 100],\n  showPageNumbers = true\n}: DataPaginationProps) {\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startItem = currentPage * itemsPerPage + 1;\n  const endItem = Math.min((currentPage + 1) * itemsPerPage, totalItems);\n\n  const canGoPrevious = currentPage > 0;\n  const canGoNext = currentPage < totalPages - 1;\n\n  const getVisiblePages = () => {\n    const delta = 2;\n    const range = [];\n    const rangeWithDots = [];\n\n    for (let i = Math.max(0, currentPage - delta); \n         i <= Math.min(totalPages - 1, currentPage + delta); \n         i++) {\n      range.push(i);\n    }\n\n    if (range[0] > 1) {\n      rangeWithDots.push(0);\n      if (range[0] > 2) {\n        rangeWithDots.push(-1);\n      }\n    } else if (range[0] === 1) {\n      rangeWithDots.push(0);\n    }\n\n    rangeWithDots.push(...range);\n\n    if (range[range.length - 1] < totalPages - 2) {\n      rangeWithDots.push(-1);\n      rangeWithDots.push(totalPages - 1);\n    } else if (range[range.length - 1] === totalPages - 2) {\n      rangeWithDots.push(totalPages - 1);\n    }\n\n    return rangeWithDots;\n  };\n\n  if (totalItems === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex items-center justify-between space-x-6 lg:space-x-8 py-4\" data-testid=\"data-pagination\">\n      <div className=\"flex items-center space-x-2\">\n        <p className=\"text-sm text-muted-foreground\" data-testid=\"pagination-info\">\n          Showing {startItem}-{endItem} of {totalItems}\n        </p>\n        {showItemsPerPageSelector && onItemsPerPageChange && (\n          <div className=\"flex items-center space-x-2\">\n            <p className=\"text-sm text-muted-foreground\">per page</p>\n            <Select\n              value={itemsPerPage.toString()}\n              onValueChange={(value) => onItemsPerPageChange(parseInt(value))}\n            >\n              <SelectTrigger className=\"h-8 w-[70px]\" data-testid=\"select-items-per-page\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent side=\"top\">\n                {itemsPerPageOptions.map((pageSize) => (\n                  <SelectItem key={pageSize} value={pageSize.toString()}>\n                    {pageSize}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        )}\n      </div>\n\n      <Pagination>\n        <PaginationContent>\n          <PaginationItem>\n            <PaginationPrevious \n              onClick={() => canGoPrevious && onPageChange(currentPage - 1)}\n              className={canGoPrevious ? \"cursor-pointer\" : \"cursor-not-allowed opacity-50\"}\n              data-testid=\"button-previous-page\"\n            />\n          </PaginationItem>\n\n          {showPageNumbers && getVisiblePages().map((page, index) => (\n            page === -1 ? (\n              <PaginationItem key={`dots-${index}`}>\n                <PaginationEllipsis />\n              </PaginationItem>\n            ) : (\n              <PaginationItem key={page}>\n                <PaginationLink\n                  onClick={() => onPageChange(page)}\n                  isActive={page === currentPage}\n                  className=\"cursor-pointer\"\n                  data-testid={`button-page-${page + 1}`}\n                >\n                  {page + 1}\n                </PaginationLink>\n              </PaginationItem>\n            )\n          ))}\n\n          <PaginationItem>\n            <PaginationNext \n              onClick={() => canGoNext && onPageChange(currentPage + 1)}\n              className={canGoNext ? \"cursor-pointer\" : \"cursor-not-allowed opacity-50\"}\n              data-testid=\"button-next-page\"\n            />\n          </PaginationItem>\n        </PaginationContent>\n      </Pagination>\n    </div>\n  );\n}","size_bytes":4550},"server/seed.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport bcrypt from 'bcrypt';\nimport { storage } from './storage';\nimport type { InsertUser } from '@shared/schema';\n\ninterface CredentialUser {\n  username: string;\n  email: string;\n  password: string;\n  role: string;\n  district?: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface Credentials {\n  central_admin: CredentialUser;\n  district_admins: CredentialUser[];\n}\n\nasync function seedUsers() {\n  try {\n    console.log('🌱 Starting user seeding...');\n    \n    // Read credentials.json\n    const credentialsData = fs.readFileSync(path.join(import.meta.dirname, '..', 'credentials.json'), 'utf-8');\n    const credentials: Credentials = JSON.parse(credentialsData);\n    \n    const usersToSeed: CredentialUser[] = [\n      credentials.central_admin,\n      ...credentials.district_admins\n    ];\n    \n    let seedCount = 0;\n    \n    for (const userData of usersToSeed) {\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        console.log(`⏭️  User ${userData.username} already exists, skipping...`);\n        continue;\n      }\n      \n      // Hash the password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      // Prepare user data (excluding password from credentials for security)\n      const { password: _, ...safeCredentials } = userData;\n      const newUser: InsertUser = {\n        username: userData.username,\n        email: userData.email,\n        password: hashedPassword,\n        role: userData.role as 'central_admin' | 'district_admin',\n        district: userData.district || null,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        credentials: safeCredentials, // Store credentials without plaintext password\n        isBlocked: false,\n      };\n      \n      // Create user\n      const createdUser = await storage.createUser(newUser);\n      console.log(`✅ Created user: ${createdUser.username} (${createdUser.role})`);\n      seedCount++;\n    }\n    \n    console.log(`🎉 Seeding completed! Added ${seedCount} new users.`);\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Seeding failed:', error);\n    process.exit(1);\n  }\n}\n\n// Run the seeder\nseedUsers();","size_bytes":2304},"uploads/usersql.md":{"content":"-- Insert Central Admin\nINSERT INTO users (\n    id, username, email, password, role, district, \n    first_name, last_name, is_blocked, created_at, updated_at\n) VALUES (\n    gen_random_uuid(),\n    'central_admin',\n    'central.admin@punjab.gov.in',\n    '$2b$10$[bcrypt_hash_of_Punjab@2024]', -- Password: Punjab@2024\n    'central_admin',\n    NULL,\n    'Central',\n    'Administrator',\n    false,\n    NOW(),\n    NOW()\n);\n\n-- Insert District Admins\nINSERT INTO users (\n    id, username, email, password, role, district, \n    first_name, last_name, is_blocked, created_at, updated_at\n) VALUES \n    (gen_random_uuid(), 'amritsar_admin', 'admin.amritsar@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Amritsar@2024]', 'district_admin', 'Amritsar', 'Amritsar', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'barnala_admin', 'admin.barnala@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Barnala@2024]', 'district_admin', 'Barnala', 'Barnala', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'bathinda_admin', 'admin.bathinda@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Bathinda@2024]', 'district_admin', 'Bathinda', 'Bathinda', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'faridkot_admin', 'admin.faridkot@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Faridkot@2024]', 'district_admin', 'Faridkot', 'Faridkot', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'fatehgarh_sahib_admin', 'admin.fatehgarh@punjab.gov.in', '$2b$10$[bcrypt_hash_of_FatehgarhSahib@2024]', 'district_admin', 'Fatehgarh Sahib', 'Fatehgarh Sahib', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'fazilka_admin', 'admin.fazilka@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Fazilka@2024]', 'district_admin', 'Fazilka', 'Fazilka', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'ferozepur_admin', 'admin.ferozepur@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Ferozepur@2024]', 'district_admin', 'Ferozepur', 'Ferozepur', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'gurdaspur_admin', 'admin.gurdaspur@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Gurdaspur@2024]', 'district_admin', 'Gurdaspur', 'Gurdaspur', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'hoshiarpur_admin', 'admin.hoshiarpur@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Hoshiarpur@2024]', 'district_admin', 'Hoshiarpur', 'Hoshiarpur', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'jalandhar_admin', 'admin.jalandhar@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Jalandhar@2024]', 'district_admin', 'Jalandhar', 'Jalandhar', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'kapurthala_admin', 'admin.kapurthala@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Kapurthala@2024]', 'district_admin', 'Kapurthala', 'Kapurthala', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'ludhiana_admin', 'admin.ludhiana@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Ludhiana@2024]', 'district_admin', 'Ludhiana', 'Ludhiana', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'mansa_admin', 'admin.mansa@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Mansa@2024]', 'district_admin', 'Mansa', 'Mansa', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'moga_admin', 'admin.moga@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Moga@2024]', 'district_admin', 'Moga', 'Moga', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'muktsar_admin', 'admin.muktsar@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Muktsar@2024]', 'district_admin', 'Muktsar', 'Muktsar', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'nawanshahr_admin', 'admin.nawanshahr@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Nawanshahr@2024]', 'district_admin', 'Nawanshahr', 'Nawanshahr', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'pathankot_admin', 'admin.pathankot@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Pathankot@2024]', 'district_admin', 'Pathankot', 'Pathankot', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'patiala_admin', 'admin.patiala@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Patiala@2024]', 'district_admin', 'Patiala', 'Patiala', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'rupnagar_admin', 'admin.rupnagar@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Rupnagar@2024]', 'district_admin', 'Rupnagar', 'Rupnagar', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'sas_nagar_admin', 'admin.sasnagar@punjab.gov.in', '$2b$10$[bcrypt_hash_of_SASNagar@2024]', 'district_admin', 'SAS Nagar', 'SAS Nagar', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'sangrur_admin', 'admin.sangrur@punjab.gov.in', '$2b$10$[bcrypt_hash_of_Sangrur@2024]', 'district_admin', 'Sangrur', 'Sangrur', 'Admin', false, NOW(), NOW()),\n    (gen_random_uuid(), 'tarn_taran_admin', 'admin.tarntaran@punjab.gov.in', '$2b$10$[bcrypt_hash_of_TarnTaran@2024]', 'district_admin', 'Tarn Taran', 'Tarn Taran', 'Admin', false, NOW(), NOW());","size_bytes":4753},"client/src/components/ui/data-preview-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Pagination, \n  PaginationContent, \n  PaginationItem, \n  PaginationLink, \n  PaginationNext, \n  PaginationPrevious, \n  PaginationEllipsis \n} from \"@/components/ui/pagination\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, XCircle, AlertTriangle, FileSpreadsheet, X, Upload } from \"lucide-react\";\n\ninterface DataPreviewModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  validationResults: {\n    isValid: boolean;\n    message: string;\n    errors: string[];\n    warnings: string[];\n    recordCount: number;\n    allRecords: any[];\n  };\n  fileType: 'students' | 'vacancies' | 'entrance-results';\n  fileName: string;\n  isUploading: boolean;\n}\n\nconst ITEMS_PER_PAGE = 20;\n\nexport function DataPreviewModal({\n  isOpen,\n  onClose,\n  onConfirm,\n  validationResults,\n  fileType,\n  fileName,\n  isUploading\n}: DataPreviewModalProps) {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const totalPages = Math.ceil((validationResults.allRecords?.length || 0) / ITEMS_PER_PAGE);\n  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n  const endIndex = startIndex + ITEMS_PER_PAGE;\n  const currentRecords = validationResults.allRecords?.slice(startIndex, endIndex) || [];\n\n  const renderStudentTable = (records: any[]) => (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full text-sm border-collapse\">\n        <thead>\n          <tr className=\"border-b bg-muted/50\">\n            <th className=\"p-2 text-left font-medium\">App No</th>\n            <th className=\"p-2 text-left font-medium\">Merit</th>\n            <th className=\"p-2 text-left font-medium\">Name</th>\n            <th className=\"p-2 text-left font-medium\">Stream</th>\n            <th className=\"p-2 text-left font-medium\">Gender</th>\n            <th className=\"p-2 text-left font-medium\">Category</th>\n            <th className=\"p-2 text-left font-medium\">Choice 1</th>\n            <th className=\"p-2 text-left font-medium\">Choice 2</th>\n            <th className=\"p-2 text-left font-medium\">Choice 3</th>\n          </tr>\n        </thead>\n        <tbody>\n          {records.map((record, index) => (\n            <tr key={index} className=\"border-b hover:bg-muted/20\">\n              <td className=\"p-2\">{record.appNo || '-'}</td>\n              <td className=\"p-2\">{record.meritNumber || '-'}</td>\n              <td className=\"p-2 font-medium\">{record.name || '-'}</td>\n              <td className=\"p-2\">\n                <Badge variant=\"outline\">{record.stream || '-'}</Badge>\n              </td>\n              <td className=\"p-2\">{record.gender || '-'}</td>\n              <td className=\"p-2\">{record.category || '-'}</td>\n              <td className=\"p-2\">{record.choice1 || '-'}</td>\n              <td className=\"p-2\">{record.choice2 || '-'}</td>\n              <td className=\"p-2\">{record.choice3 || '-'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  const renderVacancyTable = (records: any[]) => (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full text-sm border-collapse\">\n        <thead>\n          <tr className=\"border-b bg-muted/50\">\n            <th className=\"p-2 text-left font-medium\">District</th>\n            <th className=\"p-2 text-left font-medium\">Stream</th>\n            <th className=\"p-2 text-left font-medium\">Gender</th>\n            <th className=\"p-2 text-left font-medium\">Category</th>\n            <th className=\"p-2 text-center font-medium\">Total Seats</th>\n            <th className=\"p-2 text-center font-medium\">Available Seats</th>\n          </tr>\n        </thead>\n        <tbody>\n          {records.map((record, index) => (\n            <tr key={index} className=\"border-b hover:bg-muted/20\">\n              <td className=\"p-2 font-medium\">{record.district || '-'}</td>\n              <td className=\"p-2\">\n                <Badge variant=\"outline\">{record.stream || '-'}</Badge>\n              </td>\n              <td className=\"p-2\">{record.gender || '-'}</td>\n              <td className=\"p-2\">{record.category || '-'}</td>\n              <td className=\"p-2 text-center font-mono\">{record.totalSeats || 0}</td>\n              <td className=\"p-2 text-center font-mono\">{record.availableSeats || 0}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  const renderEntranceResultsTable = (records: any[]) => (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full text-sm border-collapse\">\n        <thead>\n          <tr className=\"border-b bg-muted/50\">\n            <th className=\"p-2 text-left font-medium\">Merit No</th>\n            <th className=\"p-2 text-left font-medium\">App No</th>\n            <th className=\"p-2 text-left font-medium\">Roll No</th>\n            <th className=\"p-2 text-left font-medium\">Student Name</th>\n            <th className=\"p-2 text-center font-medium\">Marks</th>\n            <th className=\"p-2 text-left font-medium\">Gender</th>\n            <th className=\"p-2 text-left font-medium\">Category</th>\n            <th className=\"p-2 text-left font-medium\">Stream</th>\n          </tr>\n        </thead>\n        <tbody>\n          {records.map((record, index) => (\n            <tr key={index} className=\"border-b hover:bg-muted/20\">\n              <td className=\"p-2 font-mono\">{record.meritNo || '-'}</td>\n              <td className=\"p-2\">{record.applicationNo || '-'}</td>\n              <td className=\"p-2 font-mono\">{record.rollNo || '-'}</td>\n              <td className=\"p-2 font-medium\">{record.studentName || '-'}</td>\n              <td className=\"p-2 text-center font-mono font-medium\">{record.marks || 0}</td>\n              <td className=\"p-2\">{record.gender || '-'}</td>\n              <td className=\"p-2\">{record.category || '-'}</td>\n              <td className=\"p-2\">\n                <Badge variant=\"outline\">{record.stream || '-'}</Badge>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  const renderTable = () => {\n    if (!currentRecords.length) {\n      return (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <FileSpreadsheet className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n          <p>No records to display</p>\n        </div>\n      );\n    }\n\n    switch (fileType) {\n      case 'students':\n        return renderStudentTable(currentRecords);\n      case 'vacancies':\n        return renderVacancyTable(currentRecords);\n      case 'entrance-results':\n        return renderEntranceResultsTable(currentRecords);\n      default:\n        return null;\n    }\n  };\n\n  const getTitle = () => {\n    switch (fileType) {\n      case 'students':\n        return 'Student Choices Preview';\n      case 'vacancies':\n        return 'Vacancy Data Preview';\n      case 'entrance-results':\n        return 'Entrance Results Preview';\n      default:\n        return 'Data Preview';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-7xl max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <FileSpreadsheet className=\"w-5 h-5\" />\n              <span>{getTitle()}</span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-preview\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden flex flex-col space-y-4\">\n          {/* File Info Card */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center justify-between\">\n                <span>File: {fileName}</span>\n                <div className=\"flex items-center space-x-2\">\n                  {validationResults.isValid ? (\n                    <Badge variant=\"default\" className=\"bg-green-100 text-green-800 border-green-200\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Valid\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"destructive\">\n                      <XCircle className=\"w-3 h-3 mr-1\" />\n                      Invalid\n                    </Badge>\n                  )}\n                  <Badge variant=\"outline\">\n                    {validationResults.recordCount} records\n                  </Badge>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <p className=\"text-sm text-muted-foreground mb-3\">\n                {validationResults.message}\n              </p>\n\n              {/* Validation Errors */}\n              {validationResults.errors.length > 0 && (\n                <Alert variant=\"destructive\" className=\"mb-3\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <div className=\"font-medium mb-2\">\n                      Found {validationResults.errors.length} validation errors:\n                    </div>\n                    <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                      {validationResults.errors.slice(0, 10).map((error, index) => (\n                        <div key={index} className=\"text-xs font-mono bg-destructive/10 p-1 rounded\">\n                          {error}\n                        </div>\n                      ))}\n                      {validationResults.errors.length > 10 && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          ... and {validationResults.errors.length - 10} more errors\n                        </div>\n                      )}\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {/* Warnings */}\n              {validationResults.warnings?.length > 0 && (\n                <Alert className=\"mb-3\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <div className=\"font-medium mb-2\">Warnings:</div>\n                    <div className=\"space-y-1\">\n                      {validationResults.warnings.map((warning, index) => (\n                        <div key={index} className=\"text-xs\">{warning}</div>\n                      ))}\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Data Table */}\n          <Card className=\"flex-1 overflow-hidden flex flex-col\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm flex items-center justify-between\">\n                <span>Records {startIndex + 1}-{Math.min(endIndex, validationResults.recordCount)} of {validationResults.recordCount}</span>\n                {totalPages > 1 && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Page {currentPage} of {totalPages}\n                  </div>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"flex-1 overflow-auto\">\n              {renderTable()}\n            </CardContent>\n          </Card>\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <Pagination>\n              <PaginationContent>\n                <PaginationItem>\n                  <PaginationPrevious \n                    onClick={() => currentPage > 1 && setCurrentPage(currentPage - 1)}\n                    className={currentPage === 1 ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                  />\n                </PaginationItem>\n                \n                {/* Page Numbers */}\n                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                  const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;\n                  if (pageNum > totalPages) return null;\n                  \n                  return (\n                    <PaginationItem key={pageNum}>\n                      <PaginationLink\n                        onClick={() => setCurrentPage(pageNum)}\n                        isActive={currentPage === pageNum}\n                        className=\"cursor-pointer\"\n                      >\n                        {pageNum}\n                      </PaginationLink>\n                    </PaginationItem>\n                  );\n                })}\n                \n                {totalPages > 5 && currentPage < totalPages - 2 && (\n                  <PaginationItem>\n                    <PaginationEllipsis />\n                  </PaginationItem>\n                )}\n                \n                <PaginationItem>\n                  <PaginationNext \n                    onClick={() => currentPage < totalPages && setCurrentPage(currentPage + 1)}\n                    className={currentPage === totalPages ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                  />\n                </PaginationItem>\n              </PaginationContent>\n            </Pagination>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={isUploading}\n            data-testid=\"button-cancel-upload\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={onConfirm}\n            disabled={!validationResults.isValid || isUploading}\n            data-testid=\"button-confirm-upload\"\n          >\n            {isUploading ? (\n              <>\n                <div className=\"w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                Uploading...\n              </>\n            ) : (\n              <>\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Confirm & Upload to Database\n              </>\n            )}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14454},"client/src/pages/profile.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { PasswordInput } from '@/components/ui/password-input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { User, Lock, Upload } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n  district?: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [csvFile, setCsvFile] = useState<File | null>(null);\n  const [defaultPassword, setDefaultPassword] = useState('Punjab@2024');\n\n  // Get current user\n  const { data: user, isLoading: userLoading } = useQuery<User>({\n    queryKey: ['/api/auth/user'],\n  });\n\n  // Change password mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: { currentPassword: string; newPassword: string }) => {\n      return apiRequest('PUT', '/api/auth/change-password', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Password changed successfully',\n      });\n      setCurrentPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to change password',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // CSV import mutation (only for central admin)\n  const importUsersMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await fetch('/api/users/import', {\n        method: 'POST',\n        body: data,\n      });\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Import Complete',\n        description: `Imported ${data.importedCount} users, skipped ${data.skippedCount}`,\n      });\n      setCsvFile(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Import Failed',\n        description: error.message || 'Failed to import users',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handlePasswordChange = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (newPassword !== confirmPassword) {\n      toast({\n        title: 'Error',\n        description: 'New passwords do not match',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: 'Error',\n        description: 'Password must be at least 6 characters long',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    changePasswordMutation.mutate({ currentPassword, newPassword });\n  };\n\n  const handleCsvImport = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!csvFile) {\n      toast({\n        title: 'Error',\n        description: 'Please select a CSV file',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', csvFile);\n    formData.append('defaultPassword', defaultPassword);\n\n    importUsersMutation.mutate(formData);\n  };\n\n  if (userLoading) {\n    return <div data-testid=\"loading-profile\">Loading profile...</div>;\n  }\n\n  if (!user) {\n    return <div data-testid=\"error-no-user\">No user data available</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 space-y-6\" data-testid=\"profile-page\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <User className=\"h-8 w-8 text-primary\" />\n        <h1 className=\"text-3xl font-bold\">Profile Settings</h1>\n      </div>\n\n      {/* User Information */}\n      <Card data-testid=\"card-user-info\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            User Information\n          </CardTitle>\n          <CardDescription>Your account details and role information</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label>Username</Label>\n              <div className=\"font-medium\" data-testid=\"text-username\">{user.username}</div>\n            </div>\n            <div>\n              <Label>Email</Label>\n              <div className=\"font-medium\" data-testid=\"text-email\">{user.email || 'Not set'}</div>\n            </div>\n            <div>\n              <Label>Role</Label>\n              <div>\n                <Badge variant={user.role === 'central_admin' ? 'default' : 'secondary'} data-testid=\"badge-role\">\n                  {user.role.replace('_', ' ').toUpperCase()}\n                </Badge>\n              </div>\n            </div>\n            <div>\n              <Label>District</Label>\n              <div className=\"font-medium\" data-testid=\"text-district\">{user.district || 'N/A'}</div>\n            </div>\n            <div>\n              <Label>First Name</Label>\n              <div className=\"font-medium\" data-testid=\"text-firstname\">{user.firstName}</div>\n            </div>\n            <div>\n              <Label>Last Name</Label>\n              <div className=\"font-medium\" data-testid=\"text-lastname\">{user.lastName}</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Change Password */}\n      <Card data-testid=\"card-change-password\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Lock className=\"h-5 w-5\" />\n            Change Password\n          </CardTitle>\n          <CardDescription>Update your account password</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handlePasswordChange} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"current-password\">Current Password</Label>\n              <PasswordInput\n                id=\"current-password\"\n                value={currentPassword}\n                onChange={(e) => setCurrentPassword(e.target.value)}\n                required\n                data-testid=\"input-current-password\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"new-password\">New Password</Label>\n              <PasswordInput\n                id=\"new-password\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                required\n                minLength={6}\n                data-testid=\"input-new-password\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n              <PasswordInput\n                id=\"confirm-password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n                minLength={6}\n                data-testid=\"input-confirm-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              disabled={changePasswordMutation.isPending}\n              data-testid=\"button-change-password\"\n            >\n              {changePasswordMutation.isPending ? 'Changing...' : 'Change Password'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* CSV User Import - Only for Central Admin */}\n      {user.role === 'central_admin' && (\n        <Card data-testid=\"card-csv-import\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Upload className=\"h-5 w-5\" />\n              Import Users from CSV\n            </CardTitle>\n            <CardDescription>\n              Import multiple users from a CSV file. All users will have the same default password.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"mb-4\">\n              <AlertDescription>\n                CSV should contain columns: username, email, role, district, firstName, lastName\n              </AlertDescription>\n            </Alert>\n            <form onSubmit={handleCsvImport} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"default-password\">Default Password for All Users</Label>\n                <Input\n                  id=\"default-password\"\n                  type=\"text\"\n                  value={defaultPassword}\n                  onChange={(e) => setDefaultPassword(e.target.value)}\n                  required\n                  data-testid=\"input-default-password\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"csv-file\">CSV File</Label>\n                <Input\n                  id=\"csv-file\"\n                  type=\"file\"\n                  accept=\".csv,.xlsx,.xls\"\n                  onChange={(e) => setCsvFile(e.target.files?.[0] || null)}\n                  required\n                  data-testid=\"input-csv-file\"\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                disabled={importUsersMutation.isPending || !csvFile}\n                data-testid=\"button-import-users\"\n              >\n                {importUsersMutation.isPending ? 'Importing...' : 'Import Users'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10038},"client/src/pages/district-analysis.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  BarChart3, \n  Users, \n  MapPin, \n  CheckCircle, \n  AlertTriangle,\n  TrendingUp,\n  Clock,\n} from \"lucide-react\";\nimport type { DistrictStatus, Student } from \"@shared/schema\";\n\nexport default function DistrictAnalysis() {\n  // Fetch district statuses\n  const { data: districtStatuses, isLoading: loadingStatuses } = useQuery<DistrictStatus[]>({\n    queryKey: [\"/api/district-status\"],\n  });\n\n  // Fetch students data\n  const { data: studentsResponse } = useQuery<{ students: Student[] } | Student[]>({\n    queryKey: [\"/api/students\"],\n  });\n\n  // Fetch vacancies data\n  const { data: vacancies } = useQuery<any[]>({\n    queryKey: [\"/api/vacancies\"],\n  });\n\n  // Handle different API response formats\n  const students = Array.isArray(studentsResponse) ? studentsResponse : (studentsResponse as any)?.students || [];\n\n  // Calculate stream-wise totals\n  const streamTotals = students.reduce((acc: any, student: any) => {\n    if (!student.stream) return acc;\n    acc[student.stream] = (acc[student.stream] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  // Calculate district-wise, stream-wise breakdown\n  const districtBreakdown = districtStatuses?.map(district => {\n    const districtStudents = students.filter((s: any) => s.counselingDistrict === district.district);\n    const streamBreakdown = {\n      Medical: districtStudents.filter((s: any) => s.stream === 'Medical').length,\n      Commerce: districtStudents.filter((s: any) => s.stream === 'Commerce').length,\n      NonMedical: districtStudents.filter((s: any) => s.stream === 'NonMedical').length,\n    };\n\n    const studentsWithChoices = districtStudents.filter((s: any) => \n      s.choice1 || s.choice2 || s.choice3 || s.choice4 || s.choice5 ||\n      s.choice6 || s.choice7 || s.choice8 || s.choice9 || s.choice10\n    );\n\n    const lockedStudents = districtStudents.filter((s: any) => s.isLocked);\n\n    const districtVacancies = vacancies?.filter(v => v.district === district.district) || [];\n    const totalSeats = districtVacancies.reduce((sum, v) => sum + (v.totalSeats || 0), 0);\n\n    return {\n      ...district,\n      students: districtStudents,\n      streamBreakdown,\n      studentsWithChoices: studentsWithChoices.length,\n      lockedStudents: lockedStudents.length,\n      choicesPercentage: districtStudents.length > 0 ? (studentsWithChoices.length / districtStudents.length * 100) : 0,\n      lockedPercentage: districtStudents.length > 0 ? (lockedStudents.length / districtStudents.length * 100) : 0,\n      totalSeats,\n    };\n  }) || [];\n\n  // Calculate overall metrics\n  const totalStudents = students.length;\n  const totalStudentsWithChoices = students.filter((s: any) => \n    s.choice1 || s.choice2 || s.choice3 || s.choice4 || s.choice5 ||\n    s.choice6 || s.choice7 || s.choice8 || s.choice9 || s.choice10\n  ).length;\n  const totalLockedStudents = students.filter((s: any) => s.isLocked).length;\n  const finalizedDistricts = districtStatuses?.filter(ds => ds.isFinalized).length || 0;\n  const totalDistricts = districtStatuses?.length || 0;\n\n  const getStatusIcon = (isFinalized: boolean) => {\n    return isFinalized ? (\n      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n    ) : (\n      <AlertTriangle className=\"w-4 h-4 text-amber-500\" />\n    );\n  };\n\n  const getFinalizationBadge = (isFinalized: boolean) => {\n    return (\n      <Badge variant={isFinalized ? \"secondary\" : \"outline\"} \n             className={isFinalized ? \"bg-green-100 text-green-800\" : \"bg-amber-100 text-amber-800\"}>\n        {isFinalized ? \"Finalized\" : \"Pending\"}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"District Analysis\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Reports\" },\n          { name: \"District Analysis\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"space-y-6\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-blue-500\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"total-students\">\n                      {totalStudents.toLocaleString()}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Total Students</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"students-with-choices\">\n                      {totalStudentsWithChoices.toLocaleString()}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">With Preferences</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"w-5 h-5 text-amber-500\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"finalized-districts\">\n                      {finalizedDistricts}/{totalDistricts}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Districts Finalized</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <BarChart3 className=\"w-5 h-5 text-purple-500\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"locked-students\">\n                      {totalLockedStudents.toLocaleString()}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Locked Students</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Stream-wise Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <TrendingUp className=\"w-5 h-5 mr-2 text-primary\" />\n                Stream-wise Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {Object.entries(streamTotals).map(([stream, count]) => (\n                  <div key={stream} className=\"text-center p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-primary\" data-testid={`stream-${stream.toLowerCase()}-count`}>\n                      {(count as number).toLocaleString()}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">{stream}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {totalStudents > 0 ? ((count as number / totalStudents * 100)).toFixed(1) : 0}%\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* District-wise Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <MapPin className=\"w-5 h-5 mr-2 text-primary\" />\n                  District-wise Analysis\n                </div>\n                <Badge variant={finalizedDistricts === totalDistricts ? \"default\" : \"destructive\"}>\n                  {finalizedDistricts}/{totalDistricts} Finalized\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"overview\" className=\"w-full\">\n                <TabsList>\n                  <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"streams\">Stream Distribution</TabsTrigger>\n                  <TabsTrigger value=\"capacity\">Seat Capacity</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    {loadingStatuses ? (\n                      <div className=\"flex items-center justify-center p-8\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                      </div>\n                    ) : (\n                      districtBreakdown.map((district) => (\n                        <Card key={district.id} className={`border-l-4 ${district.isFinalized ? 'border-l-green-500' : 'border-l-amber-500'}`}>\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2 mb-2\">\n                                  {getStatusIcon(!!district.isFinalized)}\n                                  <h3 className=\"font-semibold\">{district.district}</h3>\n                                  {getFinalizationBadge(!!district.isFinalized)}\n                                  {district.isFinalized && district.finalizedAt && (\n                                    <div className=\"flex items-center text-xs text-muted-foreground\">\n                                      <Clock className=\"w-3 h-3 mr-1\" />\n                                      {formatDistanceToNow(new Date(district.finalizedAt), { addSuffix: true })}\n                                    </div>\n                                  )}\n                                </div>\n                                \n                                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Total Students:</span>\n                                    <p className=\"font-medium\" data-testid={`district-${district.district}-total`}>\n                                      {district.students.length.toLocaleString()}\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">With Preferences:</span>\n                                    <p className=\"font-medium\" data-testid={`district-${district.district}-with-choices`}>\n                                      {district.studentsWithChoices} ({district.choicesPercentage.toFixed(1)}%)\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Locked:</span>\n                                    <p className=\"font-medium\" data-testid={`district-${district.district}-locked`}>\n                                      {district.lockedStudents} ({district.lockedPercentage.toFixed(1)}%)\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Available Seats:</span>\n                                    <p className=\"font-medium\" data-testid={`district-${district.district}-seats`}>\n                                      {district.totalSeats.toLocaleString()}\n                                    </p>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"streams\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    {districtBreakdown.map((district) => (\n                      <Card key={`${district.id}-streams`}>\n                        <CardContent className=\"pt-4\">\n                          <div className=\"flex items-center space-x-2 mb-3\">\n                            {getStatusIcon(!!district.isFinalized)}\n                            <h3 className=\"font-semibold\">{district.district}</h3>\n                            {getFinalizationBadge(!!district.isFinalized)}\n                            {district.isFinalized && district.finalizedAt && (\n                              <div className=\"flex items-center text-xs text-muted-foreground\">\n                                <Clock className=\"w-3 h-3 mr-1\" />\n                                {formatDistanceToNow(new Date(district.finalizedAt), { addSuffix: true })}\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"grid grid-cols-3 gap-4\">\n                            {Object.entries(district.streamBreakdown).map(([stream, count]) => (\n                              <div key={stream} className=\"text-center p-3 bg-gray-50 dark:bg-gray-800 rounded\">\n                                <p className=\"text-lg font-bold\" data-testid={`district-${district.district}-${stream.toLowerCase()}`}>\n                                  {count}\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\">{stream}</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {district.students.length > 0 ? ((count / district.students.length) * 100).toFixed(1) : 0}%\n                                </p>\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"capacity\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    {districtBreakdown.map((district) => {\n                      const demandRatio = district.totalSeats > 0 ? (district.students.length / district.totalSeats) : 0;\n                      return (\n                        <Card key={`${district.id}-capacity`}>\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <div className=\"flex items-center space-x-2\">\n                                {getStatusIcon(!!district.isFinalized)}\n                                <h3 className=\"font-semibold\">{district.district}</h3>\n                                {district.isFinalized && district.finalizedAt && (\n                                  <div className=\"flex items-center text-xs text-muted-foreground\">\n                                    <Clock className=\"w-3 h-3 mr-1\" />\n                                    {formatDistanceToNow(new Date(district.finalizedAt), { addSuffix: true })}\n                                  </div>\n                                )}\n                              </div>\n                              <Badge variant={demandRatio > 1 ? \"destructive\" : demandRatio > 0.8 ? \"outline\" : \"secondary\"}>\n                                {demandRatio > 1 ? \"Over-demand\" : demandRatio > 0.8 ? \"High Demand\" : \"Normal\"}\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                              <div>\n                                <span className=\"text-muted-foreground\">Students:</span>\n                                <p className=\"font-medium\">{district.students.length.toLocaleString()}</p>\n                              </div>\n                              <div>\n                                <span className=\"text-muted-foreground\">Available Seats:</span>\n                                <p className=\"font-medium\">{district.totalSeats.toLocaleString()}</p>\n                              </div>\n                              <div>\n                                <span className=\"text-muted-foreground\">Demand Ratio:</span>\n                                <p className=\"font-medium\">{demandRatio.toFixed(2)}:1</p>\n                              </div>\n                              <div>\n                                <span className=\"text-muted-foreground\">Capacity:</span>\n                                <p className={`font-medium ${demandRatio > 1 ? 'text-red-600' : 'text-green-600'}`}>\n                                  {district.totalSeats > 0 ? ((district.totalSeats / district.students.length) * 100).toFixed(1) : 0}%\n                                </p>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":17936},"client/src/pages/notifications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Bell, \n  Check, \n  X, \n  Clock, \n  User, \n  FileText, \n  AlertTriangle,\n  CheckCircle \n} from \"lucide-react\";\n\ninterface UnlockRequest {\n  id: string;\n  studentId: string;\n  studentName: string;\n  studentMeritNumber: number;\n  districtAdmin: string;\n  district: string;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  requestedAt: string;\n  reviewedAt?: string;\n  reviewedBy?: string;\n}\n\nexport default function Notifications() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: unlockRequests, isLoading } = useQuery({\n    queryKey: [\"/api/unlock-requests\"],\n    enabled: user?.role === 'central_admin',\n  });\n\n  const respondToRequestMutation = useMutation({\n    mutationFn: async ({ requestId, action }: { requestId: string; action: 'approve' | 'reject' }) => {\n      return await apiRequest('PUT', `/api/unlock-requests/${requestId}/respond`, { action });\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/unlock-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: variables.action === 'approve' ? \"Request Approved\" : \"Request Rejected\",\n        description: `Unlock request has been ${variables.action === 'approve' ? 'approved and student unlocked' : 'rejected'}.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process request\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleResponse = (requestId: string, action: 'approve' | 'reject') => {\n    respondToRequestMutation.mutate({ requestId, action });\n  };\n\n  const pendingRequests = (unlockRequests as UnlockRequest[] || []).filter(req => req.status === 'pending');\n  const processedRequests = (unlockRequests as UnlockRequest[] || []).filter(req => req.status !== 'pending');\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-amber-100 text-amber-800 border-amber-200\">\n          <Clock className=\"w-3 h-3 mr-1\" />\n          Pending\n        </Badge>;\n      case 'approved':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n          <CheckCircle className=\"w-3 h-3 mr-1\" />\n          Approved\n        </Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">\n          <X className=\"w-3 h-3 mr-1\" />\n          Rejected\n        </Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header \n        title=\"Notifications & Communications\" \n        breadcrumbs={[\n          { name: \"Home\" },\n          { name: \"Notifications\" }\n        ]}\n      />\n\n      <main className=\"flex-1 p-6 overflow-auto\">\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"w-5 h-5 mr-2 text-primary\" />\n                Communication Center\n                {pendingRequests.length > 0 && (\n                  <Badge variant=\"destructive\" className=\"ml-2\">\n                    {pendingRequests.length} Pending\n                  </Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"pending\" className=\"w-full\">\n                <TabsList>\n                  <TabsTrigger value=\"pending\" className=\"relative\">\n                    Pending Requests\n                    {pendingRequests.length > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-2 bg-red-100 text-red-800\">\n                        {pendingRequests.length}\n                      </Badge>\n                    )}\n                  </TabsTrigger>\n                  <TabsTrigger value=\"processed\">\n                    Processed Requests\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"pending\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    {isLoading ? (\n                      <div className=\"flex items-center justify-center p-8\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                      </div>\n                    ) : pendingRequests.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <CheckCircle className=\"w-12 h-12 mx-auto text-green-500 mb-4\" />\n                        <p className=\"text-muted-foreground\">No pending unlock requests</p>\n                      </div>\n                    ) : (\n                      pendingRequests.map((request: UnlockRequest) => (\n                        <Card key={request.id} className=\"border-l-4 border-l-amber-500\">\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <User className=\"w-4 h-4 text-muted-foreground\" />\n                                  <span className=\"font-semibold\">{request.studentName}</span>\n                                  <Badge variant=\"outline\">Merit #{request.studentMeritNumber}</Badge>\n                                  {getStatusBadge(request.status)}\n                                </div>\n                                \n                                <div className=\"grid grid-cols-2 gap-4 mb-3 text-sm\">\n                                  <div>\n                                    <span className=\"text-muted-foreground\">District:</span> {request.district}\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Admin:</span> {request.districtAdmin}\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Requested:</span>{' '}\n                                    {new Date(request.requestedAt).toLocaleDateString()}\n                                  </div>\n                                </div>\n\n                                <div className=\"mb-4\">\n                                  <div className=\"flex items-start gap-2\">\n                                    <FileText className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                                    <div>\n                                      <div className=\"text-sm font-medium mb-1\">Reason:</div>\n                                      <div className=\"text-sm text-muted-foreground bg-gray-50 dark:bg-gray-800 p-2 rounded\">\n                                        {request.reason}\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n\n                              <div className=\"flex gap-2 ml-4\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleResponse(request.id, 'reject')}\n                                  disabled={respondToRequestMutation.isPending}\n                                  data-testid={`button-reject-${request.id}`}\n                                >\n                                  <X className=\"w-4 h-4 mr-1\" />\n                                  Reject\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleResponse(request.id, 'approve')}\n                                  disabled={respondToRequestMutation.isPending}\n                                  data-testid={`button-approve-${request.id}`}\n                                >\n                                  <Check className=\"w-4 h-4 mr-1\" />\n                                  Approve & Unlock\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"processed\" className=\"mt-6\">\n                  <div className=\"space-y-4\">\n                    {processedRequests.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <FileText className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                        <p className=\"text-muted-foreground\">No processed requests yet</p>\n                      </div>\n                    ) : (\n                      processedRequests.map((request: UnlockRequest) => (\n                        <Card key={request.id}>\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <User className=\"w-4 h-4 text-muted-foreground\" />\n                                  <span className=\"font-semibold\">{request.studentName}</span>\n                                  <Badge variant=\"outline\">Merit #{request.studentMeritNumber}</Badge>\n                                  {getStatusBadge(request.status)}\n                                </div>\n                                \n                                <div className=\"grid grid-cols-3 gap-4 mb-3 text-sm\">\n                                  <div>\n                                    <span className=\"text-muted-foreground\">District:</span> {request.district}\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Admin:</span> {request.districtAdmin}\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Processed:</span>{' '}\n                                    {request.reviewedAt ? new Date(request.reviewedAt).toLocaleDateString() : 'N/A'}\n                                  </div>\n                                </div>\n\n                                <div className=\"text-sm text-muted-foreground bg-gray-50 dark:bg-gray-800 p-2 rounded\">\n                                  {request.reason}\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":11805},"client/src/components/ui/password-input.tsx":{"content":"import React, { useState } from \"react\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { Input } from \"./input\";\nimport { Button } from \"./button\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface PasswordInputProps extends React.ComponentProps<typeof Input> {\n  className?: string;\n}\n\nconst PasswordInput = React.forwardRef<HTMLInputElement, PasswordInputProps>(\n  ({ className, ...props }, ref) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    const togglePasswordVisibility = () => {\n      setShowPassword(!showPassword);\n    };\n\n    return (\n      <div className=\"relative\">\n        <Input\n          type={showPassword ? \"text\" : \"password\"}\n          className={cn(\"pr-10\", className)}\n          ref={ref}\n          {...props}\n        />\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n          onClick={togglePasswordVisibility}\n          aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n          data-testid=\"button-toggle-password\"\n        >\n          {showPassword ? (\n            <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n          ) : (\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          )}\n        </Button>\n      </div>\n    );\n  }\n);\n\nPasswordInput.displayName = \"PasswordInput\";\n\nexport { PasswordInput };","size_bytes":1417}},"version":1}